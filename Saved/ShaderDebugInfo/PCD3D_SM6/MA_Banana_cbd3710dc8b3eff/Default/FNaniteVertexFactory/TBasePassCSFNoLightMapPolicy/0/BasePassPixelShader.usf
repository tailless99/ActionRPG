#line 1 "__UE_FILENAME_SENTINEL__"
uint2 UnpackUlongType(uint64_t Value)
		{
			return uint2(uint(Value), uint(Value >> 32));
		}
precise float MakePrecise(in precise float v) { precise float pv = v; return pv; }
precise float2 MakePrecise(in precise float2 v) { precise float2 pv = v; return pv; }
precise float3 MakePrecise(in precise float3 v) { precise float3 pv = v; return pv; }
precise float4 MakePrecise(in precise float4 v) { precise float4 pv = v; return pv; }
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }
float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}
uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;
	return ((1u << MaskWidth) - 1u) << MaskLocation;
}
uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;
	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}
struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};
struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};
struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};
FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}
const static float PI = 3.1415926535897932f;
const static float Max10BitsFloat = 64512.0f;
struct FDFScalar;
FDFScalar DFAdd(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFAdd(FDFScalar Lhs, float Rhs);
FDFScalar DFSubtract(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFSubtract(FDFScalar Lhs, float Rhs);
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs);
FDFScalar DFDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFDivide(FDFScalar Lhs, float Rhs);
FDFScalar DFNegate(FDFScalar V);
float DFDemote(FDFScalar V);
struct FDFScalar
{
	float High;
	float Low;
	float Demote() { return DFDemote(this); }
};
FDFScalar MakeDFScalar(float High, float Low)
{
	FDFScalar Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFScalar DFPromote(FDFScalar Value) { return Value; }
FDFScalar DFPromote(float Value) { return MakeDFScalar(Value, (float)0); }
float DFDemote(FDFScalar Value) { return Value.High + Value.Low; }
float DFDemote(float Value) { return Value; }
FDFScalar DFNegate(FDFScalar Value)
{
	return MakeDFScalar(-Value.High, -Value.Low);
}
FDFScalar DFTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float V =   MakePrecise( ( S ) - ( Lhs ) );
	const float Q =   MakePrecise( ( S ) - ( V ) );
	const float R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float T =   MakePrecise( ( Rhs ) - ( V ) );
	const float Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFScalar(S, Y);
}
FDFScalar DFFastTwoSum(float Lhs, float Rhs)
{
	const float S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float T =   MakePrecise( ( S ) - ( Lhs ) );
	const float E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFScalar(S, E);
}
FDFScalar DFAdd(float Lhs, float Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFScalar DFAdd(FDFScalar Lhs, FDFScalar Rhs)
{
	FDFScalar S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFScalar T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFScalar DFAdd(FDFScalar Lhs, float Rhs)
{
	const FDFScalar S = DFTwoSum(Lhs.High, Rhs);
	const float T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFScalar DFAdd(float Lhs, FDFScalar Rhs) { return DFAdd(Rhs, Lhs); }
FDFScalar DFSubtract(float Lhs, float Rhs) { return DFAdd(Lhs, -Rhs); }
FDFScalar DFSubtract(FDFScalar Lhs, FDFScalar Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFScalar DFSubtract(FDFScalar Lhs, float Rhs) { return DFAdd(Lhs, -Rhs); }
FDFScalar DFSubtract(float Lhs, FDFScalar Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
float DFFastLocalSubtractDemote(FDFScalar Lhs, FDFScalar Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(FDFScalar Lhs, float Rhs)
{
	const float High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float DFFastLocalSubtractDemote(float Lhs, FDFScalar Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFScalar DFTwoProduct(float Lhs, float Rhs)
{
	const float P = Lhs * Rhs;
	const float E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFScalar(P, E);
}
FDFScalar DFMultiply(float Lhs, float Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFScalar DFMultiply(FDFScalar Lhs, FDFScalar Rhs)
{
	const FDFScalar P = DFTwoProduct(Lhs.High, Rhs.High);
	float T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(FDFScalar Lhs, float Rhs)
{
	FDFScalar P = DFTwoProduct(Lhs.High, Rhs);
	float T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFScalar DFMultiply(float Lhs, FDFScalar Rhs) { return DFMultiply(Rhs, Lhs); }
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs);
FDFScalar DFDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float)1 ) ) );
	const float Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFScalar E = DFFastTwoSum(Rh, Rl);
	const FDFScalar D = DFMultiply(E, Th);
	const FDFScalar M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFScalar DFDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar P = DFTwoProduct(Th, Rhs);
	const float Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFDivide(float Lhs, float Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFScalar DFDivide(float Lhs, FDFScalar Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFScalar DFFastDivide(FDFScalar Lhs, FDFScalar Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFScalar R = DFMultiply(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(FDFScalar Lhs, float Rhs)
{
	const float Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFScalar R = DFTwoProduct(Rhs, Th);
	const float Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFScalar DFFastDivide(float Lhs, FDFScalar Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFFastDivide(float Lhs, float Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFScalar DFDivideByPow2(FDFScalar Lhs, float Rhs)
{
	return MakeDFScalar(Lhs.High / Rhs, Lhs.Low / Rhs);
}
float DFFracDemote(FDFScalar V)
{
	return frac(frac(V.High) + frac(V.Low));
}
float DFFmodByPow2Demote(FDFScalar Lhs, float Rhs)
{
	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;
}
FDFScalar DFGetComponent(float V, int C) { return MakeDFScalar(V, 0); }
FDFScalar DFGetComponent(FDFScalar V, int C) { return V; }
struct FDFVector2;
FDFVector2 DFBroadcast2(FDFScalar V);
float2 DFBroadcast2(float V);
FDFScalar DFGetComponent(FDFVector2 V, int C);
FDFVector2 DFNegate(FDFVector2 In);
FDFVector2 DFAdd (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFAdd (FDFVector2 Lhs, float Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFSubtract (FDFVector2 Lhs, float Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFMultiply (FDFVector2 Lhs, float Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, float2 Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, FDFScalar Rhs);
FDFVector2 DFDivide (FDFVector2 Lhs, float Rhs);
float2 DFDemote(FDFVector2 In);
struct FDFVector2
{
	float2 High;
	float2 Low;
	float2 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector2 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector2 MakeDFVector2(float2 High, float2 Low)
{
	FDFVector2 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector2 DFPromote(FDFVector2 Value) { return Value; }
FDFVector2 DFPromote(float2 Value) { return MakeDFVector2(Value, (float2)0); }
float2 DFDemote(FDFVector2 Value) { return Value.High + Value.Low; }
float2 DFDemote(float2 Value) { return Value; }
FDFVector2 DFNegate(FDFVector2 Value)
{
	return MakeDFVector2(-Value.High, -Value.Low);
}
FDFVector2 DFTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 Q =   MakePrecise( ( S ) - ( V ) );
	const float2 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float2 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float2 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector2(S, Y);
}
FDFVector2 DFFastTwoSum(float2 Lhs, float2 Rhs)
{
	const float2 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float2 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float2 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector2(S, E);
}
FDFVector2 DFAdd(float2 Lhs, float2 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector2 DFAdd(FDFVector2 Lhs, FDFVector2 Rhs)
{
	FDFVector2 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector2 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector2 DFAdd(FDFVector2 Lhs, float2 Rhs)
{
	const FDFVector2 S = DFTwoSum(Lhs.High, Rhs);
	const float2 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector2 DFAdd(float2 Lhs, FDFVector2 Rhs) { return DFAdd(Rhs, Lhs); }
FDFVector2 DFSubtract(float2 Lhs, float2 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector2 DFSubtract(FDFVector2 Lhs, FDFVector2 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector2 DFSubtract(FDFVector2 Lhs, float2 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector2 DFSubtract(float2 Lhs, FDFVector2 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float2 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(FDFVector2 Lhs, float2 Rhs)
{
	const float2 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float2 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float2 DFFastLocalSubtractDemote(float2 Lhs, FDFVector2 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector2 DFTwoProduct(float2 Lhs, float2 Rhs)
{
	const float2 P = Lhs * Rhs;
	const float2 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector2(P, E);
}
FDFVector2 DFMultiply(float2 Lhs, float2 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector2 DFMultiply(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const FDFVector2 P = DFTwoProduct(Lhs.High, Rhs.High);
	float2 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(FDFVector2 Lhs, float2 Rhs)
{
	FDFVector2 P = DFTwoProduct(Lhs.High, Rhs);
	float2 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector2 DFMultiply(float2 Lhs, FDFVector2 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs);
FDFVector2 DFDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float2 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float2)1 ) ) );
	const float2 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector2 E = DFFastTwoSum(Rh, Rl);
	const FDFVector2 D = DFMultiply(E, Th);
	const FDFVector2 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector2 DFDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 P = DFTwoProduct(Th, Rhs);
	const float2 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float2 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float2 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFDivide(float2 Lhs, float2 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector2 DFDivide(float2 Lhs, FDFVector2 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, FDFVector2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector2 R = DFMultiply(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(FDFVector2 Lhs, float2 Rhs)
{
	const float2 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector2 R = DFTwoProduct(Rhs, Th);
	const float2 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float2 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float2 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float2 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector2 DFFastDivide(float2 Lhs, FDFVector2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFFastDivide(float2 Lhs, float2 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector2 DFDivideByPow2(FDFVector2 Lhs, float2 Rhs)
{
	return MakeDFVector2(Lhs.High / Rhs, Lhs.Low / Rhs);
}
float2 DFFracDemote(FDFVector2 V)
{
	return frac(frac(V.High) + frac(V.Low));
}
float2 DFFmodByPow2Demote(FDFVector2 Lhs, float2 Rhs)
{
	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;
}
FDFVector2 DFBroadcast2(FDFScalar V)
{
	const float2 High = V.High;
	const float2 Low = V.Low;
	return MakeDFVector2(High, Low);
}
float2 DFBroadcast2(float V)
{
	const float2 Single = V;
	return Single;
}
FDFVector2  DFAdd (FDFScalar Lhs, FDFVector2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (float Lhs, FDFVector2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (FDFScalar Lhs, float2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (float Lhs, float2 Rhs) { return DFAdd (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFAdd (FDFVector2 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (FDFVector2 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (float2 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFAdd (float2 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (FDFScalar Lhs, FDFVector2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (float Lhs, FDFVector2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (FDFScalar Lhs, float2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (float Lhs, float2 Rhs) { return DFSubtract (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFSubtract (FDFVector2 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (FDFVector2 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (float2 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFSubtract (float2 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFScalar Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, FDFVector2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFScalar Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (float Lhs, float2 Rhs) { return DFMultiply (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFMultiply (FDFVector2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (FDFVector2 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFMultiply (float2 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (float Lhs, FDFVector2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (FDFScalar Lhs, float2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (float Lhs, float2 Rhs) { return DFDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (FDFVector2 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (float2 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFDivide (float2 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFScalar Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, FDFVector2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFScalar Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (float Lhs, float2 Rhs) { return DFFastDivide (DFBroadcast2(Lhs), Rhs); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (FDFVector2 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2  DFFastDivide (float2 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast2(Rhs)); }
FDFVector2 DFDivideByPow2(FDFVector2 Lhs, float Rhs)
{
	float2 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}
struct FDFVector3;
FDFVector3 DFBroadcast3(FDFScalar V);
float3 DFBroadcast3(float V);
FDFScalar DFGetComponent(FDFVector3 V, int C);
FDFVector3 DFNegate(FDFVector3 In);
FDFVector3 DFAdd (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFAdd (FDFVector3 Lhs, float Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFSubtract (FDFVector3 Lhs, float Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFMultiply (FDFVector3 Lhs, float Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, float3 Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, FDFScalar Rhs);
FDFVector3 DFDivide (FDFVector3 Lhs, float Rhs);
float3 DFDemote(FDFVector3 In);
struct FDFVector3
{
	float3 High;
	float3 Low;
	float3 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector3 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector3 MakeDFVector3(float3 High, float3 Low)
{
	FDFVector3 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector3 DFPromote(FDFVector3 Value) { return Value; }
FDFVector3 DFPromote(float3 Value) { return MakeDFVector3(Value, (float3)0); }
float3 DFDemote(FDFVector3 Value) { return Value.High + Value.Low; }
float3 DFDemote(float3 Value) { return Value; }
FDFVector3 DFNegate(FDFVector3 Value)
{
	return MakeDFVector3(-Value.High, -Value.Low);
}
FDFVector3 DFTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 Q =   MakePrecise( ( S ) - ( V ) );
	const float3 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float3 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float3 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector3(S, Y);
}
FDFVector3 DFFastTwoSum(float3 Lhs, float3 Rhs)
{
	const float3 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float3 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float3 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector3(S, E);
}
FDFVector3 DFAdd(float3 Lhs, float3 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector3 DFAdd(FDFVector3 Lhs, FDFVector3 Rhs)
{
	FDFVector3 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector3 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector3 DFAdd(FDFVector3 Lhs, float3 Rhs)
{
	const FDFVector3 S = DFTwoSum(Lhs.High, Rhs);
	const float3 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector3 DFAdd(float3 Lhs, FDFVector3 Rhs) { return DFAdd(Rhs, Lhs); }
FDFVector3 DFSubtract(float3 Lhs, float3 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector3 DFSubtract(FDFVector3 Lhs, FDFVector3 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector3 DFSubtract(FDFVector3 Lhs, float3 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector3 DFSubtract(float3 Lhs, FDFVector3 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float3 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(FDFVector3 Lhs, float3 Rhs)
{
	const float3 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float3 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float3 DFFastLocalSubtractDemote(float3 Lhs, FDFVector3 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector3 DFTwoProduct(float3 Lhs, float3 Rhs)
{
	const float3 P = Lhs * Rhs;
	const float3 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector3(P, E);
}
FDFVector3 DFMultiply(float3 Lhs, float3 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector3 DFMultiply(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const FDFVector3 P = DFTwoProduct(Lhs.High, Rhs.High);
	float3 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(FDFVector3 Lhs, float3 Rhs)
{
	FDFVector3 P = DFTwoProduct(Lhs.High, Rhs);
	float3 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector3 DFMultiply(float3 Lhs, FDFVector3 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs);
FDFVector3 DFDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float3 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float3)1 ) ) );
	const float3 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector3 E = DFFastTwoSum(Rh, Rl);
	const FDFVector3 D = DFMultiply(E, Th);
	const FDFVector3 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector3 DFDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 P = DFTwoProduct(Th, Rhs);
	const float3 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float3 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float3 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFDivide(float3 Lhs, float3 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector3 DFDivide(float3 Lhs, FDFVector3 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, FDFVector3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector3 R = DFMultiply(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(FDFVector3 Lhs, float3 Rhs)
{
	const float3 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector3 R = DFTwoProduct(Rhs, Th);
	const float3 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float3 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float3 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float3 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector3 DFFastDivide(float3 Lhs, FDFVector3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFFastDivide(float3 Lhs, float3 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector3 DFDivideByPow2(FDFVector3 Lhs, float3 Rhs)
{
	return MakeDFVector3(Lhs.High / Rhs, Lhs.Low / Rhs);
}
float3 DFFracDemote(FDFVector3 V)
{
	return frac(frac(V.High) + frac(V.Low));
}
float3 DFFmodByPow2Demote(FDFVector3 Lhs, float3 Rhs)
{
	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;
}
FDFVector3 DFBroadcast3(FDFScalar V)
{
	const float3 High = V.High;
	const float3 Low = V.Low;
	return MakeDFVector3(High, Low);
}
float3 DFBroadcast3(float V)
{
	const float3 Single = V;
	return Single;
}
FDFVector3  DFAdd (FDFScalar Lhs, FDFVector3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (float Lhs, FDFVector3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (FDFScalar Lhs, float3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (float Lhs, float3 Rhs) { return DFAdd (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFAdd (FDFVector3 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (FDFVector3 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (float3 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFAdd (float3 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (FDFScalar Lhs, FDFVector3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (float Lhs, FDFVector3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (FDFScalar Lhs, float3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (float Lhs, float3 Rhs) { return DFSubtract (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFSubtract (FDFVector3 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (FDFVector3 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (float3 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFSubtract (float3 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFScalar Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, FDFVector3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFScalar Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (float Lhs, float3 Rhs) { return DFMultiply (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFMultiply (FDFVector3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (FDFVector3 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFMultiply (float3 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (float Lhs, FDFVector3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (FDFScalar Lhs, float3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (float Lhs, float3 Rhs) { return DFDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (FDFVector3 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (float3 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFDivide (float3 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFScalar Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, FDFVector3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFScalar Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (float Lhs, float3 Rhs) { return DFFastDivide (DFBroadcast3(Lhs), Rhs); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (FDFVector3 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3  DFFastDivide (float3 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast3(Rhs)); }
FDFVector3 DFDivideByPow2(FDFVector3 Lhs, float Rhs)
{
	float3 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}
struct FDFVector4;
FDFVector4 DFBroadcast4(FDFScalar V);
float4 DFBroadcast4(float V);
FDFScalar DFGetComponent(FDFVector4 V, int C);
FDFVector4 DFNegate(FDFVector4 In);
FDFVector4 DFAdd (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFAdd (FDFVector4 Lhs, float Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFSubtract (FDFVector4 Lhs, float Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFMultiply (FDFVector4 Lhs, float Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, float4 Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, FDFScalar Rhs);
FDFVector4 DFDivide (FDFVector4 Lhs, float Rhs);
float4 DFDemote(FDFVector4 In);
struct FDFVector4
{
	float4 High;
	float4 Low;
	float4 Demote() { return DFDemote(this); }
};
FDFScalar DFGetComponent(FDFVector4 V, int C) { return MakeDFScalar(V.High[C], V.Low[C]); }
FDFVector4 MakeDFVector4(float4 High, float4 Low)
{
	FDFVector4 Result;
	Result.High = High;
	Result.Low = Low;
	return Result;
}
FDFVector4 DFPromote(FDFVector4 Value) { return Value; }
FDFVector4 DFPromote(float4 Value) { return MakeDFVector4(Value, (float4)0); }
float4 DFDemote(FDFVector4 Value) { return Value.High + Value.Low; }
float4 DFDemote(float4 Value) { return Value; }
FDFVector4 DFNegate(FDFVector4 Value)
{
	return MakeDFVector4(-Value.High, -Value.Low);
}
FDFVector4 DFTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 V =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 Q =   MakePrecise( ( S ) - ( V ) );
	const float4 R =   MakePrecise( ( Lhs ) - ( Q ) );
	const float4 T =   MakePrecise( ( Rhs ) - ( V ) );
	const float4 Y =   MakePrecise( ( R ) + ( T ) );
	return MakeDFVector4(S, Y);
}
FDFVector4 DFFastTwoSum(float4 Lhs, float4 Rhs)
{
	const float4 S =   MakePrecise( ( Lhs ) + ( Rhs ) );
	const float4 T =   MakePrecise( ( S ) - ( Lhs ) );
	const float4 E =   MakePrecise( ( Rhs ) - ( T ) );
	return MakeDFVector4(S, E);
}
FDFVector4 DFAdd(float4 Lhs, float4 Rhs) { return DFTwoSum(Lhs, Rhs); }
FDFVector4 DFAdd(FDFVector4 Lhs, FDFVector4 Rhs)
{
	FDFVector4 S = DFTwoSum(Lhs.High, Rhs.High);
	const FDFVector4 T = DFTwoSum(Lhs.Low, Rhs.Low);
	S.Low += T.High;
	S = DFFastTwoSum(S.High, S.Low);
	S.Low += T.Low;
	S = DFFastTwoSum(S.High, S.Low);
	return S;
}
FDFVector4 DFAdd(FDFVector4 Lhs, float4 Rhs)
{
	const FDFVector4 S = DFTwoSum(Lhs.High, Rhs);
	const float4 T = Lhs.Low + S.Low;
	return DFFastTwoSum(S.High, T);
}
FDFVector4 DFAdd(float4 Lhs, FDFVector4 Rhs) { return DFAdd(Rhs, Lhs); }
FDFVector4 DFSubtract(float4 Lhs, float4 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector4 DFSubtract(FDFVector4 Lhs, FDFVector4 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
FDFVector4 DFSubtract(FDFVector4 Lhs, float4 Rhs) { return DFAdd(Lhs, -Rhs); }
FDFVector4 DFSubtract(float4 Lhs, FDFVector4 Rhs) { return DFAdd(Lhs, DFNegate(Rhs)); }
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs.High ) );
	const float4 Low =   MakePrecise( ( Lhs.Low ) - ( Rhs.Low ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(FDFVector4 Lhs, float4 Rhs)
{
	const float4 High =   MakePrecise( ( Lhs.High ) - ( Rhs ) );
	const float4 Sum =   MakePrecise( ( High ) + ( Lhs.Low ) );
	return Sum;
}
float4 DFFastLocalSubtractDemote(float4 Lhs, FDFVector4 Rhs)
{
	return DFFastLocalSubtractDemote(DFPromote(Lhs), Rhs);
}
FDFVector4 DFTwoProduct(float4 Lhs, float4 Rhs)
{
	const float4 P = Lhs * Rhs;
	const float4 E =   MakePrecise(  mad( ( Lhs ) , ( Rhs ) , ( -P ) ) );
	return MakeDFVector4(P, E);
}
FDFVector4 DFMultiply(float4 Lhs, float4 Rhs) { return DFTwoProduct(Lhs, Rhs); }
FDFVector4 DFMultiply(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const FDFVector4 P = DFTwoProduct(Lhs.High, Rhs.High);
	float4 T =   MakePrecise( ( Lhs.High ) * ( Rhs.Low ) );
	T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs.High ) , ( T ) ) );
	T =   MakePrecise( ( T ) + ( P.Low ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(FDFVector4 Lhs, float4 Rhs)
{
	FDFVector4 P = DFTwoProduct(Lhs.High, Rhs);
	float4 T =   MakePrecise(  mad( ( Lhs.Low ) , ( Rhs ) , ( P.Low ) ) );
	return DFFastTwoSum(P.High, T);
}
FDFVector4 DFMultiply(float4 Lhs, FDFVector4 Rhs) { return DFMultiply(Rhs, Lhs); }
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs);
FDFVector4 DFDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( 1.0 ) / ( Rhs.High ) );
	const float4 Rh =   MakePrecise(  mad( ( -Rhs.High ) , ( Th ) , ( (float4)1 ) ) );
	const float4 Rl =   MakePrecise( ( -Rhs.Low ) * ( Th ) );
	const FDFVector4 E = DFFastTwoSum(Rh, Rl);
	const FDFVector4 D = DFMultiply(E, Th);
	const FDFVector4 M = DFAdd(D, Th);
	return DFMultiply(Lhs, M);
}
FDFVector4 DFDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 P = DFTwoProduct(Th, Rhs);
	const float4 Dh =   MakePrecise( ( Lhs.High ) - ( P.High ) );
	const float4 Dt =   MakePrecise( ( Dh ) - ( P.Low ) );
	const float4 D =   MakePrecise( ( Dt ) + ( Lhs.Low ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFDivide(float4 Lhs, float4 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector4 DFDivide(float4 Lhs, FDFVector4 Rhs)
{
	return DFDivide(DFPromote(Lhs), Rhs);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, FDFVector4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs.High ) );
	const FDFVector4 R = DFMultiply(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs.High ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(FDFVector4 Lhs, float4 Rhs)
{
	const float4 Th =   MakePrecise( ( Lhs.High ) / ( Rhs ) );
	const FDFVector4 R = DFTwoProduct(Rhs, Th);
	const float4 Ph =   MakePrecise( ( Lhs.High ) - ( R.High ) );
	const float4 Dl =   MakePrecise( ( Lhs.Low ) - ( R.Low ) );
	const float4 D =   MakePrecise( ( Ph ) + ( Dl ) );
	const float4 Tl =   MakePrecise( ( D ) / ( Rhs ) );
	return DFFastTwoSum(Th, Tl);
}
FDFVector4 DFFastDivide(float4 Lhs, FDFVector4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFFastDivide(float4 Lhs, float4 Rhs) { return DFFastDivide(DFPromote(Lhs), Rhs); }
FDFVector4 DFDivideByPow2(FDFVector4 Lhs, float4 Rhs)
{
	return MakeDFVector4(Lhs.High / Rhs, Lhs.Low / Rhs);
}
float4 DFFracDemote(FDFVector4 V)
{
	return frac(frac(V.High) + frac(V.Low));
}
float4 DFFmodByPow2Demote(FDFVector4 Lhs, float4 Rhs)
{
	return DFFracDemote(DFDivideByPow2(Lhs, Rhs)) * Rhs;
}
FDFVector4 DFBroadcast4(FDFScalar V)
{
	const float4 High = V.High;
	const float4 Low = V.Low;
	return MakeDFVector4(High, Low);
}
float4 DFBroadcast4(float V)
{
	const float4 Single = V;
	return Single;
}
FDFVector4  DFAdd (FDFScalar Lhs, FDFVector4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (float Lhs, FDFVector4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (FDFScalar Lhs, float4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (float Lhs, float4 Rhs) { return DFAdd (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFAdd (FDFVector4 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (FDFVector4 Lhs, float Rhs)     { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (float4 Lhs, FDFScalar Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFAdd (float4 Lhs, float Rhs) { return DFAdd (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (FDFScalar Lhs, FDFVector4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (float Lhs, FDFVector4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (FDFScalar Lhs, float4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (float Lhs, float4 Rhs) { return DFSubtract (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFSubtract (FDFVector4 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (FDFVector4 Lhs, float Rhs)     { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (float4 Lhs, FDFScalar Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFSubtract (float4 Lhs, float Rhs) { return DFSubtract (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFScalar Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, FDFVector4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFScalar Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (float Lhs, float4 Rhs) { return DFMultiply (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFMultiply (FDFVector4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (FDFVector4 Lhs, float Rhs)     { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, FDFScalar Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFMultiply (float4 Lhs, float Rhs) { return DFMultiply (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (float Lhs, FDFVector4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (FDFScalar Lhs, float4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (float Lhs, float4 Rhs) { return DFDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (FDFVector4 Lhs, float Rhs)     { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (float4 Lhs, FDFScalar Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFDivide (float4 Lhs, float Rhs) { return DFDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFScalar Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, FDFVector4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFScalar Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (float Lhs, float4 Rhs) { return DFFastDivide (DFBroadcast4(Lhs), Rhs); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (FDFVector4 Lhs, float Rhs)     { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, FDFScalar Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4  DFFastDivide (float4 Lhs, float Rhs) { return DFFastDivide (Lhs, DFBroadcast4(Rhs)); }
FDFVector4 DFDivideByPow2(FDFVector4 Lhs, float Rhs)
{
	float4 RhsVect = Rhs;
	return DFDivideByPow2(Lhs, RhsVect);
}
struct FDFMatrix
{
	float4x4 M;
	float3 PostTranslation; 
};
float4x4 Make4x3Matrix(float4x4 M)
{
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}
FDFMatrix MakeDFMatrix4x3(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}
FDFMatrix MakeDFMatrix(float3 PostTranslation, float4x4 InMatrix)
{
	FDFMatrix Result;
	Result.PostTranslation = PostTranslation;
	Result.M = InMatrix;
	return Result;
}
struct FDFInverseMatrix
{
	float4x4 M;
	float3 PreTranslation; 
};
FDFInverseMatrix MakeDFInverseMatrix(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = InMatrix;
	return Result;
}
FDFInverseMatrix MakeDFInverseMatrix4x3(float3 PreTranslation, float4x4 InMatrix)
{
	FDFInverseMatrix Result;
	Result.PreTranslation = PreTranslation;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}
FDFVector3 DFMultiply(float3 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(float4(Vector, 1), InMatrix.M);
	FDFVector3 V = DFTwoSum(InMatrix.PostTranslation, Result.xyz);
	return V;
}
FDFVector4 DFMultiply(float4 Vector, FDFMatrix InMatrix)
{
	float4 Result = mul(Vector, InMatrix.M);
	FDFVector4 V = DFTwoSum(float4(InMatrix.PostTranslation, 0), Result);
	return V;
}
FDFInverseMatrix DFMultiply(FDFInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 M = mul(Lhs.M, Rhs);
	float3 PreTranslation = Lhs.PreTranslation;
	return MakeDFInverseMatrix(PreTranslation, M);
}
FDFMatrix DFMultiply(float4x4 Lhs, FDFMatrix Rhs)
{
	float4x4 M = mul(Lhs, Rhs.M);
	float3 PostTranslation = Rhs.PostTranslation;
	return MakeDFMatrix(PostTranslation, M);
}
float4x4 MultiplyTranslation(float4x4 M, float3 Translation)
{
	float4x4 Result = M;
	Result[3].xyz += Translation;
	return Result;
}
float4x4 MultiplyTranslation(float3 Translation, float4x4 M)
{
	return mul(MakeTranslationMatrix(Translation), M);
}
float4x4 DFFastMultiplyTranslationDemote(FDFMatrix Lhs, FDFVector3 Rhs)
{
	float3 Translation = DFFastLocalSubtractDemote(Lhs.PostTranslation, DFNegate(Rhs));
	float4x4 Result = MultiplyTranslation(Lhs.M, Translation);
	return Result;
}
float4x4 DFFastMultiplyTranslationDemote(FDFVector3 Lhs, FDFInverseMatrix Rhs)
{
	float3 Translation = DFFastLocalSubtractDemote(Lhs, Rhs.PreTranslation);
	float4x4 Result = MultiplyTranslation(Translation, Rhs.M);
	return Result;
}
float3x3 DFToFloat3x3(FDFMatrix Value)
{
	return (float3x3)Value.M;
}
float3x3 DFToFloat3x3(FDFInverseMatrix Value)
{
	return (float3x3)Value.M;
}
float3 DFMultiplyVector(float3 Vector, FDFMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
float3 DFMultiplyVector(float3 Vector, FDFInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
FDFMatrix DFPromote(FDFMatrix Value) { return Value; }
FDFMatrix  DFPromote(float4x4 Value) { return MakeDFMatrix((float3)0, Value); }
float4x4 DFDemote(FDFMatrix V)
{
	return MultiplyTranslation(V.M, V.PostTranslation);
}
float4x4 DFDemote(float4x4 V)
{
	return V;
}
float4x4 DFDemote(FDFInverseMatrix V)
{
	return MultiplyTranslation(-V.PreTranslation, V.M);
}
float3 DFFastToTranslatedWorld(FDFVector3 WorldPosition, FDFVector3 PreViewTranslation)
{
	return DFFastLocalSubtractDemote(WorldPosition, DFNegate(PreViewTranslation));
}
float3 DFFastToTranslatedWorld(float3 WorldPosition, FDFVector3 PreViewTranslation)
{
	return DFFastLocalSubtractDemote(WorldPosition, DFNegate(PreViewTranslation));
}
float4x4 DFFastToTranslatedWorld(FDFInverseMatrix WorldToLocal, FDFVector3 PreViewTranslation)
{
	return DFFastMultiplyTranslationDemote(DFNegate(PreViewTranslation), WorldToLocal);
}
float4x4 DFFastToTranslatedWorld(FDFMatrix LocalToWorld, FDFVector3 PreViewTranslation)
{
	return DFFastMultiplyTranslationDemote(LocalToWorld, PreViewTranslation);
}
FDFVector3 DFMultiplyLHSAndFastTwoSum(float3 Lhs, float Factor, float3 Rhs)
{
	const float3 S =  MakePrecise(  mad( Lhs , Factor , Rhs ) );
	const float3 E =  MakePrecise( Rhs -  mad( -Lhs , Factor , S ) );
	return MakeDFVector3(S, E);
}
struct FLWCScalar
{
	float Tile;
	float Offset;
};
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};
struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
};
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}
FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }
FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	return Result;
}
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}
float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }
FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }
FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}
float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}
float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtUnscaled(FLWCScalar V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float LWCRsqrtScaled(FLWCScalar V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }
FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtUnscaled(FLWCVector2 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float2 LWCRsqrtScaled(FLWCVector2 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }
FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtUnscaled(FLWCVector3 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float3 LWCRsqrtScaled(FLWCVector3 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }
FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtUnscaled(FLWCVector4 V) { return rsqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }
float4 LWCRsqrtScaled(FLWCVector4 V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }
float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }
FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }
FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }
FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}
FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}
FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}
FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}
FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V), 4.76837158e-07f); }
float LWCNormalize(FLWCScalar V) { return 1.0f; }
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
FLWCScalar DFToTileOffset( FDFScalar In)																								{ float Tile =  MakePrecise( round(In.High / 2097152.00f) ); float Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFToTileOffset( FDFVector2 In)																								{ float2 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float2 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFToTileOffset( FDFVector3 In)																								{ float3 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float3 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFToTileOffset( FDFVector4 In)																								{ float4 Tile =  MakePrecise( round(In.High / 2097152.00f) ); float4 Offset =   MakePrecise( (   MakePrecise(  mad( ( Tile ) , ( -2097152.00f ) , ( In.High ) ) ) ) + ( In.Low ) );																																								return MakeLWCVector4 (Tile, Offset);																						}
FLWCScalar DFFastToTileOffset( FDFScalar In)																							{ float Tile = In.High * (1 / 2097152.00f); float Offset = In.Low; 																																																									return MakeLWCScalar (Tile, Offset);																						}
FLWCVector2 DFFastToTileOffset( FDFVector2 In)																							{ float2 Tile = In.High * (1 / 2097152.00f); float2 Offset = In.Low; 																																																									return MakeLWCVector2 (Tile, Offset);																						}
FLWCVector3 DFFastToTileOffset( FDFVector3 In)																							{ float3 Tile = In.High * (1 / 2097152.00f); float3 Offset = In.Low; 																																																									return MakeLWCVector3 (Tile, Offset);																						}
FLWCVector4 DFFastToTileOffset( FDFVector4 In)																							{ float4 Tile = In.High * (1 / 2097152.00f); float4 Offset = In.Low; 																																																									return MakeLWCVector4 (Tile, Offset);																						}
FLWCMatrix DFToTileOffset(FDFMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PostTranslation, 0));
	float4x4 M = MultiplyTranslation(In.M, PosHigh.Offset);
	float3 Tile = PosHigh.Tile;
	return MakeLWCMatrix(Tile, M);
}
FLWCMatrix DFFastToTileOffset(FDFMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PostTranslation / 2097152.00f;
	return MakeLWCMatrix(Tile, M);
}
FLWCInverseMatrix DFToTileOffset(FDFInverseMatrix In)
{
	FLWCVector3 PosHigh = DFToTileOffset(MakeDFVector3(In.PreTranslation, 0));
	float4x4 M = MultiplyTranslation(-PosHigh.Offset, In.M);
	float3 Tile = PosHigh.Tile;
	return MakeLWCInverseMatrix(Tile, M);
}
FLWCInverseMatrix DFFastToTileOffset(FDFInverseMatrix In)
{
	float4x4 M = In.M;
	float3 Tile = In.PreTranslation / 2097152.00f;
	return MakeLWCInverseMatrix(Tile, M);
}
FDFScalar DFFromTileOffset(FLWCScalar In)
{
	float TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector2 DFFromTileOffset(FLWCVector2 In)
{
	float2 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector3 DFFromTileOffset(FLWCVector3 In)
{
	float3 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFVector4 DFFromTileOffset(FLWCVector4 In)
{
	float4 TileOffset = In.Tile * 2097152.00f;
	return DFFastTwoSum(TileOffset, In.Offset);
}
FDFMatrix DFFromTileOffset(FLWCMatrix In)
{
	float4x4 M = In.M;
	float3 PostTranslation = In.Tile * 2097152.00f;
	return MakeDFMatrix(PostTranslation, M);
}
FDFInverseMatrix DFFromTileOffset(FLWCInverseMatrix In)
{
	float4x4 M = In.M;
	float3 PreTranslation = -In.Tile * 2097152.00f;
	return MakeDFInverseMatrix(PreTranslation, M);
}
float LWCToFloat(FDFScalar Value)   { return DFDemote(Value); }
float2 LWCToFloat(FDFVector2 Value) { return DFDemote(Value); }
float3 LWCToFloat(FDFVector3 Value) { return DFDemote(Value); }
float4 LWCToFloat(FDFVector4 Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFMatrix Value) { return DFDemote(Value); }
float4x4 LWCToFloat(FDFInverseMatrix Value) { return DFDemote(Value); }
struct FViewConstants {
	 float4x4    TranslatedWorldToClip ;
	 float4x4    RelativeWorldToClip ;
	 float4x4    ClipToRelativeWorld ;
	 float4x4    TranslatedWorldToView ;
	 float4x4    ViewToTranslatedWorld ;
	 float4x4    TranslatedWorldToCameraView ;
	 float4x4    CameraViewToTranslatedWorld ;
	 float4x4    ViewToClip ;
	 float4x4    ViewToClipNoAA ;
	 float4x4    ClipToView ;
	 float4x4    ClipToTranslatedWorld ;
	 float4x4    SVPositionToTranslatedWorld ;
	 float4x4    ScreenToRelativeWorld ;
	 float4x4    ScreenToTranslatedWorld ;
	 float4x4    MobileMultiviewShadowTransform ;
	 float3    ViewOriginHigh ;
	 float    Padding972 ;
	 float3    ViewForward ;
	 float    Padding988 ;
	 float3    ViewUp ;
	 float    Padding1004 ;
	 float3    ViewRight ;
	 float    Padding1020 ;
	 float3    HMDViewNoRollUp ;
	 float    Padding1036 ;
	 float3    HMDViewNoRollRight ;
	 float    Padding1052 ;
	 float4    InvDeviceZToWorldZTransform ;
	 float4    ScreenPositionScaleBias ;
	 float3    ViewOriginLow ;
	 float    Padding1100 ;
	 float3    TranslatedWorldCameraOrigin ;
	 float    Padding1116 ;
	 float3    WorldViewOriginHigh ;
	 float    Padding1132 ;
	 float3    WorldViewOriginLow ;
	 float    Padding1148 ;
	 float3    PreViewTranslationHigh ;
	 float    Padding1164 ;
	 float3    PreViewTranslationLow ;
	 float    Padding1180 ;
	 float4x4    PrevViewToClip ;
	 float4x4    PrevClipToView ;
	 float4x4    PrevTranslatedWorldToClip ;
	 float4x4    PrevTranslatedWorldToView ;
	 float4x4    PrevViewToTranslatedWorld ;
	 float4x4    PrevTranslatedWorldToCameraView ;
	 float4x4    PrevCameraViewToTranslatedWorld ;
	 float3    PrevTranslatedWorldCameraOrigin ;
	 float    Padding1644 ;
	 float3    PrevWorldCameraOriginHigh ;
	 float    Padding1660 ;
	 float3    PrevWorldCameraOriginLow ;
	 float    Padding1676 ;
	 float3    PrevWorldViewOriginHigh ;
	 float    Padding1692 ;
	 float3    PrevWorldViewOriginLow ;
	 float    Padding1708 ;
	 float3    PrevPreViewTranslationHigh ;
	 float    Padding1724 ;
	 float3    PrevPreViewTranslationLow ;
	 float    Padding1740 ;
	 float3    ViewTilePosition ;
	 float    Padding1756 ;
	 float3    RelativeWorldCameraOriginTO ;
	 float    Padding1772 ;
	 float3    RelativeWorldViewOriginTO ;
	 float    Padding1788 ;
	 float3    RelativePreViewTranslationTO ;
	 float    Padding1804 ;
	 float3    PrevRelativeWorldCameraOriginTO ;
	 float    Padding1820 ;
	 float3    PrevRelativeWorldViewOriginTO ;
	 float    Padding1836 ;
	 float3    RelativePrevPreViewTranslationTO ;
	 float    Padding1852 ;
	 float4x4    PrevClipToRelativeWorld ;
	 float4x4    PrevScreenToTranslatedWorld ;
	 float4x4    ClipToPrevClip ;
	 float4x4    ClipToPrevClipWithAA ;
	 float4    TemporalAAJitter ;
	 float4    GlobalClippingPlane ;
	 float2    FieldOfViewWideAngles ;
	 float2    PrevFieldOfViewWideAngles ;
	 float4    ViewRectMin ;
	 float4    ViewSizeAndInvSize ;
	 uint4    ViewRectMinAndSize ;
	 float4    LightProbeSizeRatioAndInvSizeRatio ;
	 float4    BufferSizeAndInvSize ;
	 float4    BufferBilinearUVMinMax ;
	 float4    ScreenToViewSpace ;
	 float2    BufferToSceneTextureScale ;
	 float2    ResolutionFractionAndInv ;
	 int    NumSceneColorMSAASamples ;
	 float    ProjectionDepthThicknessScale ;
	 float    PreExposure ;
	 float    OneOverPreExposure ;
	 float4    DiffuseOverrideParameter ;
	 float4    SpecularOverrideParameter ;
	 float4    NormalOverrideParameter ;
	 float2    RoughnessOverrideParameter ;
	 float    PrevFrameGameTime ;
	 float    PrevFrameRealTime ;
	 float    OutOfBoundsMask ;
	 float    Padding2372 ;
	 float    Padding2376 ;
	 float    Padding2380 ;
	 float3    WorldCameraMovementSinceLastFrame ;
	 float    CullingSign ;
	 float    NearPlane ;
	 float    GameTime ;
	 float    RealTime ;
	 float    DeltaTime ;
	 float    MaterialTextureMipBias ;
	 float    MaterialTextureDerivativeMultiply ;
	 uint    Random ;
	 uint    FrameNumber ;
	 uint    FrameCounter ;
	 uint    StateFrameIndexMod8 ;
	 uint    StateFrameIndex ;
	 uint    DebugViewModeMask ;
	 uint    WorldIsPaused ;
	 float    CameraCut ;
	 float    UnlitViewmodeMask ;
	 float    Padding2460 ;
	 float4    DirectionalLightColor ;
	 float3    DirectionalLightDirection ;
	 float    Padding2492 ;
	 float4    TranslucencyLightingVolumeMin[2] ;
	 float4    TranslucencyLightingVolumeInvSize[2] ;
	 float4    TemporalAAParams ;
	 float4    CircleDOFParams ;
	 float    DepthOfFieldSensorWidth ;
	 float    DepthOfFieldFocalDistance ;
	 float    DepthOfFieldScale ;
	 float    DepthOfFieldFocalLength ;
	 float    DepthOfFieldFocalRegion ;
	 float    DepthOfFieldNearTransitionRegion ;
	 float    DepthOfFieldFarTransitionRegion ;
	 float    MotionBlurNormalizedToPixel ;
	 float    GeneralPurposeTweak ;
	 float    GeneralPurposeTweak2 ;
	 float    DemosaicVposOffset ;
	 float    DecalDepthBias ;
	 float3    IndirectLightingColorScale ;
	 float    Padding2652 ;
	 float3    PrecomputedIndirectLightingColorScale ;
	 float    Padding2668 ;
	 float3    PrecomputedIndirectSpecularColorScale ;
	 float    Padding2684 ;
	 float4    AtmosphereLightDirection[2] ;
	 float4    AtmosphereLightIlluminanceOnGroundPostTransmittance[2] ;
	 float4    AtmosphereLightIlluminanceOuterSpace[2] ;
	 float4    AtmosphereLightDiscLuminance[2] ;
	 float4    AtmosphereLightDiscCosHalfApexAngle_PPTrans[2] ;
	 float4    SkyViewLutSizeAndInvSize ;
	 float3    SkyCameraTranslatedWorldOrigin ;
	 float    Padding2876 ;
	 float4    SkyPlanetTranslatedWorldCenterAndViewHeight ;
	 float4x4    SkyViewLutReferential ;
	 float4    SkyAtmosphereSkyLuminanceFactor ;
	 float    SkyAtmospherePresentInScene ;
	 float    SkyAtmosphereHeightFogContribution ;
	 float    SkyAtmosphereBottomRadiusKm ;
	 float    SkyAtmosphereTopRadiusKm ;
	 float4    SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize ;
	 float    SkyAtmosphereAerialPerspectiveStartDepthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm ;
	 float    SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv ;
	 float    SkyAtmosphereApplyCameraAerialPerspectiveVolume ;
	 float    Padding3032 ;
	 float    Padding3036 ;
	 float3    NormalCurvatureToRoughnessScaleBias ;
	 float    RenderingReflectionCaptureMask ;
	 float    RealTimeReflectionCapture ;
	 float    RealTimeReflectionCapturePreExposure ;
	 float    Padding3064 ;
	 float    Padding3068 ;
	 float4    AmbientCubemapTint ;
	 float    AmbientCubemapIntensity ;
	 float    SkyLightApplyPrecomputedBentNormalShadowingFlag ;
	 float    SkyLightAffectReflectionFlag ;
	 float    SkyLightAffectGlobalIlluminationFlag ;
	 float4    SkyLightColor ;
	 float    SkyLightVolumetricScatteringIntensity ;
	 float    Padding3124 ;
	 float    Padding3128 ;
	 float    Padding3132 ;
	 float4    MobileSkyIrradianceEnvironmentMap[8] ;
	 float    MobilePreviewMode ;
	 float    HMDEyePaddingOffset ;
	 float    ReflectionCubemapMaxMip ;
	 float    ShowDecalsMask ;
	 uint    DistanceFieldAOSpecularOcclusionMode ;
	 float    IndirectCapsuleSelfShadowingIntensity ;
	 float    Padding3288 ;
	 float    Padding3292 ;
	 float3    ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight ;
	 int    StereoPassIndex ;
	 float4    GlobalVolumeTranslatedCenterAndExtent[6] ;
	 float4    GlobalVolumeTranslatedWorldToUVAddAndMul[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVScale[6] ;
	 float4    GlobalDistanceFieldMipTranslatedWorldToUVBias[6] ;
	 float    GlobalDistanceFieldMipFactor ;
	 float    GlobalDistanceFieldMipTransition ;
	 int    GlobalDistanceFieldClipmapSizeInPages ;
	 int    Padding3708 ;
	 float3    GlobalDistanceFieldInvPageAtlasSize ;
	 float    Padding3724 ;
	 float3    GlobalDistanceFieldInvCoverageAtlasSize ;
	 float    GlobalVolumeDimension ;
	 float    GlobalVolumeTexelSize ;
	 float    MaxGlobalDFAOConeDistance ;
	 uint    NumGlobalSDFClipmaps ;
	 float    CoveredExpandSurfaceScale ;
	 float    NotCoveredExpandSurfaceScale ;
	 float    NotCoveredMinStepScale ;
	 float    DitheredTransparencyStepThreshold ;
	 float    DitheredTransparencyTraceThreshold ;
	 int2    CursorPosition ;
	 float    bCheckerboardSubsurfaceProfileRendering ;
	 float    Padding3788 ;
	 float3    VolumetricFogInvGridSize ;
	 float    Padding3804 ;
	 float3    VolumetricFogGridZParams ;
	 float    Padding3820 ;
	 float2    VolumetricFogSVPosToVolumeUV ;
	 float2    VolumetricFogViewGridUVToPrevViewRectUV ;
	 float2    VolumetricFogPrevViewGridRectUVToResourceUV ;
	 float2    VolumetricFogPrevUVMax ;
	 float2    VolumetricFogPrevUVMaxForTemporalBlend ;
	 float2    VolumetricFogScreenToResourceUV ;
	 float2    VolumetricFogUVMax ;
	 float    VolumetricFogMaxDistance ;
	 float    Padding3884 ;
	 float3    VolumetricLightmapWorldToUVScale ;
	 float    Padding3900 ;
	 float3    VolumetricLightmapWorldToUVAdd ;
	 float    Padding3916 ;
	 float3    VolumetricLightmapIndirectionTextureSize ;
	 float    VolumetricLightmapBrickSize ;
	 float3    VolumetricLightmapBrickTexelSize ;
	 float    IndirectLightingCacheShowFlag ;
	 float    EyeToPixelSpreadAngle ;
	 float    Padding3956 ;
	 float    Padding3960 ;
	 float    Padding3964 ;
	 float4    XRPassthroughCameraUVs[2] ;
	 float    GlobalVirtualTextureMipBias ;
	 uint    VirtualTextureFeedbackShift ;
	 uint    VirtualTextureFeedbackMask ;
	 uint    VirtualTextureFeedbackStride ;
	 uint    VirtualTextureFeedbackJitterOffset ;
	 uint    VirtualTextureFeedbackSampleOffset ;
	 uint    Padding4024 ;
	 uint    Padding4028 ;
	 float4    RuntimeVirtualTextureMipLevel ;
	 float2    RuntimeVirtualTexturePackHeight ;
	 float    Padding4056 ;
	 float    Padding4060 ;
	 float4    RuntimeVirtualTextureDebugParams ;
	 int    FarShadowStaticMeshLODBias ;
	 float    MinRoughness ;
	 float    Padding4088 ;
	 float    Padding4092 ;
	 float4    HairRenderInfo ;
	 uint    EnableSkyLight ;
	 uint    HairRenderInfoBits ;
	 uint    HairComponents ;
	 float    bSubsurfacePostprocessEnabled ;
	 float4    SSProfilesTextureSizeAndInvSize ;
	 float4    SSProfilesPreIntegratedTextureSizeAndInvSize ;
	 float4    SpecularProfileTextureSizeAndInvSize ;
	 float3    PhysicsFieldClipmapCenter ;
	 float    PhysicsFieldClipmapDistance ;
	 int    PhysicsFieldClipmapResolution ;
	 int    PhysicsFieldClipmapExponent ;
	 int    PhysicsFieldClipmapCount ;
	 int    PhysicsFieldTargetCount ;
	 int4    PhysicsFieldTargets[32] ;
	 uint    GPUSceneViewId ;
	 float    ViewResolutionFraction ;
	 float    SubSurfaceColorAsTransmittanceAtDistanceInMeters ;
	 float    Padding4732 ;
	 float4    TanAndInvTanHalfFOV ;
	 float4    PrevTanAndInvTanHalfFOV ;
	 float2    WorldDepthToPixelWorldRadius ;
	 float    Padding4776 ;
	 float    Padding4780 ;
	 float4    ScreenRayLengthMultiplier ;
	 float4    GlintLUTParameters0 ;
	 float4    GlintLUTParameters1 ;
	 int4    EnvironmentComponentsFlags ;
	 uint    BindlessSampler_MaterialTextureBilinearWrapedSampler ;
	 uint    Padding4852 ;
	 uint    BindlessSampler_MaterialTextureBilinearClampedSampler ;
	 uint    Padding4860 ;
	 uint    BindlessSRV_VolumetricLightmapIndirectionTexture ;
	 uint    Padding4868 ;
	 uint    BindlessSRV_VolumetricLightmapBrickAmbientVector ;
	 uint    Padding4876 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients0 ;
	 uint    Padding4884 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients1 ;
	 uint    Padding4892 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients2 ;
	 uint    Padding4900 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients3 ;
	 uint    Padding4908 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients4 ;
	 uint    Padding4916 ;
	 uint    BindlessSRV_VolumetricLightmapBrickSHCoefficients5 ;
	 uint    Padding4924 ;
	 uint    BindlessSRV_SkyBentNormalBrickTexture ;
	 uint    Padding4932 ;
	 uint    BindlessSRV_DirectionalLightShadowingBrickTexture ;
	 uint    Padding4940 ;
	 uint    BindlessSampler_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint    Padding4948 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler0 ;
	 uint    Padding4956 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler1 ;
	 uint    Padding4964 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler2 ;
	 uint    Padding4972 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler3 ;
	 uint    Padding4980 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler4 ;
	 uint    Padding4988 ;
	 uint    BindlessSampler_VolumetricLightmapTextureSampler5 ;
	 uint    Padding4996 ;
	 uint    BindlessSampler_SkyBentNormalTextureSampler ;
	 uint    Padding5004 ;
	 uint    BindlessSampler_DirectionalLightShadowingTextureSampler ;
	 uint    Padding5012 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageAtlasTexture ;
	 uint    Padding5020 ;
	 uint    BindlessSRV_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint    Padding5028 ;
	 uint    BindlessSRV_GlobalDistanceFieldPageTableTexture ;
	 uint    Padding5036 ;
	 uint    BindlessSRV_GlobalDistanceFieldMipTexture ;
	 uint    Padding5044 ;
	 uint    BindlessSampler_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint    Padding5052 ;
	 uint    BindlessSampler_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint    Padding5060 ;
	 uint    BindlessSampler_GlobalDistanceFieldMipTextureSampler ;
	 uint    Padding5068 ;
	 uint    BindlessSRV_AtmosphereTransmittanceTexture ;
	 uint    Padding5076 ;
	 uint    BindlessSampler_AtmosphereTransmittanceTextureSampler ;
	 uint    Padding5084 ;
	 uint    BindlessSRV_AtmosphereIrradianceTexture ;
	 uint    Padding5092 ;
	 uint    BindlessSampler_AtmosphereIrradianceTextureSampler ;
	 uint    Padding5100 ;
	 uint    BindlessSRV_AtmosphereInscatterTexture ;
	 uint    Padding5108 ;
	 uint    BindlessSampler_AtmosphereInscatterTextureSampler ;
	 uint    Padding5116 ;
	 uint    BindlessSRV_PerlinNoiseGradientTexture ;
	 uint    Padding5124 ;
	 uint    BindlessSampler_PerlinNoiseGradientTextureSampler ;
	 uint    Padding5132 ;
	 uint    BindlessSRV_PerlinNoise3DTexture ;
	 uint    Padding5140 ;
	 uint    BindlessSampler_PerlinNoise3DTextureSampler ;
	 uint    Padding5148 ;
	 uint    BindlessSRV_SobolSamplingTexture ;
	 uint    Padding5156 ;
	 uint    BindlessSampler_SharedPointWrappedSampler ;
	 uint    Padding5164 ;
	 uint    BindlessSampler_SharedPointClampedSampler ;
	 uint    Padding5172 ;
	 uint    BindlessSampler_SharedBilinearWrappedSampler ;
	 uint    Padding5180 ;
	 uint    BindlessSampler_SharedBilinearClampedSampler ;
	 uint    Padding5188 ;
	 uint    BindlessSampler_SharedBilinearAnisoClampedSampler ;
	 uint    Padding5196 ;
	 uint    BindlessSampler_SharedTrilinearWrappedSampler ;
	 uint    Padding5204 ;
	 uint    BindlessSampler_SharedTrilinearClampedSampler ;
	 uint    Padding5212 ;
	 uint    BindlessSRV_PreIntegratedBRDF ;
	 uint    Padding5220 ;
	 uint    BindlessSampler_PreIntegratedBRDFSampler ;
	 uint    Padding5228 ;
	 uint    BindlessSRV_SkyIrradianceEnvironmentMap ;
	 uint    Padding5236 ;
	 uint    BindlessSRV_TransmittanceLutTexture ;
	 uint    Padding5244 ;
	 uint    BindlessSampler_TransmittanceLutTextureSampler ;
	 uint    Padding5252 ;
	 uint    BindlessSRV_SkyViewLutTexture ;
	 uint    Padding5260 ;
	 uint    BindlessSampler_SkyViewLutTextureSampler ;
	 uint    Padding5268 ;
	 uint    BindlessSRV_DistantSkyLightLutTexture ;
	 uint    Padding5276 ;
	 uint    BindlessSampler_DistantSkyLightLutTextureSampler ;
	 uint    Padding5284 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolume ;
	 uint    Padding5292 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeSampler ;
	 uint    Padding5300 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeMieOnly ;
	 uint    Padding5308 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint    Padding5316 ;
	 uint    BindlessSRV_CameraAerialPerspectiveVolumeRayOnly ;
	 uint    Padding5324 ;
	 uint    BindlessSampler_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint    Padding5332 ;
	 uint    BindlessSRV_HairScatteringLUTTexture ;
	 uint    Padding5340 ;
	 uint    BindlessSampler_HairScatteringLUTSampler ;
	 uint    Padding5348 ;
	 uint    BindlessSRV_GGXLTCMatTexture ;
	 uint    Padding5356 ;
	 uint    BindlessSampler_GGXLTCMatSampler ;
	 uint    Padding5364 ;
	 uint    BindlessSRV_GGXLTCAmpTexture ;
	 uint    Padding5372 ;
	 uint    BindlessSampler_GGXLTCAmpSampler ;
	 uint    Padding5380 ;
	 uint    BindlessSRV_SheenLTCTexture ;
	 uint    Padding5388 ;
	 uint    BindlessSampler_SheenLTCSampler ;
	 uint    Padding5396 ;
	 uint    bShadingEnergyConservation ;
	 uint    bShadingEnergyPreservation ;
	 uint    BindlessSRV_ShadingEnergyGGXSpecTexture ;
	 uint    Padding5412 ;
	 uint    BindlessSRV_ShadingEnergyGGXGlassTexture ;
	 uint    Padding5420 ;
	 uint    BindlessSRV_ShadingEnergyClothSpecTexture ;
	 uint    Padding5428 ;
	 uint    BindlessSRV_ShadingEnergyDiffuseTexture ;
	 uint    Padding5436 ;
	 uint    BindlessSampler_ShadingEnergySampler ;
	 uint    Padding5444 ;
	 uint    BindlessSRV_GlintTexture ;
	 uint    Padding5452 ;
	 uint    BindlessSampler_GlintSampler ;
	 uint    Padding5460 ;
	 uint    BindlessSRV_SimpleVolumeTexture ;
	 uint    Padding5468 ;
	 uint    BindlessSampler_SimpleVolumeTextureSampler ;
	 uint    Padding5476 ;
	 uint    BindlessSRV_SimpleVolumeEnvTexture ;
	 uint    Padding5484 ;
	 uint    BindlessSampler_SimpleVolumeEnvTextureSampler ;
	 uint    Padding5492 ;
	 uint    BindlessSRV_SSProfilesTexture ;
	 uint    Padding5500 ;
	 uint    BindlessSampler_SSProfilesSampler ;
	 uint    Padding5508 ;
	 uint    BindlessSampler_SSProfilesTransmissionSampler ;
	 uint    Padding5516 ;
	 uint    BindlessSRV_SSProfilesPreIntegratedTexture ;
	 uint    Padding5524 ;
	 uint    BindlessSampler_SSProfilesPreIntegratedSampler ;
	 uint    Padding5532 ;
	 uint    BindlessSRV_SpecularProfileTexture ;
	 uint    Padding5540 ;
	 uint    BindlessSampler_SpecularProfileSampler ;
	 uint    Padding5548 ;
	 uint    BindlessSRV_WaterIndirection ;
	 uint    Padding5556 ;
	 uint    BindlessSRV_WaterData ;
	 uint    Padding5564 ;
	 float4    RectLightAtlasSizeAndInvSize ;
	 float    RectLightAtlasMaxMipLevel ;
	 float    Padding5588 ;
	 uint    BindlessSRV_RectLightAtlasTexture ;
	 uint    Padding5596 ;
	 uint    BindlessSampler_RectLightAtlasSampler ;
	 uint    Padding5604 ;
	 uint    Padding5608 ;
	 uint    Padding5612 ;
	 float4    IESAtlasSizeAndInvSize ;
	 uint    BindlessSRV_IESAtlasTexture ;
	 uint    Padding5636 ;
	 uint    BindlessSampler_IESAtlasSampler ;
	 uint    Padding5644 ;
	 uint    BindlessSampler_LandscapeWeightmapSampler ;
	 uint    Padding5652 ;
	 uint    BindlessSRV_LandscapeIndirection ;
	 uint    Padding5660 ;
	 uint    BindlessSRV_LandscapePerComponentData ;
	 uint    Padding5668 ;
	 uint    BindlessUAV_VTFeedbackBuffer ;
	 uint    Padding5676 ;
	 uint    BindlessSRV_PhysicsFieldClipmapBuffer ;
	 uint    Padding5684 ;
	 uint    Padding5688 ;
	 uint    Padding5692 ;
	 float3    TLASPreViewTranslationHigh ;
	 float    Padding5708 ;
	 float3    TLASPreViewTranslationLow ;
 };
ConstantBuffer<FViewConstants> View;
Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture;
Texture3D  View_DirectionalLightShadowingBrickTexture;
SamplerState  View_SharedBilinearClampedSampler;
struct FPrimitiveConstants {
	 uint    Flags ;
	 uint    InstanceSceneDataOffset ;
	 uint    NumInstanceSceneDataEntries ;
	 int    SingleCaptureIndex ;
	 float3    PositionHigh ;
	 uint    PrimitiveComponentId ;
	 float4x4    LocalToRelativeWorld ;
	 float4x4    RelativeWorldToLocal ;
	 float4x4    PreviousLocalToRelativeWorld ;
	 float4x4    PreviousRelativeWorldToLocal ;
	 float4x4    WorldToPreviousWorld ;
	 float3    InvNonUniformScale ;
	 float    ObjectBoundsX ;
	 float4    ObjectWorldPositionHighAndRadius ;
	 float3    ObjectWorldPositionLow ;
	 float    MinMaterialDisplacement ;
	 float3    ActorWorldPositionHigh ;
	 float    MaxMaterialDisplacement ;
	 float3    ActorWorldPositionLow ;
	 uint    LightmapUVIndex ;
	 float3    ObjectOrientation ;
	 uint    LightmapDataIndex ;
	 float4    NonUniformScale ;
	 float3    PreSkinnedLocalBoundsMin ;
	 uint    NaniteResourceID ;
	 float3    PreSkinnedLocalBoundsMax ;
	 uint    NaniteHierarchyOffset ;
	 float3    LocalObjectBoundsMin ;
	 float    ObjectBoundsY ;
	 float3    LocalObjectBoundsMax ;
	 float    ObjectBoundsZ ;
	 float3    InstanceLocalBoundsCenter ;
	 uint    InstancePayloadDataOffset ;
	 float3    InstanceLocalBoundsExtent ;
	 uint    InstancePayloadDataStride ;
	 uint    InstancePayloadExtensionSize ;
	 uint    Padding564 ;
	 float2    WireframeAndPrimitiveColor ;
	 uint    PackedNaniteFlags ;
	 int    PersistentPrimitiveIndex ;
	 float2    InstanceDrawDistanceMinMaxSquared ;
	 float    InstanceWPODisableDistanceSquared ;
	 uint    NaniteRayTracingDataOffset ;
	 float    MaxWPOExtent ;
	 uint    CustomStencilValueAndMask ;
	 uint    VisibilityFlags ;
	 uint    Padding612 ;
	 uint    Padding616 ;
	 uint    Padding620 ;
	 float4    CustomPrimitiveData[9] ;
 };
ConstantBuffer<FPrimitiveConstants> Primitive;
struct FSceneConstants {
	 uint    BindlessSRV_GPUScene_GPUSceneInstanceSceneData ;
	 uint    Padding4 ;
	 uint    BindlessSRV_GPUScene_GPUSceneInstancePayloadData ;
	 uint    Padding12 ;
	 uint    BindlessSRV_GPUScene_GPUScenePrimitiveSceneData ;
	 uint    Padding20 ;
	 uint    BindlessSRV_GPUScene_GPUSceneLightmapData ;
	 uint    Padding28 ;
	 uint    BindlessSRV_GPUScene_GPUSceneLightData ;
	 uint    Padding36 ;
	 uint    GPUScene_InstanceDataSOAStride ;
	 uint    GPUScene_GPUSceneFrameNumber ;
	 int    GPUScene_NumInstances ;
	 int    GPUScene_NumScenePrimitives ;
	 float    Padding56 ;
	 float    Padding60 ;
	 uint    NaniteMaterials_PrimitiveMaterialElementStride ;
	 uint    Padding68 ;
	 uint    BindlessSRV_NaniteMaterials_PrimitiveMaterialData ;
	 uint    Padding76 ;
	 uint    BindlessSRV_NaniteMaterials_MaterialData ;
	 float    Padding84 ;
	 float    Padding88 ;
	 float    Padding92 ;
	 float2    SplineMesh_SplineTextureInvExtent ;
	 uint    BindlessSRV_SplineMesh_SplinePosTexture ;
	 uint    Padding108 ;
	 uint    BindlessSRV_SplineMesh_SplineRotTexture ;
	 uint    Padding116 ;
	 uint    BindlessSampler_SplineMesh_SplineSampler ;
 };
ConstantBuffer<FSceneConstants> Scene;
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstanceSceneData;
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstancePayloadData;
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;
struct FOpaqueBasePassConstants {
	 uint    Shared_Forward_NumLocalLights ;
	 uint    Shared_Forward_NumReflectionCaptures ;
	 uint    Shared_Forward_HasDirectionalLight ;
	 uint    Shared_Forward_NumGridCells ;
	 int3    Shared_Forward_CulledGridSize ;
	 uint    Shared_Forward_MaxCulledLightsPerCell ;
	 uint    Shared_Forward_LightGridPixelSizeShift ;
	 uint    Padding36 ;
	 uint    Padding40 ;
	 uint    Padding44 ;
	 float3    Shared_Forward_LightGridZParams ;
	 float    Padding60 ;
	 float3    Shared_Forward_DirectionalLightDirection ;
	 float    Shared_Forward_DirectionalLightSourceRadius ;
	 float    Shared_Forward_DirectionalLightSoftSourceRadius ;
	 float    Padding84 ;
	 float    Padding88 ;
	 float    Padding92 ;
	 float3    Shared_Forward_DirectionalLightColor ;
	 float    Shared_Forward_DirectionalLightVolumetricScatteringIntensity ;
	 float    Shared_Forward_DirectionalLightSpecularScale ;
	 uint    Shared_Forward_DirectionalLightShadowMapChannelMask ;
	 float2    Shared_Forward_DirectionalLightDistanceFadeMAD ;
	 uint    Shared_Forward_NumDirectionalLightCascades ;
	 int    Shared_Forward_DirectionalLightVSM ;
	 int    Padding136 ;
	 int    Padding140 ;
	 float4    Shared_Forward_CascadeEndDepths ;
	 float4x4    Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4] ;
	 float4    Shared_Forward_DirectionalLightShadowmapMinMax[4] ;
	 float4    Shared_Forward_DirectionalLightShadowmapAtlasBufferSize ;
	 float    Shared_Forward_DirectionalLightDepthBias ;
	 uint    Shared_Forward_DirectionalLightUseStaticShadowing ;
	 uint    Shared_Forward_SimpleLightsEndIndex ;
	 uint    Shared_Forward_ClusteredDeferredSupportedEndIndex ;
	 uint    Shared_Forward_ManyLightsSupportedStartIndex ;
	 uint    Padding516 ;
	 uint    Padding520 ;
	 uint    Padding524 ;
	 float4    Shared_Forward_DirectionalLightStaticShadowBufferSize ;
	 float4x4    Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow ;
	 uint    Shared_Forward_DirectLightingShowFlag ;
	 uint    Shared_Forward_LightFunctionAtlasLightIndex ;
	 float    Padding616 ;
	 float    Padding620 ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength ;
	 int    Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount ;
	 int    Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope ;
	 float    Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias ;
	 uint    Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount ;
	 uint    Padding660 ;
	 uint    Padding664 ;
	 uint    Padding668 ;
	 uint    BindlessSRV_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint    Padding676 ;
	 uint    BindlessSampler_Shared_Forward_ShadowmapSampler ;
	 uint    Padding684 ;
	 uint    BindlessSRV_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint    Padding692 ;
	 uint    BindlessSampler_Shared_Forward_StaticShadowmapSampler ;
	 uint    Padding700 ;
	 uint    BindlessSRV_Shared_Forward_ForwardLocalLightBuffer ;
	 uint    Padding708 ;
	 uint    BindlessSRV_Shared_Forward_NumCulledLightsGrid ;
	 uint    Padding716 ;
	 uint    BindlessSRV_Shared_Forward_CulledLightDataGrid32Bit ;
	 uint    Padding724 ;
	 uint    BindlessSRV_Shared_Forward_CulledLightDataGrid16Bit ;
	 float    Padding732 ;
	 uint    Shared_ForwardISR_NumLocalLights ;
	 uint    Shared_ForwardISR_NumReflectionCaptures ;
	 uint    Shared_ForwardISR_HasDirectionalLight ;
	 uint    Shared_ForwardISR_NumGridCells ;
	 int3    Shared_ForwardISR_CulledGridSize ;
	 uint    Shared_ForwardISR_MaxCulledLightsPerCell ;
	 uint    Shared_ForwardISR_LightGridPixelSizeShift ;
	 uint    Padding772 ;
	 uint    Padding776 ;
	 uint    Padding780 ;
	 float3    Shared_ForwardISR_LightGridZParams ;
	 float    Padding796 ;
	 float3    Shared_ForwardISR_DirectionalLightDirection ;
	 float    Shared_ForwardISR_DirectionalLightSourceRadius ;
	 float    Shared_ForwardISR_DirectionalLightSoftSourceRadius ;
	 float    Padding820 ;
	 float    Padding824 ;
	 float    Padding828 ;
	 float3    Shared_ForwardISR_DirectionalLightColor ;
	 float    Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity ;
	 float    Shared_ForwardISR_DirectionalLightSpecularScale ;
	 uint    Shared_ForwardISR_DirectionalLightShadowMapChannelMask ;
	 float2    Shared_ForwardISR_DirectionalLightDistanceFadeMAD ;
	 uint    Shared_ForwardISR_NumDirectionalLightCascades ;
	 int    Shared_ForwardISR_DirectionalLightVSM ;
	 int    Padding872 ;
	 int    Padding876 ;
	 float4    Shared_ForwardISR_CascadeEndDepths ;
	 float4x4    Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4] ;
	 float4    Shared_ForwardISR_DirectionalLightShadowmapMinMax[4] ;
	 float4    Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize ;
	 float    Shared_ForwardISR_DirectionalLightDepthBias ;
	 uint    Shared_ForwardISR_DirectionalLightUseStaticShadowing ;
	 uint    Shared_ForwardISR_SimpleLightsEndIndex ;
	 uint    Shared_ForwardISR_ClusteredDeferredSupportedEndIndex ;
	 uint    Shared_ForwardISR_ManyLightsSupportedStartIndex ;
	 uint    Padding1252 ;
	 uint    Padding1256 ;
	 uint    Padding1260 ;
	 float4    Shared_ForwardISR_DirectionalLightStaticShadowBufferSize ;
	 float4x4    Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow ;
	 uint    Shared_ForwardISR_DirectLightingShowFlag ;
	 uint    Shared_ForwardISR_LightFunctionAtlasLightIndex ;
	 float    Padding1352 ;
	 float    Padding1356 ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength ;
	 int    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount ;
	 int    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope ;
	 float    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias ;
	 uint    Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount ;
	 uint    Padding1396 ;
	 uint    Padding1400 ;
	 uint    Padding1404 ;
	 uint    BindlessSRV_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint    Padding1412 ;
	 uint    BindlessSampler_Shared_ForwardISR_ShadowmapSampler ;
	 uint    Padding1420 ;
	 uint    BindlessSRV_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint    Padding1428 ;
	 uint    BindlessSampler_Shared_ForwardISR_StaticShadowmapSampler ;
	 uint    Padding1436 ;
	 uint    BindlessSRV_Shared_ForwardISR_ForwardLocalLightBuffer ;
	 uint    Padding1444 ;
	 uint    BindlessSRV_Shared_ForwardISR_NumCulledLightsGrid ;
	 uint    Padding1452 ;
	 uint    BindlessSRV_Shared_ForwardISR_CulledLightDataGrid32Bit ;
	 uint    Padding1460 ;
	 uint    BindlessSRV_Shared_ForwardISR_CulledLightDataGrid16Bit ;
	 float    Padding1468 ;
	 float4    Shared_Reflection_SkyLightParameters ;
	 uint    BindlessSRV_Shared_Reflection_SkyLightCubemap ;
	 uint    Padding1492 ;
	 uint    BindlessSampler_Shared_Reflection_SkyLightCubemapSampler ;
	 uint    Padding1500 ;
	 uint    BindlessSRV_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint    Padding1508 ;
	 uint    BindlessSampler_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint    Padding1516 ;
	 uint    BindlessSRV_Shared_Reflection_ReflectionCubemap ;
	 uint    Padding1524 ;
	 uint    BindlessSampler_Shared_Reflection_ReflectionCubemapSampler ;
	 uint    Padding1532 ;
	 uint    BindlessSRV_Shared_Reflection_PreIntegratedGF ;
	 uint    Padding1540 ;
	 uint    BindlessSampler_Shared_Reflection_PreIntegratedGFSampler ;
	 float    Padding1548 ;
	 float4    Shared_PlanarReflection_ReflectionPlane ;
	 float4    Shared_PlanarReflection_PlanarReflectionOrigin ;
	 float4    Shared_PlanarReflection_PlanarReflectionXAxis ;
	 float4    Shared_PlanarReflection_PlanarReflectionYAxis ;
	 float3x4    Shared_PlanarReflection_InverseTransposeMirrorMatrix ;
	 float3    Shared_PlanarReflection_PlanarReflectionParameters ;
	 float    Padding1676 ;
	 float2    Shared_PlanarReflection_PlanarReflectionParameters2 ;
	 float    Padding1688 ;
	 float    Padding1692 ;
	 float4x4    Shared_PlanarReflection_ProjectionWithExtraFOV[2] ;
	 float4    Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2] ;
	 float2    Shared_PlanarReflection_PlanarReflectionScreenBound ;
	 uint    Shared_PlanarReflection_bIsStereo ;
	 uint    Padding1868 ;
	 uint    BindlessSRV_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint    Padding1876 ;
	 uint    BindlessSampler_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float    Padding1884 ;
	 float4    Shared_Fog_ExponentialFogParameters ;
	 float4    Shared_Fog_ExponentialFogParameters2 ;
	 float4    Shared_Fog_ExponentialFogColorParameter ;
	 float4    Shared_Fog_ExponentialFogParameters3 ;
	 float4    Shared_Fog_SkyAtmosphereAmbientContributionColorScale ;
	 float4    Shared_Fog_InscatteringLightDirection ;
	 float4    Shared_Fog_DirectionalInscatteringColor ;
	 float2    Shared_Fog_SinCosInscatteringColorCubemapRotation ;
	 float    Padding2008 ;
	 float    Padding2012 ;
	 float3    Shared_Fog_FogInscatteringTextureParameters ;
	 float    Shared_Fog_ApplyVolumetricFog ;
	 float    Shared_Fog_VolumetricFogStartDistance ;
	 float    Shared_Fog_VolumetricFogNearFadeInDistanceInv ;
	 uint    BindlessSRV_Shared_Fog_FogInscatteringColorCubemap ;
	 uint    Padding2044 ;
	 uint    BindlessSampler_Shared_Fog_FogInscatteringColorSampler ;
	 uint    Padding2052 ;
	 uint    BindlessSRV_Shared_Fog_IntegratedLightScattering ;
	 uint    Padding2060 ;
	 uint    BindlessSampler_Shared_Fog_IntegratedLightScatteringSampler ;
	 float    Padding2068 ;
	 float    Padding2072 ;
	 float    Padding2076 ;
	 float4    Shared_FogISR_ExponentialFogParameters ;
	 float4    Shared_FogISR_ExponentialFogParameters2 ;
	 float4    Shared_FogISR_ExponentialFogColorParameter ;
	 float4    Shared_FogISR_ExponentialFogParameters3 ;
	 float4    Shared_FogISR_SkyAtmosphereAmbientContributionColorScale ;
	 float4    Shared_FogISR_InscatteringLightDirection ;
	 float4    Shared_FogISR_DirectionalInscatteringColor ;
	 float2    Shared_FogISR_SinCosInscatteringColorCubemapRotation ;
	 float    Padding2200 ;
	 float    Padding2204 ;
	 float3    Shared_FogISR_FogInscatteringTextureParameters ;
	 float    Shared_FogISR_ApplyVolumetricFog ;
	 float    Shared_FogISR_VolumetricFogStartDistance ;
	 float    Shared_FogISR_VolumetricFogNearFadeInDistanceInv ;
	 uint    BindlessSRV_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint    Padding2236 ;
	 uint    BindlessSampler_Shared_FogISR_FogInscatteringColorSampler ;
	 uint    Padding2244 ;
	 uint    BindlessSRV_Shared_FogISR_IntegratedLightScattering ;
	 uint    Padding2252 ;
	 uint    BindlessSampler_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float    Padding2260 ;
	 float    Padding2264 ;
	 float    Padding2268 ;
	 uint    BindlessSRV_Shared_LFV_LocalFogVolumeInstances ;
	 uint    Padding2276 ;
	 uint2    Shared_LFV_LocalFogVolumeTileDataTextureResolution ;
	 uint    Shared_LFV_LocalFogVolumeInstanceCount ;
	 uint    Shared_LFV_LocalFogVolumeTilePixelSize ;
	 float    Shared_LFV_LocalFogVolumeMaxDensityIntoVolumetricFog ;
	 uint    Shared_LFV_ShouldRenderLocalFogVolumeInVolumetricFog ;
	 float    Shared_LFV_GlobalStartDistance ;
	 float    Padding2308 ;
	 float    Padding2312 ;
	 float    Padding2316 ;
	 float4    Shared_LFV_HalfResTextureSizeAndInvSize ;
	 float3    Shared_LFV_DirectionalLightColor ;
	 float    Padding2348 ;
	 float3    Shared_LFV_DirectionalLightDirection ;
	 float    Padding2364 ;
	 uint    BindlessSRV_Shared_LFV_LocalFogVolumeTileDataTexture ;
	 float    Padding2372 ;
	 float    Padding2376 ;
	 float    Padding2380 ;
	 uint    BindlessSRV_Shared_LightFunctionAtlas_LightFunctionAtlasTexture ;
	 uint    Padding2388 ;
	 uint    BindlessSRV_Shared_LightFunctionAtlas_LightInfoDataBuffer ;
	 uint    Padding2396 ;
	 uint    BindlessSampler_Shared_LightFunctionAtlas_LightFunctionAtlasSampler ;
	 uint    Padding2404 ;
	 float    Shared_LightFunctionAtlas_Slot_UVSize ;
	 float    Padding2412 ;
	 uint    Shared_UseBasePassSkylight ;
	 float    Padding2420 ;
	 float    Padding2424 ;
	 float    Padding2428 ;
	 uint    Substrate_MaxBytesPerPixel ;
	 uint    Substrate_MaxClosurePerPixel ;
	 uint    Substrate_bRoughDiffuse ;
	 uint    Substrate_PeelLayersAboveDepth ;
	 uint    Substrate_bRoughnessTracking ;
	 float    Padding2452 ;
	 float    Padding2456 ;
	 float    Padding2460 ;
	 int    Substrate_SliceStoringDebugSubstrateTreeDataWithoutMRT ;
	 int    Substrate_FirstSliceStoringSubstrateSSSDataWithoutMRT ;
	 uint    BindlessUAV_Substrate_MaterialTextureArrayUAVWithoutRTs ;
	 uint    Padding2476 ;
	 uint    BindlessUAV_Substrate_OpaqueRoughRefractionTextureUAV ;
	 float    Padding2484 ;
	 float    Padding2488 ;
	 float    Padding2492 ;
	 int    UseForwardScreenSpaceShadowMask ;
	 int    Padding2500 ;
	 uint    BindlessSRV_ForwardScreenSpaceShadowMaskTexture ;
	 uint    Padding2508 ;
	 uint    BindlessSRV_IndirectOcclusionTexture ;
	 uint    Padding2516 ;
	 uint    BindlessSRV_ResolvedSceneDepthTexture ;
	 float    Padding2524 ;
	 uint    BindlessSRV_DBufferATexture ;
	 uint    Padding2532 ;
	 uint    BindlessSRV_DBufferBTexture ;
	 uint    Padding2540 ;
	 uint    BindlessSRV_DBufferCTexture ;
	 uint    Padding2548 ;
	 uint    BindlessSRV_DBufferRenderMask ;
	 uint    Padding2556 ;
	 uint    BindlessSampler_DBufferATextureSampler ;
	 uint    Padding2564 ;
	 uint    BindlessSampler_DBufferBTextureSampler ;
	 uint    Padding2572 ;
	 uint    BindlessSampler_DBufferCTextureSampler ;
	 uint    Padding2580 ;
	 uint    Padding2584 ;
	 uint    Padding2588 ;
	 uint    BindlessSRV_PreIntegratedGFTexture ;
	 uint    Padding2596 ;
	 uint    BindlessSampler_PreIntegratedGFSampler ;
	 uint    Padding2604 ;
	 int    Is24BitUnormDepthStencil ;
	 int    Padding2612 ;
	 uint    BindlessSRV_EyeAdaptationBuffer ;
 };
ConstantBuffer<FOpaqueBasePassConstants> OpaqueBasePass;
Texture2D  OpaqueBasePass_DBufferATexture;
Texture2D  OpaqueBasePass_DBufferBTexture;
Texture2D  OpaqueBasePass_DBufferCTexture;
SamplerState  OpaqueBasePass_DBufferATextureSampler;
struct FNaniteConstants {
	 int4    PageConstants ;
	 int4    MaterialConfig ;
	 uint    MaxNodes ;
	 uint    MaxVisibleClusters ;
	 uint    RenderFlags ;
	 float    RayTracingCutError ;
	 float4    RectScaleOffset ;
	 uint    BindlessSRV_ClusterPageData ;
	 uint    Padding68 ;
	 uint    BindlessSRV_VisibleClustersSWHW ;
	 uint    Padding76 ;
	 uint    BindlessSRV_HierarchyBuffer ;
	 uint    Padding84 ;
	 uint    BindlessSRV_MaterialTileRemap ;
	 uint    Padding92 ;
	 uint    BindlessSRV_MaterialDepthTable ;
	 uint    Padding100 ;
	 uint    BindlessSRV_ShadingMask ;
	 uint    Padding108 ;
	 uint    BindlessSRV_VisBuffer64 ;
	 uint    Padding116 ;
	 uint    BindlessSRV_DbgBuffer64 ;
	 uint    Padding124 ;
	 uint    BindlessSRV_DbgBuffer32 ;
	 uint    Padding132 ;
	 uint    BindlessSRV_RayTracingDataBuffer ;
	 uint    Padding140 ;
	 uint    BindlessSRV_ShadingBinData ;
	 uint    Padding148 ;
	 uint    MultiViewEnabled ;
	 uint    Padding156 ;
	 uint    BindlessSRV_MultiViewIndices ;
	 uint    Padding164 ;
	 uint    BindlessSRV_MultiViewRectScaleOffsets ;
	 uint    Padding172 ;
	 uint    BindlessSRV_InViews ;
 };
ConstantBuffer<FNaniteConstants> Nanite;
ByteAddressBuffer  Nanite_ClusterPageData;
ByteAddressBuffer  Nanite_VisibleClustersSWHW;
Texture2D<uint64_t>  Nanite_VisBuffer64;
ByteAddressBuffer  Nanite_ShadingBinData;
struct FMaterialConstants {
	 float4    PreshaderBuffer[9] ;
	 uint    BindlessSRV_Texture2D_0 ;
	 uint    Padding148 ;
	 uint    BindlessSampler_Texture2D_0Sampler ;
	 uint    Padding156 ;
	 uint    BindlessSRV_Texture2D_1 ;
	 uint    Padding164 ;
	 uint    BindlessSampler_Texture2D_1Sampler ;
	 uint    Padding172 ;
	 uint    BindlessSRV_Texture2D_2 ;
	 uint    Padding180 ;
	 uint    BindlessSampler_Texture2D_2Sampler ;
	 uint    Padding188 ;
	 uint    BindlessSRV_Texture2D_3 ;
	 uint    Padding196 ;
	 uint    BindlessSampler_Texture2D_3Sampler ;
	 uint    Padding204 ;
	 uint    BindlessSRV_Texture2D_4 ;
	 uint    Padding212 ;
	 uint    BindlessSampler_Texture2D_4Sampler ;
	 uint    Padding220 ;
	 uint    BindlessSRV_Texture2D_5 ;
	 uint    Padding228 ;
	 uint    BindlessSampler_Texture2D_5Sampler ;
	 uint    Padding236 ;
	 uint    BindlessSRV_Texture2D_6 ;
	 uint    Padding244 ;
	 uint    BindlessSampler_Texture2D_6Sampler ;
	 uint    Padding252 ;
	 uint    BindlessSampler_Wrap_WorldGroupSettings ;
	 uint    Padding260 ;
	 uint    BindlessSampler_Clamp_WorldGroupSettings ;
 };
ConstantBuffer<FMaterialConstants> Material;
Texture2D  Material_Texture2D_0;
SamplerState  Material_Texture2D_0Sampler;
Texture2D  Material_Texture2D_1;
SamplerState  Material_Texture2D_1Sampler;
Texture2D  Material_Texture2D_2;
SamplerState  Material_Texture2D_2Sampler;
Texture2D  Material_Texture2D_3;
SamplerState  Material_Texture2D_3Sampler;
Texture2D  Material_Texture2D_4;
SamplerState  Material_Texture2D_4Sampler;
Texture2D  Material_Texture2D_5;
SamplerState  Material_Texture2D_5Sampler;
Texture2D  Material_Texture2D_6;
SamplerState  Material_Texture2D_6Sampler;
struct ViewStateTileOffsetData
{
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewOriginHigh;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 ViewOriginLow;
	float3 TranslatedWorldCameraOrigin;
	float3 WorldViewOriginHigh;
	float3 WorldViewOriginLow;
	float3 PreViewTranslationHigh;
	float3 PreViewTranslationLow;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevWorldCameraOriginHigh;
	float3 PrevWorldCameraOriginLow;
	float3 PrevWorldViewOriginHigh;
	float3 PrevWorldViewOriginLow;
	float3 PrevPreViewTranslationHigh;
	float3 PrevPreViewTranslationLow;
	float3 ViewTilePosition;
	float3 RelativeWorldCameraOriginTO;
	float3 RelativeWorldViewOriginTO;
	float3 RelativePreViewTranslationTO;
	float3 PrevRelativeWorldCameraOriginTO;
	float3 PrevRelativeWorldViewOriginTO;
	float3 RelativePrevPreViewTranslationTO;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float SkyLightVolumetricScatteringIntensity;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogPrevUVMaxForTemporalBlend;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float2 WorldDepthToPixelWorldRadius;
	float4 ScreenRayLengthMultiplier;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	int4 EnvironmentComponentsFlags;
	FDFInverseMatrix WorldToClip;
	FDFMatrix ClipToWorld;
	FDFMatrix ScreenToWorld;
	FDFMatrix PrevClipToWorld;
	FDFVector3 WorldCameraOrigin;
	FDFVector3 WorldViewOrigin;
	FDFVector3 PrevWorldCameraOrigin;
	FDFVector3 PrevWorldViewOrigin;
	FDFVector3 PreViewTranslation;
	FDFVector3 PrevPreViewTranslation;
	ViewStateTileOffsetData TileOffset;
};
void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View.TranslatedWorldToClip;
	Result.RelativeWorldToClip = View.RelativeWorldToClip;
	Result.ClipToRelativeWorld = View.ClipToRelativeWorld;
	Result.TranslatedWorldToView = View.TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View.ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View.TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View.CameraViewToTranslatedWorld;
	Result.ViewToClip = View.ViewToClip;
	Result.ViewToClipNoAA = View.ViewToClipNoAA;
	Result.ClipToView = View.ClipToView;
	Result.ClipToTranslatedWorld = View.ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View.SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View.ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View.ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View.MobileMultiviewShadowTransform;
	Result.ViewOriginHigh = View.ViewOriginHigh;
	Result.ViewForward = View.ViewForward;
	Result.ViewUp = View.ViewUp;
	Result.ViewRight = View.ViewRight;
	Result.HMDViewNoRollUp = View.HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View.HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View.InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View.ScreenPositionScaleBias;
	Result.ViewOriginLow = View.ViewOriginLow;
	Result.TranslatedWorldCameraOrigin = View.TranslatedWorldCameraOrigin;
	Result.WorldViewOriginHigh = View.WorldViewOriginHigh;
	Result.WorldViewOriginLow = View.WorldViewOriginLow;
	Result.PreViewTranslationHigh = View.PreViewTranslationHigh;
	Result.PreViewTranslationLow = View.PreViewTranslationLow;
	Result.PrevViewToClip = View.PrevViewToClip;
	Result.PrevClipToView = View.PrevClipToView;
	Result.PrevTranslatedWorldToClip = View.PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View.PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View.PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View.PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View.PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View.PrevTranslatedWorldCameraOrigin;
	Result.PrevWorldCameraOriginHigh = View.PrevWorldCameraOriginHigh;
	Result.PrevWorldCameraOriginLow = View.PrevWorldCameraOriginLow;
	Result.PrevWorldViewOriginHigh = View.PrevWorldViewOriginHigh;
	Result.PrevWorldViewOriginLow = View.PrevWorldViewOriginLow;
	Result.PrevPreViewTranslationHigh = View.PrevPreViewTranslationHigh;
	Result.PrevPreViewTranslationLow = View.PrevPreViewTranslationLow;
	Result.ViewTilePosition = View.ViewTilePosition;
	Result.RelativeWorldCameraOriginTO = View.RelativeWorldCameraOriginTO;
	Result.RelativeWorldViewOriginTO = View.RelativeWorldViewOriginTO;
	Result.RelativePreViewTranslationTO = View.RelativePreViewTranslationTO;
	Result.PrevRelativeWorldCameraOriginTO = View.PrevRelativeWorldCameraOriginTO;
	Result.PrevRelativeWorldViewOriginTO = View.PrevRelativeWorldViewOriginTO;
	Result.RelativePrevPreViewTranslationTO = View.RelativePrevPreViewTranslationTO;
	Result.PrevClipToRelativeWorld = View.PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View.PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View.ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View.ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View.TemporalAAJitter;
	Result.GlobalClippingPlane = View.GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View.FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View.PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View.ViewRectMin;
	Result.ViewSizeAndInvSize = View.ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View.ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View.LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View.ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View.BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View.ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View.NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View.ProjectionDepthThicknessScale;
	Result.PreExposure = View.PreExposure;
	Result.OneOverPreExposure = View.OneOverPreExposure;
	Result.DiffuseOverrideParameter = View.DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View.SpecularOverrideParameter;
	Result.NormalOverrideParameter = View.NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View.RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View.PrevFrameGameTime;
	Result.PrevFrameRealTime = View.PrevFrameRealTime;
	Result.OutOfBoundsMask = View.OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View.WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View.CullingSign;
	Result.NearPlane = View.NearPlane;
	Result.GameTime = View.GameTime;
	Result.RealTime = View.RealTime;
	Result.DeltaTime = View.DeltaTime;
	Result.MaterialTextureMipBias = View.MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View.MaterialTextureDerivativeMultiply;
	Result.Random = View.Random;
	Result.FrameNumber = View.FrameNumber;
	Result.FrameCounter = View.FrameCounter;
	Result.StateFrameIndexMod8 = View.StateFrameIndexMod8;
	Result.StateFrameIndex = View.StateFrameIndex;
	Result.DebugViewModeMask = View.DebugViewModeMask;
	Result.WorldIsPaused = View.WorldIsPaused;
	Result.CameraCut = View.CameraCut;
	Result.UnlitViewmodeMask = View.UnlitViewmodeMask;
	Result.DirectionalLightColor = View.DirectionalLightColor;
	Result.DirectionalLightDirection = View.DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View.TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View.TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View.TemporalAAParams;
	Result.CircleDOFParams = View.CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View.DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View.DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View.DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View.DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View.DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View.DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View.DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View.MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View.GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View.GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View.DemosaicVposOffset;
	Result.DecalDepthBias = View.DecalDepthBias;
	Result.IndirectLightingColorScale = View.IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View.PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View.PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View.AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View.AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View.AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View.AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View.AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View.SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View.SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View.SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View.SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View.SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View.SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View.SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View.SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View.SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View.SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View.SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View.NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View.RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View.RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View.RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View.AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View.AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View.SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View.SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View.SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View.SkyLightColor;
	Result.SkyLightVolumetricScatteringIntensity = View.SkyLightVolumetricScatteringIntensity;
	Result.MobileSkyIrradianceEnvironmentMap = View.MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View.MobilePreviewMode;
	Result.HMDEyePaddingOffset = View.HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View.ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View.ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View.DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View.IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View.StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View.GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View.GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View.GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View.GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View.GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View.GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View.GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View.GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View.GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View.GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View.GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View.MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View.NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View.CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View.NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View.NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View.DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View.DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View.CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View.bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View.VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View.VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View.VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View.VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View.VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View.VolumetricFogPrevUVMax;
	Result.VolumetricFogPrevUVMaxForTemporalBlend = View.VolumetricFogPrevUVMaxForTemporalBlend;
	Result.VolumetricFogScreenToResourceUV = View.VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View.VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View.VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View.VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View.VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View.VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View.VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View.VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View.IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View.EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View.XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View.GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View.VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View.VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View.VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View.VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View.VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View.RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View.RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View.RuntimeVirtualTextureDebugParams;
	Result.FarShadowStaticMeshLODBias = View.FarShadowStaticMeshLODBias;
	Result.MinRoughness = View.MinRoughness;
	Result.HairRenderInfo = View.HairRenderInfo;
	Result.EnableSkyLight = View.EnableSkyLight;
	Result.HairRenderInfoBits = View.HairRenderInfoBits;
	Result.HairComponents = View.HairComponents;
	Result.bSubsurfacePostprocessEnabled = View.bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View.SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View.SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View.SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View.PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View.PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View.PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View.PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View.PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View.PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View.PhysicsFieldTargets;
	Result.GPUSceneViewId = View.GPUSceneViewId;
	Result.ViewResolutionFraction = View.ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View.SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View.TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View.PrevTanAndInvTanHalfFOV;
	Result.WorldDepthToPixelWorldRadius = View.WorldDepthToPixelWorldRadius;
	Result.ScreenRayLengthMultiplier = View.ScreenRayLengthMultiplier;
	Result.GlintLUTParameters0 = View.GlintLUTParameters0;
	Result.GlintLUTParameters1 = View.GlintLUTParameters1;
	Result.EnvironmentComponentsFlags = View.EnvironmentComponentsFlags;
	FinalizeViewState(Result);
	return Result;
}
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeDFInverseMatrix(InOutView.ViewOriginHigh, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeDFMatrix(InOutView.ViewOriginHigh, InOutView.PrevClipToRelativeWorld);
	InOutView.WorldCameraOrigin = MakeDFVector3(InOutView.ViewOriginHigh, InOutView.ViewOriginLow);
	InOutView.WorldViewOrigin = MakeDFVector3(InOutView.WorldViewOriginHigh, InOutView.WorldViewOriginLow);
	InOutView.PrevWorldCameraOrigin = MakeDFVector3(InOutView.PrevWorldCameraOriginHigh, InOutView.PrevWorldCameraOriginLow);
	InOutView.PrevWorldViewOrigin = MakeDFVector3(InOutView.PrevWorldViewOriginHigh, InOutView.PrevWorldViewOriginLow);
	InOutView.PreViewTranslation = MakeDFVector3(InOutView.PreViewTranslationHigh, InOutView.PreViewTranslationLow);
	InOutView.PrevPreViewTranslation = MakeDFVector3(InOutView.PrevPreViewTranslationHigh, InOutView.PrevPreViewTranslationLow);
	InOutView.TileOffset.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOriginTO);
	InOutView.TileOffset.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOriginTO);
	InOutView.TileOffset.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOriginTO);
	InOutView.TileOffset.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOriginTO);
	InOutView.TileOffset.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslationTO);
	InOutView.TileOffset.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslationTO);
}
static ViewState ResolvedView = (ViewState)0.0f;
ViewState ResolveView()
{
	return GetPrimaryView();
}
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4 Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV, float MipBias)
{
	return Tex.SampleBias(Sampler, UV, MipBias);
}
float4 Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV, float2 DDX, float2 DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 2.980233e-8f) ? 0.0f : pow(Base, Exponent);
}
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}
float DDX(float Input)
{
	return ddx(Input);
}
float2 DDX(float2 Input)
{
	return ddx(Input);
}
float3 DDX(float3 Input)
{
	return ddx(Input);
}
float4 DDX(float4 Input)
{
	return ddx(Input);
}
float DDY(float Input)
{
	return ddy(Input);
}
float2 DDY(float2 Input)
{
	return ddy(Input);
}
float3 DDY(float3 Input)
{
	return ddy(Input);
}
float4 DDY(float4 Input)
{
	return ddy(Input);
}
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	uv += FrameId * (float2(47, 17) * 0.695f);
    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}
float Pow2( float x )
{
	return x*x;
}
float2 Pow2( float2 x )
{
	return x*x;
}
float3 Pow2( float3 x )
{
	return x*x;
}
float4 Pow2( float4 x )
{
	return x*x;
}
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return ViewToClip._44 >= 1.0f;
}
bool IsOrthoProjection(ViewState InView)
{
	return IsOrthoProjection(InView.ViewToClip);
}
bool IsOrthoProjection()
{
	return IsOrthoProjection(View.ViewToClip);
}
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}
float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View.BufferSizeAndInvSize.zw;
}
void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;
	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);
	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}
float4 UnpackNormalMap( float4 TextureSample )
{
		float2 NormalXY = TextureSample.rg;
	NormalXY = NormalXY * float2(2.0f,2.0f) - float2(1.0f,1.0f);
	float NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return float4( NormalXY.xy, NormalZ, 1.0f );
}
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	return mul(InTangentVector, TangentToWorld);
}
float4 EncodeVelocityToTexture(float3 V, bool bHasPixelAnimation)
{
		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));
	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;
		uint Vz = asuint(V.z);
		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float(((Vz >>  0) & 0xFFFE) | uint(bHasPixelAnimation)) * rcp(65535.0f) + (0.1 / 65535.0f));
	return EncodedV;
}
float4 EncodeVelocityToTexture(float3 V)
{
	return EncodeVelocityToTexture(V,  false);
}
struct FPixelShaderIn
{
	float4 SvPosition;
	uint Coverage;
	bool bIsFrontFace;
};
struct FPixelShaderOut
{
	float4 MRT[8];
	uint SubstrateOutput[3];
	uint SubstrateTopLayerData;
	uint Coverage;
	float Depth;
};
FLWCScalar DFToWS(FDFScalar In) { return DFToTileOffset(In); }
FLWCScalar DFFastToWS(FDFScalar In) { return DFFastToTileOffset(In); }
FLWCVector2 DFToWS(FDFVector2 In) { return DFToTileOffset(In); }
FLWCVector2 DFFastToWS(FDFVector2 In) { return DFFastToTileOffset(In); }
FLWCVector3 DFToWS(FDFVector3 In) { return DFToTileOffset(In); }
FLWCVector3 DFFastToWS(FDFVector3 In) { return DFFastToTileOffset(In); }
FLWCVector4 DFToWS(FDFVector4 In) { return DFToTileOffset(In); }
FLWCVector4 DFFastToWS(FDFVector4 In) { return DFFastToTileOffset(In); }
FLWCMatrix DFToWS(FDFMatrix In) { return DFToTileOffset(In); }
FLWCMatrix DFFastToWS(FDFMatrix In) { return DFFastToTileOffset(In); }
FLWCInverseMatrix DFToWS(FDFInverseMatrix In) { return DFToTileOffset(In); }
FLWCInverseMatrix DFFastToWS(FDFInverseMatrix In) { return DFFastToTileOffset(In); }
float DFToWS( float In) { return In; }
float2 DFToWS( float2 In) { return In; }
float3 DFToWS( float3 In) { return In; }
float4 DFToWS( float4 In) { return In; }
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };
	return float3x3( TangentX, TangentY, TangentZ );
}
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}
float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}
static const uint InstanceTransformSizeFloat4Count = 2u;
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		PositionHigh;
	uint		PrimitiveComponentId; 
	FDFMatrix	LocalToWorld;
	FDFInverseMatrix WorldToLocal;
	FDFMatrix	PreviousLocalToWorld;
	FDFInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FDFVector3	ObjectWorldPosition;
	FDFVector3	ActorWorldPosition;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	FLWCVector3	ObjectWorldPositionTO;
	FLWCVector3	ActorWorldPositionTO;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		PrimitiveColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9u]; 
};
float3 UnpackColorRGB24(float PackedColorFloat)
{
	uint PackedColor = asuint(PackedColorFloat);
	return float3
	(
		float((PackedColor >> 24u) & 0xFF),
		float((PackedColor >> 16u) & 0xFF),
		float((PackedColor >>  8u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};
struct FInstanceSceneData
{
	FDFMatrix LocalToWorld;
	FDFMatrix PrevLocalToWorld;
	FDFInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;
	float    RandomID;
	float4   LightMapAndShadowMapUVBias;
	bool     ValidInstance;
	uint     Flags;
	FInstanceSceneEditorData EditorData;
};
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;
	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];
}
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{
	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	uint PrimitiveIndex = PrimitiveId * 42;
	float3 PositionHigh = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;
	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));
	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));
	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));
	float4 ObjectWorldPositionHighAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);
	float4 ObjectWorldPositionLow			= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);
	float4 ActorWorldPositionHigh	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20);
	float4 ActorWorldPositionLow	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.PositionHigh							= PositionHigh; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeDFMatrix4x3(PositionHigh, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeDFInverseMatrix4x3(PositionHigh, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeDFMatrix4x3(PositionHigh, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeDFInverseMatrix4x3(PositionHigh, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectRadius							= ObjectWorldPositionHighAndRadius.w;
	PrimitiveData.ObjectWorldPositionTO					= MakeLWCVector3(ObjectWorldPositionHighAndRadius.xyz, ObjectWorldPositionLow.xyz);
	PrimitiveData.ActorWorldPositionTO					= MakeLWCVector3(ActorWorldPositionHigh.xyz, ActorWorldPositionLow.xyz);
	PrimitiveData.ObjectWorldPosition					= DFFromTileOffset(PrimitiveData.ObjectWorldPositionTO);
	PrimitiveData.ActorWorldPosition					= DFFromTileOffset(PrimitiveData.ActorWorldPositionTO);
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w;
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w) >> 24;
	PrimitiveData.WireframeColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).x);
	PrimitiveData.PrimitiveColor						= UnpackColorRGB24(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).y);
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z);
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).x;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 32).y);
	[unroll]
	for (int DataIndex = 0; DataIndex < 9u; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  33 + DataIndex);
	}
	return PrimitiveData;
}
float GetPrimitive_DeterminantSign_FromFlags(uint Flags)
{
	return CondMask(Flags & 0x40, -1.0f, 1.0f);
}
float GetPrimitive_DeterminantSign(uint PrimitiveId)
{
	return GetPrimitive_DeterminantSign_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}
float GetPrimitive_DeterminantSign(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_DeterminantSign_FromFlags(Primitive.Flags);
}
float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}
float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}
float GetPrimitive_PerObjectGBufferData(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(Primitive.Flags);
}
float3 UnpackHitProxyId(uint HitProxyPacked)
{
	return float3
	(
		float((HitProxyPacked       ) & 0xFF),
		float((HitProxyPacked >>  8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}
struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint PayloadExtension;
	uint CustomData;
};
uint GetGPUSceneFrameNumber()
{
	return Scene.GPUScene_GPUSceneFrameNumber;
}
float4 LoadInstanceSceneDataElement(uint Index)
{
	return Scene_GPUScene_GPUSceneInstanceSceneData[Index];
}
float4 LoadInstancePayloadDataElement(uint Index)
{
	return Scene_GPUScene_GPUSceneInstancePayloadData[Index];
}
void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}
float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;
	{
		float3 Rotation =
		{
			( RotationScale[0] >>  0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >>  0 ) & 0x7fff
		};
		float2 OctZ  = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0  = ( Rotation.z  - 16384 ) * (0.70710678f / 16383.0f);	
		bool bSpinIsX = RotationScale[1] & 0x8000;
		M[2].xyz = HemiOctahedronToUnitVector( OctZ );
		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );
		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;
		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}
	{
		const uint SignMantissaBits	= 16;
		const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
		const uint MantissaBits		= SignMantissaBits - 1;
		uint SharedExp = RotationScale[3] >> 16;
		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );
		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};
		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;
		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}
	return M;
}
void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId		= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (20u),  0);
	OutInstanceFlags	= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (12u), (20u));	
}
void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}
void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId		= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (24u),  0);
	OutCustomDataCount	= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (8u), (24u));
}
void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}
float GetInstanceDeterminantSignFromFlags(uint Flags)
{
	return CondMask(Flags & 0x1, -1.0f, 1.0f);
}
FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveId);
	const uint PayloadDataRelativeOffset	= InstanceRelativeId * PrimitiveData.InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset		= PayloadDataRelativeOffset + PrimitiveData.InstancePayloadDataOffset;
	const bool bHasHierarchyOffset			= (Flags & 0x20) != 0u;
	const bool bHasLocalBounds				= (Flags & 0x40) != 0u;
	const bool bHasDynamicData				= (Flags & 0x8) != 0u;
	const bool bHasLightShadowUVBias		= (Flags & 0x10) != 0u;
	const bool bHasCustomData				= (Flags & 0x4) != 0u;
	const bool bHasPayloadExtension			= (Flags & 0x80) != 0u;
	const bool bHasEditorData				= (Flags & 0x100) != 0u;
	uint CurOffset = PayloadDataGlobalOffset;
	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset 	= (0xFFFFFFFFu);
	Offsets.EditorData 			= (0xFFFFFFFFu);
	Offsets.LocalBounds 		= (0xFFFFFFFFu);
	Offsets.DynamicData 		= (0xFFFFFFFFu);
	Offsets.LightShadowUVBias 	= (0xFFFFFFFFu);
	Offsets.PayloadExtension	= (0xFFFFFFFFu);
	Offsets.CustomData			= (0xFFFFFFFFu);
	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}
	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}
	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));
	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}
	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}
	if (bHasPayloadExtension)
	{
		Offsets.PayloadExtension = CurOffset;
		CurOffset += PrimitiveData.InstancePayloadExtensionSize;
	}
	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}
	return Offsets;
}
void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 PositionHigh, float4x4 LocalToRelativeWorld)
{
	InstanceData.NonUniformScale.w							= max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign							= GetInstanceDeterminantSignFromFlags(InstanceData.Flags);
	float4x4 RelativeWorldToLocal							= LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz							   *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz					           *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz					           *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz						        = 0.0f;
	RelativeWorldToLocal								    = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz						        = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal								= MakeDFInverseMatrix(PositionHigh, RelativeWorldToLocal);
}
FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;
	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId != ((1u << (20u)) - 1u) &&
								 ((InstanceData.Flags & 0x200) == 0u);
	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);
		FInstancePayloadDataOffsets Offsets 	= GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
		InstanceData.LastUpdateSceneFrameNumber	= asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);
		InstanceData.RandomID					= LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).w;
		FPrimitiveSceneData PrimitiveData		= GetPrimitiveData(InstanceData.PrimitiveId);
		float3 PositionHigh 									= PrimitiveData.PositionHigh;
		uint4  RotationScale									= asuint(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId));
		float3 Translation										= LoadInstanceSceneDataElement(2 * SOAStride + InstanceId).xyz;
		float3 Scale = 0;
		float4x4 LocalToRelativeWorld							= DecodeTransform( RotationScale, Translation, Scale );
		InstanceData.NonUniformScale.xyz						= abs(Scale);
		InstanceData.InvNonUniformScale							= rcp(InstanceData.NonUniformScale.xyz);
		InstanceData.LocalToWorld	= MakeDFMatrix(PositionHigh, LocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, PositionHigh, LocalToRelativeWorld);
		InstanceData.NaniteRuntimeResourceID	= PrimitiveData.NaniteResourceID;
		InstanceData.NaniteHierarchyOffset		= PrimitiveData.NaniteHierarchyOffset;
		[branch]
		if (Offsets.HierarchyOffset != (0xFFFFFFFFu))
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;
			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}
		[branch]
		if (Offsets.EditorData != (0xFFFFFFFFu))
		{
			const uint PackedEditorData = asuint(LoadInstancePayloadDataElement(Offsets.EditorData)).y;
			InstanceData.EditorData.bIsSelected    = (PackedEditorData >> 24u) != 0;
			InstanceData.EditorData.HitProxyPacked =  PackedEditorData & 0x00FFFFFFu;
			InstanceData.EditorData.HitProxyId = UnpackHitProxyId(InstanceData.EditorData.HitProxyPacked);
		}
		[branch]
		if (Offsets.LocalBounds != (0xFFFFFFFFu))
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = PrimitiveData.InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = PrimitiveData.InstanceLocalBoundsExtent;
		}
		[branch]
		if (Offsets.DynamicData != (0xFFFFFFFFu))
		{
			uint4  PrevRotationScale			= asuint(LoadInstancePayloadDataElement(Offsets.DynamicData + 0));
			float3 PrevTranslation				= LoadInstancePayloadDataElement(Offsets.DynamicData + 1).xyz;
			float3 PrevScale					= 0;
			float4x4 PrevLocalToRelativeWorld	= DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
			InstanceData.PrevLocalToWorld		= MakeDFMatrix(PositionHigh, PrevLocalToRelativeWorld);
		}
		else
		{
			InstanceData.PrevLocalToWorld = MakeDFMatrix(PositionHigh, mul(LocalToRelativeWorld, PrimitiveData.WorldToPreviousWorld));
		}
		[branch]
		if (Offsets.LightShadowUVBias != (0xFFFFFFFFu))
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}
		InstanceData.PayloadExtensionOffset = Offsets.PayloadExtension;
		InstanceData.PayloadExtensionSize = PrimitiveData.InstancePayloadExtensionSize;
	}
	return InstanceData;
}
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};
bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}
struct FLightAccumulator
{
	float3 TotalLight;
	float ScatterableLightLuma;
	float3 ScatterableLight;
	float EstimatedCost;
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;
};
void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View.bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}
	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}
void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}
float4 ConvertEstimatedCostToColor(float EstimatedCost)
{
	return 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * EstimatedCost;
}
float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;
	if (0 == 1)
	{
		Ret = ConvertEstimatedCostToColor(In.EstimatedCost);
	}
	else
	{
		Ret = float4(In.TotalLight, 0);
		if (1 == 1 )
		{
			if (View.bCheckerboardSubsurfaceProfileRendering == 0 && View.bSubsurfacePostprocessEnabled)
			{
				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			Ret.a = Luminance(In.ScatterableLight);
		}
	}
	return Ret;
}
float3 EncodeSubsurfaceColor(float3 SubsurfaceColor)
{
	return sqrt(saturate(SubsurfaceColor));
}
float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View.PreExposure; 
	const float LogBlackPoint = 0.00390625;	
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}
float EncodeShadingModelIdAndSelectiveOutputMask(uint ShadingModelId, uint SelectiveOutputMask)
{
	uint Value = (ShadingModelId & 0xF) | SelectiveOutputMask;
	return (float)Value / (float)0xFF;
}
struct FGBufferData
{
	float3 WorldNormal;
	float3 WorldTangent;
	float3 DiffuseColor;
	float3 SpecularColor;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float4 CustomData;
	float GenericAO;
	float IndirectIrradiance;
	float4 PrecomputedShadowFactors;
	float Roughness;
	float Anisotropy;
	float GBufferAO;
	uint DiffuseIndirectSampleOcclusion;
	uint ShadingModelID;
	uint SelectiveOutputMask;
	float PerObjectGBufferData;
	float CustomDepth;
	uint CustomStencil;
	float Depth;
	float4 Velocity;
	float3 StoredBaseColor;
	float StoredSpecular;
	float StoredMetallic;
	float Curvature;
};
bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;
	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}
bool CheckerFromPixelPos(uint2 PixelPos)
{
	uint TemporalAASampleIndex = uint(View.TemporalAAParams.x);
	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;
}
float3 EncodeNormalHelper(float3 SrcNormal, float QuantizationBias)
{
	return SrcNormal * .5f + .5f;
}
void EncodeGBufferToMRT(inout FPixelShaderOut Out, FGBufferData GBuffer, float QuantizationBias)
{
	float4 MrtFloat1 = 0.0f;
	float4 MrtFloat2 = 0.0f;
	uint4 MrtUint2 = 0;
	float4 MrtFloat3 = 0.0f;
	float4 MrtFloat4 = 0.0f;
	float4 MrtFloat5 = 0.0f;
	float4 MrtFloat6 = 0.0f;
	float3 WorldNormal_Compressed = EncodeNormalHelper(GBuffer.WorldNormal, 0.0f);
	MrtFloat1.x = WorldNormal_Compressed.x;
	MrtFloat1.y = WorldNormal_Compressed.y;
	MrtFloat1.z = WorldNormal_Compressed.z;
	MrtFloat1.w = GBuffer.PerObjectGBufferData.x;
	MrtFloat2.x = GBuffer.Metallic.x;
	MrtFloat2.y = GBuffer.Specular.x;
	MrtFloat2.z = GBuffer.Roughness.x;
	MrtUint2.w |= ((((GBuffer.ShadingModelID.x) >> 0) & 0x0f) << 0);
	MrtUint2.w |= ((((GBuffer.SelectiveOutputMask.x) >> 0) & 0x0f) << 4);
	MrtFloat3.x = GBuffer.BaseColor.x;
	MrtFloat3.y = GBuffer.BaseColor.y;
	MrtFloat3.z = GBuffer.BaseColor.z;
	MrtFloat3.w = GBuffer.GenericAO.x;
	MrtFloat4.x = GBuffer.Velocity.x;
	MrtFloat4.y = GBuffer.Velocity.y;
	MrtFloat4.z = GBuffer.Velocity.z;
	MrtFloat4.w = GBuffer.Velocity.w;
	MrtFloat6.x = GBuffer.PrecomputedShadowFactors.x;
	MrtFloat6.y = GBuffer.PrecomputedShadowFactors.y;
	MrtFloat6.z = GBuffer.PrecomputedShadowFactors.z;
	MrtFloat6.w = GBuffer.PrecomputedShadowFactors.w;
	MrtFloat5.x = GBuffer.CustomData.x;
	MrtFloat5.y = GBuffer.CustomData.y;
	MrtFloat5.z = GBuffer.CustomData.z;
	MrtFloat5.w = GBuffer.CustomData.w;
	Out.MRT[1] = MrtFloat1;
	Out.MRT[2] = float4(MrtFloat2.x, MrtFloat2.y, MrtFloat2.z, float(MrtUint2.w) / 255.0f);
	Out.MRT[3] = MrtFloat3;
	Out.MRT[4] = MrtFloat4;
	Out.MRT[5] = MrtFloat5;
	Out.MRT[6] = MrtFloat6;
	Out.MRT[7] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}
void SetGBufferForUnlit(out float4 OutGBufferB)
{
	OutGBufferB = 0;
	OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(0, 0);
}
float3 AOMultiBounce(float3 BaseColor, float AO)
{
	if (0 && !0)
	{
		return AO;
	}
	else
	{
		float3 a = 2.0404 * BaseColor - 0.3324;
		float3 b = -4.7951 * BaseColor + 0.6417;
		float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}
float4 ProcessMaterialColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
float4 ProcessMaterialLinearColorTextureLookup(float4 TextureValue)
{
	return TextureValue;
}
struct FSubstrateData
{
	uint Dummy;
};
FSubstrateData GetInitialisedSubstrateData() { return (FSubstrateData)0; }
uint GetDBufferTargetMask(uint2 PixelPos)
{
	{
		return 0x07;
	}
}
struct FDBufferData
{
	float3 PreMulColor;
	float ColorOpacity;
	float3 PreMulWorldNormal;
	float NormalOpacity;
	float PreMulRoughness;
	float PreMulMetallic;
	float PreMulSpecular;
	float RoughnessOpacity;
};
FDBufferData DecodeDBufferData(
	float4 DBufferA,
	float4 DBufferB,
	float4 DBufferC)
{
	FDBufferData ret;
	ret.PreMulColor = DBufferA.rgb;
	ret.ColorOpacity = DBufferA.a;
	ret.PreMulWorldNormal = DBufferB.rgb * 2 - (256.0 / 255.0);
	ret.NormalOpacity = DBufferB.a;
	ret.PreMulMetallic = DBufferC.r;
	ret.PreMulSpecular = DBufferC.g;
	ret.PreMulRoughness = DBufferC.b;
	ret.RoughnessOpacity = DBufferC.a;
	return ret;
}
FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit)
{
	float4 DBufferA = float4(0.0, 0.0, 0.0, 1.0);
	float4 DBufferB = float4(128.0f / 255.0f, 128.f / 255.5f, 128.f / 255.5f, 1.0);
	float4 DBufferC = float4(0.0, 0.0, 0.0, 1.0);
	[branch]
	if (RTMaskBit & 0x1)
	{
		DBufferA = Texture2DSampleLevel(OpaqueBasePass_DBufferATexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);
	}
	[branch]
	if (RTMaskBit & 0x2)
	{
		DBufferB = Texture2DSampleLevel(OpaqueBasePass_DBufferBTexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);
	}
	[branch]
	if (RTMaskBit & 0x4)
	{
		DBufferC = Texture2DSampleLevel(OpaqueBasePass_DBufferCTexture, OpaqueBasePass_DBufferATextureSampler, BufferUV, 0);
	}
	return DecodeDBufferData(DBufferA, DBufferB, DBufferC);
}
void ApplyDBufferData(
	FDBufferData DBufferData, inout float3 WorldNormal, inout float3 SubsurfaceColor, inout float Roughness, 
	inout float3 BaseColor, inout float Metallic, inout float Specular )
{
	BaseColor = BaseColor * DBufferData.ColorOpacity + DBufferData.PreMulColor;
	SubsurfaceColor *= DBufferData.ColorOpacity;
	WorldNormal = normalize(WorldNormal * DBufferData.NormalOpacity + DBufferData.PreMulWorldNormal);
	Roughness = Roughness * DBufferData.RoughnessOpacity + DBufferData.PreMulRoughness;
	Metallic = Metallic * DBufferData.RoughnessOpacity + DBufferData.PreMulMetallic;
	Specular = Specular * DBufferData.RoughnessOpacity + DBufferData.PreMulSpecular;
}
struct FMaterialParticleParameters
{
	float RelativeTime;
	float MotionBlurFade;
	float Random;
	float4 Velocity;
	float4 Color;
	float4 TranslatedWorldPositionAndSize;
	float4 PrevTranslatedWorldPositionAndSize;
	FLWCVector3 WorldPosition;
	FLWCVector3 PrevWorldPosition;
	float4 MacroUV;
	float4 DynamicParameter;
	FDFMatrix ParticleToWorld;
	FDFInverseMatrix WorldToParticle;
	float2 Size;
	float SpriteRotation;
};
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FSubstrateData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FSubstrateData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
};
struct FMaterialLWCData
{
	FLWCVector3 AbsoluteWorldPosition;
	FLWCVector3 WorldPosition_NoOffsets;
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	FLWCMatrix	InstanceToWorld;
	FLWCInverseMatrix WorldToInstance;
	FLWCMatrix	PreviousInstanceToWorld;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	FLWCMatrix ParticleToWorld;
	FLWCInverseMatrix WorldToParticle;
	FLWCVector3 ParticleWorldPosition;
	FLWCVector3 PrevParticleWorldPosition;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
};
struct FMaterialPixelParameters
{
	float2 TexCoords[1];
	float4 VertexColor;
	float3 WorldNormal;
	float3 WorldTangent;
	float3 ReflectionVector;
	float3 CameraVector;
	float3 LightVector;
	float4 SvPosition;
	float4 ScreenPosition;
	float2 ViewBufferUV;
	float4 PrevScreenPosition;
	float UnMirrored;
	float TwoSidedSign;
	float3x3 TangentToWorld;
	FDFVector3 AbsoluteWorldPosition;
	float3 WorldPosition_CamRelative;
	FDFVector3 WorldPosition_NoOffsets;
	float3 WorldPosition_NoOffsets_CamRelative;
	float3 LightingPositionOffset;
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];
	float AOMaterialMask;
	float PerInstanceRandom;
	float4 PerInstanceParams;
	uint PrimitiveId;
	uint InstanceId;
	FMaterialParticleParameters Particle;
	uint Dummy;
	FMaterialAttributes MaterialAttributes;
	FMaterialLWCData LWCData;
};
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}
struct FMaterialVertexParameters
{
	float3 WorldPosition;
	float3x3 TangentToWorld;
	float PerInstanceRandom;
	FDFMatrix InstanceLocalToWorld;
	FDFInverseMatrix InstanceWorldToLocal;
	float3 InstanceLocalPosition;
	float4 PerInstanceParams;
	uint InstanceId;
	uint InstanceOffset;
	FDFMatrix PrevFrameLocalToWorld;
	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;
	float4 VertexColor;
	float2 TexCoords[2];
	FMaterialParticleParameters Particle;
	FMaterialAttributes MaterialAttributes;
	FSceneDataIntermediates SceneData;
	uint PrimitiveId;
	bool bEvaluateWorldPositionOffset;
	FMaterialLWCData LWCData;
};
FMaterialVertexParameters MakeInitializedMaterialVertexParameters()
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.PrimitiveId = ((1u << (20u)) - 1u);
	Result.bEvaluateWorldPositionOffset = true;
	return Result;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialVertexParameters Parameters)
{
		return Parameters.InstanceWorldToLocal;
}
FDFInverseMatrix GetWorldToInstanceDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFMatrix GetInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
		return Parameters.InstanceLocalToWorld;
}
FLWCMatrix GetInstanceToWorld(FMaterialVertexParameters Parameters) { return Parameters.LWCData.InstanceToWorld; }
FDFMatrix GetPrevInstanceToWorldDF(FMaterialVertexParameters Parameters)
{
	return Parameters.PrevFrameLocalToWorld;
}
FLWCMatrix GetPrevInstanceToWorld(FMaterialVertexParameters Parameters) { return Parameters.LWCData.PreviousInstanceToWorld; }
FDFMatrix GetInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
		return GetPrimitiveData(Parameters).LocalToWorld;
}
FLWCMatrix GetInstanceToWorld(FMaterialPixelParameters Parameters) { return Parameters.LWCData.InstanceToWorld; }
FDFMatrix GetPrevInstanceToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCMatrix GetPrevInstanceToWorld(FMaterialPixelParameters Parameters) { return Parameters.LWCData.PreviousInstanceToWorld; }
FLWCVector3 GetPrevPreViewTranslation(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.PrevPreViewTranslation;
}
FLWCVector3 GetPrevPreViewTranslation(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.PrevPreViewTranslation;
}
float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}
float3 GetPrevTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return GetTranslatedWorldPosition(Parameters);
}
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
FLWCVector3 GetPrevWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetPrevTranslatedWorldPosition(Parameters), GetPrevPreViewTranslation(Parameters));
}
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.AbsoluteWorldPosition;
}
float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}
FDFMatrix GetLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FLWCMatrix GetLocalToWorld(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.LocalToWorld;
}
FDFMatrix GetLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).LocalToWorld;
}
FLWCMatrix GetLocalToWorld(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.LocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCMatrix GetPrevLocalToWorld(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.PreviousLocalToWorld;
}
FDFMatrix GetPrevLocalToWorldDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousLocalToWorld;
}
FLWCMatrix GetPrevLocalToWorld(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.PreviousLocalToWorld;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).WorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialVertexParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FDFInverseMatrix GetPrevWorldToLocalDF(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).PreviousWorldToLocal;
}
FLWCVector3 TransformLocalPositionToWorld(FMaterialPixelParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}
FLWCVector3 TransformLocalPositionToWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetLocalToWorld(Parameters));
}
FLWCVector3 TransformLocalPositionToPrevWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetPrevLocalToWorld(Parameters));
}
FLWCVector3 GetObjectWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.LWCData.ObjectWorldPosition;
}
FLWCVector3 GetObjectWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.LWCData.ObjectWorldPosition;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialVertexParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
FMaterialLWCData MakeMaterialLWCData(FMaterialPixelParameters Parameters)
{
	FMaterialLWCData Result = (FMaterialLWCData)0;
	Result.PreViewTranslation = ResolvedView.TileOffset.PreViewTranslation;
	Result.PrevPreViewTranslation = ResolvedView.TileOffset.PrevPreViewTranslation;
	Result.WorldViewOrigin = ResolvedView.TileOffset.WorldViewOrigin;
	Result.PrevWorldViewOrigin = ResolvedView.TileOffset.PrevWorldViewOrigin;
	Result.WorldCameraOrigin = ResolvedView.TileOffset.WorldCameraOrigin;
	Result.PrevWorldCameraOrigin = ResolvedView.TileOffset.PrevWorldCameraOrigin;
	Result.AbsoluteWorldPosition = LWCSubtract(Parameters.WorldPosition_CamRelative, Result.PreViewTranslation);
	Result.WorldPosition_NoOffsets = LWCSubtract(Parameters.WorldPosition_NoOffsets_CamRelative, Result.PreViewTranslation);
	Result.InstanceToWorld = DFToWS(GetInstanceToWorldDF(Parameters));
	Result.WorldToInstance = DFFastToWS(GetWorldToInstanceDF(Parameters));
	Result.PreviousInstanceToWorld = DFToWS(GetPrevInstanceToWorldDF(Parameters));
	Result.LocalToWorld = DFToWS(GetLocalToWorldDF(Parameters));
	Result.WorldToLocal = DFFastToWS(GetWorldToLocalDF(Parameters));
	Result.PreviousLocalToWorld = DFToWS(GetPrevLocalToWorldDF(Parameters));
	Result.PreviousWorldToLocal = DFFastToWS(GetPrevWorldToLocalDF(Parameters));
	Result.ObjectWorldPosition = GetPrimitiveData(Parameters).ObjectWorldPositionTO;
	Result.ActorWorldPosition = GetPrimitiveData(Parameters).ActorWorldPositionTO;
	Result.ParticleToWorld = DFFastToWS(Parameters.Particle.ParticleToWorld);
	Result.WorldToParticle = DFFastToWS(Parameters.Particle.WorldToParticle);
	Result.ParticleWorldPosition = LWCSubtract(Parameters.Particle.TranslatedWorldPositionAndSize.xyz, Result.PreViewTranslation);
	Result.PrevParticleWorldPosition = LWCSubtract(Parameters.Particle.PrevTranslatedWorldPositionAndSize.xyz, Result.PrevPreViewTranslation);
	return Result;
}
float GetPerInstanceRandom(FMaterialVertexParameters Parameters)
{
	return Parameters.PerInstanceRandom;
}
float GetPerInstanceRandom(FMaterialPixelParameters Parameters)
{
	return Parameters.PerInstanceRandom;
}
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, float3 PositionOnAxis, float3 Position)
{
	float3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);
	float3 UAxis = Position - ClosestPointOnAxis;
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	float3 RotatedPosition = ClosestPointOnAxis + R;
	return RotatedPosition - Position;
}
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, FLWCVector3 PositionOnAxis, FLWCVector3 Position)
{
	FLWCVector3 ClosestPointOnAxis = LWCAdd(PositionOnAxis, NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz,  LWCToFloat(LWCSubtract( Position , PositionOnAxis ))));
	float3 UAxis =  LWCToFloat(LWCSubtract( Position , ClosestPointOnAxis ));
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);
	float3 R = UAxis * CosAngle + VAxis * SinAngle;
	return R - UAxis;
}
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}
	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}
FloatDeriv ConstructConstantFloatDeriv(float Value)
{
	FloatDeriv Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}
FLWCVector3Deriv ConstructConstantFWSVector3Deriv(FLWCVector3 Value)
{
	FLWCVector3Deriv Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}
FloatDeriv3 Convert_FloatDeriv3_FloatDeriv(FloatDeriv Src)
{
	FloatDeriv3 Ret;
	Ret.Value = ((float3)Src.Value);
	Ret.Ddx = ((float3)Src.Ddx);
	Ret.Ddy = ((float3)Src.Ddy);
	return Ret;
}
FloatDeriv ExtractFloatDeriv2_1(FloatDeriv2 InValue)
{
	FloatDeriv Ret;
	Ret.Value = InValue.Value.x;
	Ret.Ddx = InValue.Ddx.x;
	Ret.Ddy = InValue.Ddy.x;
	return Ret;
}
FloatDeriv ExtractFloatDeriv2_2(FloatDeriv2 InValue)
{
	FloatDeriv Ret;
	Ret.Value = InValue.Value.y;
	Ret.Ddx = InValue.Ddx.y;
	Ret.Ddy = InValue.Ddy.y;
	return Ret;
}
FloatDeriv ExtractFloatDeriv3_1(FloatDeriv3 InValue)
{
	FloatDeriv Ret;
	Ret.Value = InValue.Value.x;
	Ret.Ddx = InValue.Ddx.x;
	Ret.Ddy = InValue.Ddy.x;
	return Ret;
}
FloatDeriv ExtractFloatDeriv3_2(FloatDeriv3 InValue)
{
	FloatDeriv Ret;
	Ret.Value = InValue.Value.y;
	Ret.Ddx = InValue.Ddx.y;
	Ret.Ddy = InValue.Ddy.y;
	return Ret;
}
FloatDeriv ExtractFloatDeriv3_3(FloatDeriv3 InValue)
{
	FloatDeriv Ret;
	Ret.Value = InValue.Value.z;
	Ret.Ddx = InValue.Ddx.z;
	Ret.Ddy = InValue.Ddy.z;
	return Ret;
}
FloatDeriv AddDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	Ret.Value = A.Value + B.Value;
	Ret.Ddx = A.Ddx + B.Ddx;
	Ret.Ddy = A.Ddy + B.Ddy;
	return Ret;
}
FloatDeriv MulDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	Ret.Value = A.Value * B.Value;
	Ret.Ddx = A.Ddx * B.Value + A.Value * B.Ddx;
	Ret.Ddy = A.Ddy * B.Value + A.Value * B.Ddy;
	return Ret;
}
FloatDeriv2 MulDeriv(FloatDeriv2 A, FloatDeriv2 B)
{
	FloatDeriv2 Ret;
	Ret.Value = A.Value * B.Value;
	Ret.Ddx = A.Ddx * B.Value + A.Value * B.Ddx;
	Ret.Ddy = A.Ddy * B.Value + A.Value * B.Ddy;
	return Ret;
}
FloatDeriv3 MulDeriv(FloatDeriv3 A, FloatDeriv3 B)
{
	FloatDeriv3 Ret;
	Ret.Value = A.Value * B.Value;
	Ret.Ddx = A.Ddx * B.Value + A.Value * B.Ddx;
	Ret.Ddy = A.Ddy * B.Value + A.Value * B.Ddy;
	return Ret;
}
FloatDeriv DotDeriv(FloatDeriv2 A, FloatDeriv2 B)
{
	FloatDeriv Ret = ConstructConstantFloatDeriv(0);
	Ret = AddDeriv(Ret,MulDeriv(ExtractFloatDeriv2_1(A),ExtractFloatDeriv2_1(B)));
	Ret = AddDeriv(Ret,MulDeriv(ExtractFloatDeriv2_2(A),ExtractFloatDeriv2_2(B)));
	return Ret;
}
FloatDeriv DotDeriv(FloatDeriv3 A, FloatDeriv3 B)
{
	FloatDeriv Ret = ConstructConstantFloatDeriv(0);
	Ret = AddDeriv(Ret,MulDeriv(ExtractFloatDeriv3_1(A),ExtractFloatDeriv3_1(B)));
	Ret = AddDeriv(Ret,MulDeriv(ExtractFloatDeriv3_2(A),ExtractFloatDeriv3_2(B)));
	Ret = AddDeriv(Ret,MulDeriv(ExtractFloatDeriv3_3(A),ExtractFloatDeriv3_3(B)));
	return Ret;
}
FloatDeriv RsqrtDeriv(FloatDeriv A)
{
	FloatDeriv Ret;
	Ret.Value = rsqrt(A.Value);
	float dFdA = -0.5f * rsqrt(A.Value) * rcp(A.Value);	Ret.Ddx = dFdA * A.Ddx;
	Ret.Ddy = dFdA * A.Ddy;
	return Ret;
}
FloatDeriv3 FracDerivLWC(FLWCVector3Deriv A)
{
	FloatDeriv3 Ret;
	Ret.Value = LWCFrac(A.Value);
	Ret.Ddx = A.Ddx;
	Ret.Ddy = A.Ddy;
	return Ret;
}
FloatDeriv3 NormalizeDeriv(FloatDeriv3 A)
{
	FloatDeriv InvLen = RsqrtDeriv(DotDeriv(A,A));
	FloatDeriv3 Ret = MulDeriv(Convert_FloatDeriv3_FloatDeriv(InvLen), A);
	return Ret;
}
float CustomExpression0(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
float CustomExpression1(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
float CustomExpression2(FMaterialVertexParameters Parameters,float N)
{
uint uRes32 = asuint(float(N));
const uint sign2 = ((uRes32>>16)&0x8000);
const uint exp2  = ((((const int) ((uRes32>>23)&0xff))-127+15) << 10);
const uint mant2 = ((uRes32>>13)&0x3ff);
const uint bits = (sign2 | exp2 | mant2);
const uint result = bits - 1024;
return float(result);
}
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;
	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
	{
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	return RetNormal;
}
float3 GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}
float3 GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3 EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);
	EmissiveColor = max(EmissiveColor, 0.0f);
	return EmissiveColor;
}
uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}
float3 GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}
float3 GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}
float GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}
float GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}
float GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}
float GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}
float GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}
float GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
	float Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));
	{
		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}
	return Roughness;
}
float GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}
float GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}
float GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}
float GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}
float GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
bool ShouldEnableWorldPositionOffset(FMaterialVertexParameters Parameters)
{
		if (!Parameters.bEvaluateWorldPositionOffset ||
			(GetPrimitiveData(Parameters).Flags & 0x8000) == 0)
		{
			return false;
		}
	return true;
}
float3 ClampWorldPositionOffset(FMaterialVertexParameters Parameters, float3 InOffset)
{
	const float MaxWPODim = GetPrimitiveData(Parameters).MaxWPOExtent;
	return MaxWPODim <= 0.0f ? InOffset : clamp(InOffset, -MaxWPODim.xxx, MaxWPODim.xxx);
}
float3 GetMaterialWorldPositionOffsetRaw(FMaterialVertexParameters Parameters)
{
	float4 Local30 = MaterialCollection0.Vectors[0];
	float Local31 = max(Local30.g,0.00000000);
	float Local32 = min(Local31,4.00000000);
	float Local33 = (Local32 * 2.50000000);
	float Local34 = (Local33 * 0.03500000);
	float Local35 = (Local33 / 45.00000000);
	float2 Local36 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local35,Local35));
	float Local37 = (Local30.r / 360.00000000);
	float Local38 = (Local37 * 6.28318548);
	float Local39 = cos(Local38);
	float Local40 = sin(Local38);
	float2 Local41 = float2(  Local39 ,  Local40 );
	float3 Local42 = float3(  Local41 ,0.00000000);
	float2 Local43 = Parameters.TexCoords[1].xy;
	float4 Local44 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,  Local43 ,-1.00000000));
	float Local45 = CustomExpression0(Parameters,Local44.a);
	float Local46 = fmod(Local45,Material.PreshaderBuffer[3].x);
	float Local47 = (Local45 * Material.PreshaderBuffer[3].y);
	float Local48 = floor(Local47);
	float2 Local49 = (float2(Local46,Local48) + ((float2)0.50000000));
	float2 Local50 = (Local49 * Material.PreshaderBuffer[3].zw);
	float4 Local51 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local50.r,Local50.g),-1.00000000));
	float Local52 = CustomExpression1(Parameters,Local51.a);
	float Local53 =  select_internal( (abs(Local52 - Local45) > 0.00001000) ,  select_internal( (Local52 >= Local45) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float2 Local54 = (  Local43  * Material.PreshaderBuffer[4].xy);
	float2 Local55 = floor(  Local54 );
	float Local56 = (Local55.g * Material.PreshaderBuffer[3].x);
	float Local57 = (Local55.r + Local56);
	float Local58 =  select_internal( (abs(Local45 - Local57) > 0.00001000) ,  select_internal( (Local45 >= Local57) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local59 = (Local53.r + Local58.r);
	float Local60 = fmod(Local52,Material.PreshaderBuffer[3].x);
	float Local61 = (Local52 * Material.PreshaderBuffer[3].y);
	float Local62 = floor(Local61);
	float2 Local63 = (float2(Local60,Local62) + ((float2)0.50000000));
	float2 Local64 = (Local63 * Material.PreshaderBuffer[3].zw);
	float4 Local65 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local64.r,Local64.g),-1.00000000));
	float Local66 = CustomExpression2(Parameters,Local65.a);
	float Local67 =  select_internal( (abs(Local66 - Local52) > 0.00001000) ,  select_internal( (Local66 >= Local52) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local68 = (Local59 + Local67.r);
	float Local69 = ceil(Local68);
	float Local70 = (Local69 / 3.00000000);
	float Local71 = (Local70 * 3.00000000);
	float Local72 = saturate(Local71);
	float2 Local73 = lerp(  Local43 ,float2(Local50.r,Local50.g),  Local72 );
	float Local74 = (Local71 - 1.00000000);
	float Local75 = saturate(Local74);
	float2 Local76 = lerp(Local73,float2(Local64.r,Local64.g),  Local75 );
	float Local77 = fmod(Local66,Material.PreshaderBuffer[3].x);
	float Local78 = (Local66 * Material.PreshaderBuffer[3].y);
	float Local79 = floor(Local78);
	float2 Local80 = (float2(Local77,Local79) + ((float2)0.50000000));
	float2 Local81 = (Local80 * Material.PreshaderBuffer[3].zw);
	float Local82 = (Local74 - 1.00000000);
	float Local83 = saturate(Local82);
	float2 Local84 = lerp(Local76,float2(Local81.r,Local81.g),  Local83 );
	float4 Local85 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_4,Material_Texture2D_4Sampler,Local84,-1.00000000));
	FLWCVector3 Local86 = LWCMultiply(Local85.rgb, GetInstanceToWorld(Parameters));
	float4 Local87 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_5,Material_Texture2D_5Sampler,Local84,-1.00000000));
	float3 Local88 = (((float3)-0.50000000) + Local87.rgb);
	float3 Local89 = (Local88 * ((float3)2.00000000));
	float3 Local90 = LWCMultiplyVector(Local89, GetInstanceToWorld(Parameters));
	float3 Local91 = normalize(Local90);
	float Local92 = (Local87.a * 2048.00000000);
	float Local93 = max(Local92,8.00000000);
	float3 Local94 = (Local91 * ((float3)Local93));
	FLWCVector3 Local95 = LWCAdd(Local86, Local94);
	FLWCScalar Local96 = LWCDot(LWCPromote(  Local42 ), Local95);
	FLWCScalar Local97 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local95);
	FLWCVector2 Local98 = LWCDivide(MakeLWCVector(LWCPromote(Local96),LWCPromote(Local97)), ((float2)20.00000000));
	FLWCVector2 Local99 = LWCAdd(Local36, Local98);
	float2 Local100 = LWCFrac(Local99);
	float4 Local101 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local100,-1.00000000));
	float Local102 = (Local34 * Local101.a);
	float Local103 = (0.00000000 + Local102);
	float Local104 = dot(  Local42 ,Local91);
	float Local105 = (Local104 + float2(-1.25000000,-0.44400001).r);
	float Local106 = (Local105 * float2(-1.25000000,-0.44400001).g);
	float Local107 = (Local103 * Local106);
	FLWCVector3 Local108 = GetWorldPosition(Parameters);
	FLWCVector3 Local109 = MakeLWCVector( LWCGetComponent(   Local108  , 0),  LWCGetComponent(   Local108  , 1),  LWCGetComponent(   Local108  , 2));
	FLWCVector3 Local110 = LWCSubtract(  Local109 , Local86);
	float3 Local111 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local112 = (((float3)0.00000000) - Local111);
	float Local113 = length(Local112);
	float3 Local114 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local115 = (((float3)0.00000000) - Local114);
	float Local116 = length(Local115);
	float2 Local117 = float2(  Local113 ,  Local116 );
	float3 Local118 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local119 = (((float3)0.00000000) - Local118);
	float Local120 = length(Local119);
	float3 Local121 = float3(  Local117 ,  Local120 );
	float3 Local122 = (LWCToFloat(Local110) /   Local121 );
	float3 Local123 = normalize(Local91);
	float Local124 = dot(Local122,Local123);
	float Local125 = (Material.PreshaderBuffer[4].z * Local93);
	float Local126 = (Local124 / Local125);
	float Local127 = saturate(Local126);
	float Local128 = (Local107 * Local127);
	float Local129 = (Local128 * 6.28318548);
	float Local130 = (Local33 / 30.00000000);
	FLWCVector2 Local131 = LWCDivide(Local99, ((float2)4.00000000));
	float2 Local132 = LWCFrac(Local131);
	float4 Local133 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local132,-1.00000000));
	float3 Local134 = (Local133.rgb - ((float3)0.50000000));
	float3 Local135 = (((float3)Local130) * Local134);
	float Local136 = PositiveClampedPow(Local104,5.00000000);
	float3 Local137 = (((float3)Local136) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local138 = (Local137 +   Local42 );
	float3 Local139 = cross(Local91,Local138);
	float3 Local140 = (Local135 + Local139);
	float3 Local141 = (Local140 - ((float3)0.00000000));
	float Local142 = length(Local141);
	float3 Local143 = (Local140 / ((float3)Local142));
	float3 Local144 = RotateAboutAxis(float4(Local143,Local129),Local86,  Local109 );
	float3 Local145 = (Local144 + ((float3)0.00000000));
	float3 Local146 = (Local145 + ((float3)0.00000000));
	FLWCVector3 Local147 = TransformLocalPositionToWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local148 = LWCSubtract(Local147,   Local109 );
	float3 Local149 = LWCToFloat(  Local148 );
	float Local150 = length(  Local149 );
	float Local151 = (  Local120  * Material.PreshaderBuffer[4].w);
	float Local152 = max(0.00001000,  Local151 );
	float Local153 = (1.00000000 /   Local152 );
	float Local154 = (  Local150  *   Local153 );
	float Local155 = (1.00000000 -   Local154 );
	float Local156 = saturate(  Local155 );
	float Local157 = (1.00000000 -   Local156 );
	float4 Local158 = MaterialCollection1.Vectors[5];
	FLWCVector3 Local159 = LWCSubtract(Local158.rgba.rgb, Local86);
	FLWCScalar Local160 = LWCLength(Local159);
	float4 Local161 = MaterialCollection1.Vectors[1];
	float Local162 = (Material.PreshaderBuffer[5].x * Local161.b);
	float Local163 = max(0.00001000,Local162);
	float Local164 = (1.00000000 / Local163);
	FLWCScalar Local165 = LWCMultiply(Local160, Local164);
	FLWCScalar Local166 = LWCSubtract(1.00000000, Local165);
	FLWCScalar Local167 = LWCMultiply(Local166, 2.00000000);
	float Local168 = LWCSaturate(Local167);
	float4 Local169 = MaterialCollection1.Vectors[3];
	float Local170 = (Local169.r * Material.PreshaderBuffer[5].y);
	float Local171 = (Local168 * Local170);
	float Local172 = (Local171 * 6.28318548);
	float3 Local173 = LWCNormalize(Local159);
	float3 Local174 = cross(Local173,Local91);
	float3 Local175 = normalize(Local174);
	float3 Local176 = RotateAboutAxis(float4(Local175,Local172),Local86,  Local109 );
	float3 Local177 = (Local176 + ((float3)0.00000000));
	float3 Local178 = (Local177 + ((float3)0.00000000));
	float Local179 = (View.GameTime * Material.PreshaderBuffer[5].z);
	float Local180 = (Local179 * 2.09439516);
	float Local181 = sin(Local180);
	float Local182 = (  Local181  * Material.PreshaderBuffer[5].w);
	float3 Local183 = (((float3)  Local182 ) * Local178);
	float4 Local184 = MaterialCollection1.Vectors[6];
	FLWCVector3 Local185 = LWCSubtract(  Local109 , Local184.rgba.rgb);
	FLWCScalar Local186 = LWCLength(  Local185 );
	float Local187 = (Local161.b * Material.PreshaderBuffer[6].x);
	float Local188 = max(0.00001000,Local187);
	float Local189 = (1.00000000 / Local188);
	FLWCScalar Local190 = LWCMultiply(  Local186 , Local189);
	FLWCScalar Local191 = LWCSubtract(1.00000000,   Local190 );
	FLWCScalar Local192 = LWCMultiply(  Local191 , 1.00502515);
	float Local193 = LWCSaturate(  Local192 );
	float4 Local194 = MaterialCollection1.Vectors[0];
	float Local195 = (  Local193  * Local194.r);
	float3 Local196 = lerp(Local178,Local183,  Local195 );
	FLWCVector3 Local197 = LWCSubtract(Local184.rgba.rgb, Local86);
	float3 Local198 = LWCNormalize(Local197);
	float3 Local199 = cross(Local198,Local91);
	float3 Local200 = normalize(Local199);
	float3 Local201 = RotateAboutAxis(float4(Local200,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float Local202 = (View.GameTime * Material.PreshaderBuffer[6].z);
	float Local203 = (Local202 * 2.09439516);
	float Local204 = sin(Local203);
	float Local205 = (  Local204  * Material.PreshaderBuffer[6].w);
	float3 Local206 = (Local201 * ((float3)  Local205 ));
	float3 Local207 = (Local206 + ((float3)0.00000000));
	float3 Local208 = (Local207 + ((float3)0.00000000));
	float3 Local209 = (((float3)  Local195 ) * Local208);
	float3 Local210 = (Local196 + Local209);
	float3 Local211 = (((float3)  Local157 ) * Local210);
	float4 Local212 = MaterialCollection1.Vectors[7];
	FLWCVector3 Local213 = LWCSubtract(Local212.rgba.rgb, Local86);
	FLWCScalar Local214 = LWCLength(Local213);
	float Local215 = (Material.PreshaderBuffer[5].x * Local161.a);
	float Local216 = max(0.00001000,Local215);
	float Local217 = (1.00000000 / Local216);
	FLWCScalar Local218 = LWCMultiply(Local214, Local217);
	FLWCScalar Local219 = LWCSubtract(1.00000000, Local218);
	FLWCScalar Local220 = LWCMultiply(Local219, 2.00000000);
	float Local221 = LWCSaturate(Local220);
	float Local222 = (Local169.g * Material.PreshaderBuffer[5].y);
	float Local223 = (Local221 * Local222);
	float Local224 = (Local223 * 6.28318548);
	float3 Local225 = LWCNormalize(Local213);
	float3 Local226 = cross(Local225,Local91);
	float3 Local227 = normalize(Local226);
	float3 Local228 = RotateAboutAxis(float4(Local227,Local224),Local86,  Local109 );
	float3 Local229 = (Local228 + ((float3)0.00000000));
	float3 Local230 = (Local229 + ((float3)0.00000000));
	float3 Local231 = (((float3)  Local182 ) * Local230);
	float4 Local232 = MaterialCollection1.Vectors[8];
	FLWCVector3 Local233 = LWCSubtract(  Local109 , Local232.rgba.rgb);
	FLWCScalar Local234 = LWCLength(  Local233 );
	float Local235 = (Local161.a * Material.PreshaderBuffer[6].x);
	float Local236 = max(0.00001000,Local235);
	float Local237 = (1.00000000 / Local236);
	FLWCScalar Local238 = LWCMultiply(  Local234 , Local237);
	FLWCScalar Local239 = LWCSubtract(1.00000000,   Local238 );
	FLWCScalar Local240 = LWCMultiply(  Local239 , 1.00502515);
	float Local241 = LWCSaturate(  Local240 );
	float Local242 = (  Local241  * Local194.g);
	float3 Local243 = lerp(Local230,Local231,  Local242 );
	FLWCVector3 Local244 = LWCSubtract(Local232.rgba.rgb, Local86);
	float3 Local245 = LWCNormalize(Local244);
	float3 Local246 = cross(Local245,Local91);
	float3 Local247 = normalize(Local246);
	float3 Local248 = RotateAboutAxis(float4(Local247,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float3 Local249 = (Local248 * ((float3)  Local205 ));
	float3 Local250 = (Local249 + ((float3)0.00000000));
	float3 Local251 = (Local250 + ((float3)0.00000000));
	float3 Local252 = (((float3)  Local242 ) * Local251);
	float3 Local253 = (Local243 + Local252);
	float3 Local254 = (((float3)  Local157 ) * Local253);
	float3 Local255 = (Local211 + Local254);
	float3 Local256 = (Local146 + Local255);
	return Local256;;
}
float3 GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
	[branch]
	if (ShouldEnableWorldPositionOffset(Parameters))
	{
		return ClampWorldPositionOffset(Parameters, GetMaterialWorldPositionOffsetRaw(Parameters));
	}
	return float3(0, 0, 0);
}
float3 GetMaterialPreviousWorldPositionOffsetRaw(FMaterialVertexParameters Parameters)
{
	float4 Local30 = MaterialCollection0.Vectors[0];
	float Local31 = max(Local30.g,0.00000000);
	float Local32 = min(Local31,4.00000000);
	float Local33 = (Local32 * 2.50000000);
	float Local34 = (Local33 * 0.03500000);
	float Local35 = (Local33 / 45.00000000);
	float2 Local36 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local35,Local35));
	float Local37 = (Local30.r / 360.00000000);
	float Local38 = (Local37 * 6.28318548);
	float Local39 = cos(Local38);
	float Local40 = sin(Local38);
	float2 Local41 = float2(  Local39 ,  Local40 );
	float3 Local42 = float3(  Local41 ,0.00000000);
	float2 Local43 = Parameters.TexCoords[1].xy;
	float4 Local44 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,  Local43 ,-1.00000000));
	float Local45 = CustomExpression0(Parameters,Local44.a);
	float Local46 = fmod(Local45,Material.PreshaderBuffer[3].x);
	float Local47 = (Local45 * Material.PreshaderBuffer[3].y);
	float Local48 = floor(Local47);
	float2 Local49 = (float2(Local46,Local48) + ((float2)0.50000000));
	float2 Local50 = (Local49 * Material.PreshaderBuffer[3].zw);
	float4 Local51 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local50.r,Local50.g),-1.00000000));
	float Local52 = CustomExpression1(Parameters,Local51.a);
	float Local53 =  select_internal( (abs(Local52 - Local45) > 0.00001000) ,  select_internal( (Local52 >= Local45) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float2 Local54 = (  Local43  * Material.PreshaderBuffer[4].xy);
	float2 Local55 = floor(  Local54 );
	float Local56 = (Local55.g * Material.PreshaderBuffer[3].x);
	float Local57 = (Local55.r + Local56);
	float Local58 =  select_internal( (abs(Local45 - Local57) > 0.00001000) ,  select_internal( (Local45 >= Local57) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local59 = (Local53.r + Local58.r);
	float Local60 = fmod(Local52,Material.PreshaderBuffer[3].x);
	float Local61 = (Local52 * Material.PreshaderBuffer[3].y);
	float Local62 = floor(Local61);
	float2 Local63 = (float2(Local60,Local62) + ((float2)0.50000000));
	float2 Local64 = (Local63 * Material.PreshaderBuffer[3].zw);
	float4 Local65 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local64.r,Local64.g),-1.00000000));
	float Local66 = CustomExpression2(Parameters,Local65.a);
	float Local67 =  select_internal( (abs(Local66 - Local52) > 0.00001000) ,  select_internal( (Local66 >= Local52) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local68 = (Local59 + Local67.r);
	float Local69 = ceil(Local68);
	float Local70 = (Local69 / 3.00000000);
	float Local71 = (Local70 * 3.00000000);
	float Local72 = saturate(Local71);
	float2 Local73 = lerp(  Local43 ,float2(Local50.r,Local50.g),  Local72 );
	float Local74 = (Local71 - 1.00000000);
	float Local75 = saturate(Local74);
	float2 Local76 = lerp(Local73,float2(Local64.r,Local64.g),  Local75 );
	float Local77 = fmod(Local66,Material.PreshaderBuffer[3].x);
	float Local78 = (Local66 * Material.PreshaderBuffer[3].y);
	float Local79 = floor(Local78);
	float2 Local80 = (float2(Local77,Local79) + ((float2)0.50000000));
	float2 Local81 = (Local80 * Material.PreshaderBuffer[3].zw);
	float Local82 = (Local74 - 1.00000000);
	float Local83 = saturate(Local82);
	float2 Local84 = lerp(Local76,float2(Local81.r,Local81.g),  Local83 );
	float4 Local85 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_4,Material_Texture2D_4Sampler,Local84,-1.00000000));
	FLWCVector3 Local86 = LWCMultiply(Local85.rgb, GetInstanceToWorld(Parameters));
	float4 Local87 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_5,Material_Texture2D_5Sampler,Local84,-1.00000000));
	float3 Local88 = (((float3)-0.50000000) + Local87.rgb);
	float3 Local89 = (Local88 * ((float3)2.00000000));
	float3 Local90 = LWCMultiplyVector(Local89, GetInstanceToWorld(Parameters));
	float3 Local91 = normalize(Local90);
	float Local92 = (Local87.a * 2048.00000000);
	float Local93 = max(Local92,8.00000000);
	float3 Local94 = (Local91 * ((float3)Local93));
	FLWCVector3 Local95 = LWCAdd(Local86, Local94);
	FLWCScalar Local96 = LWCDot(LWCPromote(  Local42 ), Local95);
	FLWCScalar Local97 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local95);
	FLWCVector2 Local98 = LWCDivide(MakeLWCVector(LWCPromote(Local96),LWCPromote(Local97)), ((float2)20.00000000));
	FLWCVector2 Local99 = LWCAdd(Local36, Local98);
	float2 Local100 = LWCFrac(Local99);
	float4 Local101 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local100,-1.00000000));
	float Local102 = (Local34 * Local101.a);
	float Local103 = (0.00000000 + Local102);
	float Local104 = dot(  Local42 ,Local91);
	float Local105 = (Local104 + float2(-1.25000000,-0.44400001).r);
	float Local106 = (Local105 * float2(-1.25000000,-0.44400001).g);
	float Local107 = (Local103 * Local106);
	FLWCVector3 Local108 = GetWorldPosition(Parameters);
	FLWCVector3 Local109 = MakeLWCVector( LWCGetComponent(   Local108  , 0),  LWCGetComponent(   Local108  , 1),  LWCGetComponent(   Local108  , 2));
	FLWCVector3 Local110 = LWCSubtract(  Local109 , Local86);
	float3 Local111 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local112 = (((float3)0.00000000) - Local111);
	float Local113 = length(Local112);
	float3 Local114 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local115 = (((float3)0.00000000) - Local114);
	float Local116 = length(Local115);
	float2 Local117 = float2(  Local113 ,  Local116 );
	float3 Local118 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local119 = (((float3)0.00000000) - Local118);
	float Local120 = length(Local119);
	float3 Local121 = float3(  Local117 ,  Local120 );
	float3 Local122 = (LWCToFloat(Local110) /   Local121 );
	float3 Local123 = normalize(Local91);
	float Local124 = dot(Local122,Local123);
	float Local125 = (Material.PreshaderBuffer[4].z * Local93);
	float Local126 = (Local124 / Local125);
	float Local127 = saturate(Local126);
	float Local128 = (Local107 * Local127);
	float Local129 = (Local128 * 6.28318548);
	float Local130 = (Local33 / 30.00000000);
	FLWCVector2 Local131 = LWCDivide(Local99, ((float2)4.00000000));
	float2 Local132 = LWCFrac(Local131);
	float4 Local133 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local132,-1.00000000));
	float3 Local134 = (Local133.rgb - ((float3)0.50000000));
	float3 Local135 = (((float3)Local130) * Local134);
	float Local136 = PositiveClampedPow(Local104,5.00000000);
	float3 Local137 = (((float3)Local136) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local138 = (Local137 +   Local42 );
	float3 Local139 = cross(Local91,Local138);
	float3 Local140 = (Local135 + Local139);
	float3 Local141 = (Local140 - ((float3)0.00000000));
	float Local142 = length(Local141);
	float3 Local143 = (Local140 / ((float3)Local142));
	float3 Local144 = RotateAboutAxis(float4(Local143,Local129),Local86,  Local109 );
	float3 Local145 = (Local144 + ((float3)0.00000000));
	float3 Local146 = (Local145 + ((float3)0.00000000));
	FLWCVector3 Local147 = TransformLocalPositionToWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local148 = LWCSubtract(Local147,   Local109 );
	float3 Local149 = LWCToFloat(  Local148 );
	float Local150 = length(  Local149 );
	float Local151 = (  Local120  * Material.PreshaderBuffer[4].w);
	float Local152 = max(0.00001000,  Local151 );
	float Local153 = (1.00000000 /   Local152 );
	float Local154 = (  Local150  *   Local153 );
	float Local155 = (1.00000000 -   Local154 );
	float Local156 = saturate(  Local155 );
	float Local157 = (1.00000000 -   Local156 );
	float4 Local158 = MaterialCollection1.Vectors[5];
	FLWCVector3 Local159 = LWCSubtract(Local158.rgba.rgb, Local86);
	FLWCScalar Local160 = LWCLength(Local159);
	float4 Local161 = MaterialCollection1.Vectors[1];
	float Local162 = (Material.PreshaderBuffer[5].x * Local161.b);
	float Local163 = max(0.00001000,Local162);
	float Local164 = (1.00000000 / Local163);
	FLWCScalar Local165 = LWCMultiply(Local160, Local164);
	FLWCScalar Local166 = LWCSubtract(1.00000000, Local165);
	FLWCScalar Local167 = LWCMultiply(Local166, 2.00000000);
	float Local168 = LWCSaturate(Local167);
	float4 Local169 = MaterialCollection1.Vectors[3];
	float Local170 = (Local169.r * Material.PreshaderBuffer[5].y);
	float Local171 = (Local168 * Local170);
	float Local172 = (Local171 * 6.28318548);
	float3 Local173 = LWCNormalize(Local159);
	float3 Local174 = cross(Local173,Local91);
	float3 Local175 = normalize(Local174);
	float3 Local176 = RotateAboutAxis(float4(Local175,Local172),Local86,  Local109 );
	float3 Local177 = (Local176 + ((float3)0.00000000));
	float3 Local178 = (Local177 + ((float3)0.00000000));
	float Local179 = (View.GameTime * Material.PreshaderBuffer[5].z);
	float Local180 = (Local179 * 2.09439516);
	float Local181 = sin(Local180);
	float Local182 = (  Local181  * Material.PreshaderBuffer[5].w);
	float3 Local183 = (((float3)  Local182 ) * Local178);
	float4 Local184 = MaterialCollection1.Vectors[6];
	FLWCVector3 Local185 = LWCSubtract(  Local109 , Local184.rgba.rgb);
	FLWCScalar Local186 = LWCLength(  Local185 );
	float Local187 = (Local161.b * Material.PreshaderBuffer[6].x);
	float Local188 = max(0.00001000,Local187);
	float Local189 = (1.00000000 / Local188);
	FLWCScalar Local190 = LWCMultiply(  Local186 , Local189);
	FLWCScalar Local191 = LWCSubtract(1.00000000,   Local190 );
	FLWCScalar Local192 = LWCMultiply(  Local191 , 1.00502515);
	float Local193 = LWCSaturate(  Local192 );
	float4 Local194 = MaterialCollection1.Vectors[0];
	float Local195 = (  Local193  * Local194.r);
	float3 Local196 = lerp(Local178,Local183,  Local195 );
	FLWCVector3 Local197 = LWCSubtract(Local184.rgba.rgb, Local86);
	float3 Local198 = LWCNormalize(Local197);
	float3 Local199 = cross(Local198,Local91);
	float3 Local200 = normalize(Local199);
	float3 Local201 = RotateAboutAxis(float4(Local200,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float Local202 = (View.GameTime * Material.PreshaderBuffer[6].z);
	float Local203 = (Local202 * 2.09439516);
	float Local204 = sin(Local203);
	float Local205 = (  Local204  * Material.PreshaderBuffer[6].w);
	float3 Local206 = (Local201 * ((float3)  Local205 ));
	float3 Local207 = (Local206 + ((float3)0.00000000));
	float3 Local208 = (Local207 + ((float3)0.00000000));
	float3 Local209 = (((float3)  Local195 ) * Local208);
	float3 Local210 = (Local196 + Local209);
	float3 Local211 = (((float3)  Local157 ) * Local210);
	float4 Local212 = MaterialCollection1.Vectors[7];
	FLWCVector3 Local213 = LWCSubtract(Local212.rgba.rgb, Local86);
	FLWCScalar Local214 = LWCLength(Local213);
	float Local215 = (Material.PreshaderBuffer[5].x * Local161.a);
	float Local216 = max(0.00001000,Local215);
	float Local217 = (1.00000000 / Local216);
	FLWCScalar Local218 = LWCMultiply(Local214, Local217);
	FLWCScalar Local219 = LWCSubtract(1.00000000, Local218);
	FLWCScalar Local220 = LWCMultiply(Local219, 2.00000000);
	float Local221 = LWCSaturate(Local220);
	float Local222 = (Local169.g * Material.PreshaderBuffer[5].y);
	float Local223 = (Local221 * Local222);
	float Local224 = (Local223 * 6.28318548);
	float3 Local225 = LWCNormalize(Local213);
	float3 Local226 = cross(Local225,Local91);
	float3 Local227 = normalize(Local226);
	float3 Local228 = RotateAboutAxis(float4(Local227,Local224),Local86,  Local109 );
	float3 Local229 = (Local228 + ((float3)0.00000000));
	float3 Local230 = (Local229 + ((float3)0.00000000));
	float3 Local231 = (((float3)  Local182 ) * Local230);
	float4 Local232 = MaterialCollection1.Vectors[8];
	FLWCVector3 Local233 = LWCSubtract(  Local109 , Local232.rgba.rgb);
	FLWCScalar Local234 = LWCLength(  Local233 );
	float Local235 = (Local161.a * Material.PreshaderBuffer[6].x);
	float Local236 = max(0.00001000,Local235);
	float Local237 = (1.00000000 / Local236);
	FLWCScalar Local238 = LWCMultiply(  Local234 , Local237);
	FLWCScalar Local239 = LWCSubtract(1.00000000,   Local238 );
	FLWCScalar Local240 = LWCMultiply(  Local239 , 1.00502515);
	float Local241 = LWCSaturate(  Local240 );
	float Local242 = (  Local241  * Local194.g);
	float3 Local243 = lerp(Local230,Local231,  Local242 );
	FLWCVector3 Local244 = LWCSubtract(Local232.rgba.rgb, Local86);
	float3 Local245 = LWCNormalize(Local244);
	float3 Local246 = cross(Local245,Local91);
	float3 Local247 = normalize(Local246);
	float3 Local248 = RotateAboutAxis(float4(Local247,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float3 Local249 = (Local248 * ((float3)  Local205 ));
	float3 Local250 = (Local249 + ((float3)0.00000000));
	float3 Local251 = (Local250 + ((float3)0.00000000));
	float3 Local252 = (((float3)  Local242 ) * Local251);
	float3 Local253 = (Local243 + Local252);
	float3 Local254 = (((float3)  Local157 ) * Local253);
	float3 Local255 = (Local211 + Local254);
	float3 Local256 = (Local146 + Local255);
	float2 Local264 = (((float2)fmod(View.PrevFrameGameTime,99999997952.00000000)) * float2(Local35,Local35));
	FLWCVector3 Local265 = LWCMultiply(Local85.rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local266 = LWCMultiplyVector(Local89, GetPrevInstanceToWorld(Parameters));
	float3 Local267 = normalize(Local266);
	float3 Local268 = (Local267 * ((float3)Local93));
	FLWCVector3 Local269 = LWCAdd(Local265, Local268);
	FLWCScalar Local270 = LWCDot(LWCPromote(  Local42 ), Local269);
	FLWCScalar Local271 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local269);
	FLWCVector2 Local272 = LWCDivide(MakeLWCVector(LWCPromote(Local270),LWCPromote(Local271)), ((float2)20.00000000));
	FLWCVector2 Local273 = LWCAdd(Local264, Local272);
	float2 Local274 = LWCFrac(Local273);
	float4 Local275 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local274,-1.00000000));
	float Local276 = (Local34 * Local275.a);
	float Local277 = (0.00000000 + Local276);
	float Local278 = dot(  Local42 ,Local267);
	float Local279 = (Local278 + float2(-1.25000000,-0.44400001).r);
	float Local280 = (Local279 * float2(-1.25000000,-0.44400001).g);
	float Local281 = (Local277 * Local280);
	FLWCVector3 Local282 = GetPrevWorldPosition(Parameters);
	FLWCVector3 Local283 = MakeLWCVector( LWCGetComponent(   Local282  , 0),  LWCGetComponent(   Local282  , 1),  LWCGetComponent(   Local282  , 2));
	FLWCVector3 Local284 = LWCSubtract(  Local283 , Local265);
	float3 Local285 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local286 = (((float3)0.00000000) - Local285);
	float Local287 = length(Local286);
	float3 Local288 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local289 = (((float3)0.00000000) - Local288);
	float Local290 = length(Local289);
	float2 Local291 = float2(  Local287 ,  Local290 );
	float3 Local292 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local293 = (((float3)0.00000000) - Local292);
	float Local294 = length(Local293);
	float3 Local295 = float3(  Local291 ,  Local294 );
	float3 Local296 = (LWCToFloat(Local284) /   Local295 );
	float3 Local297 = normalize(Local267);
	float Local298 = dot(Local296,Local297);
	float Local299 = (Local298 / Local125);
	float Local300 = saturate(Local299);
	float Local301 = (Local281 * Local300);
	float Local302 = (Local301 * 6.28318548);
	FLWCVector2 Local303 = LWCDivide(Local273, ((float2)4.00000000));
	float2 Local304 = LWCFrac(Local303);
	float4 Local305 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local304,-1.00000000));
	float3 Local306 = (Local305.rgb - ((float3)0.50000000));
	float3 Local307 = (((float3)Local130) * Local306);
	float Local308 = PositiveClampedPow(Local278,5.00000000);
	float3 Local309 = (((float3)Local308) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local310 = (Local309 +   Local42 );
	float3 Local311 = cross(Local267,Local310);
	float3 Local312 = (Local307 + Local311);
	float3 Local313 = (Local312 - ((float3)0.00000000));
	float Local314 = length(Local313);
	float3 Local315 = (Local312 / ((float3)Local314));
	float3 Local316 = RotateAboutAxis(float4(Local315,Local302),Local265,  Local283 );
	float3 Local317 = (Local316 + ((float3)0.00000000));
	float3 Local318 = (Local317 + ((float3)0.00000000));
	FLWCVector3 Local319 = TransformLocalPositionToPrevWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local320 = LWCSubtract(Local319,   Local283 );
	float3 Local321 = LWCToFloat(  Local320 );
	float Local322 = length(  Local321 );
	float Local323 = (  Local294  * Material.PreshaderBuffer[4].w);
	float Local324 = max(0.00001000,  Local323 );
	float Local325 = (1.00000000 /   Local324 );
	float Local326 = (  Local322  *   Local325 );
	float Local327 = (1.00000000 -   Local326 );
	float Local328 = saturate(  Local327 );
	float Local329 = (1.00000000 -   Local328 );
	FLWCVector3 Local330 = LWCSubtract(Local158.rgba.rgb, Local265);
	FLWCScalar Local331 = LWCLength(Local330);
	FLWCScalar Local332 = LWCMultiply(Local331, Local164);
	FLWCScalar Local333 = LWCSubtract(1.00000000, Local332);
	FLWCScalar Local334 = LWCMultiply(Local333, 2.00000000);
	float Local335 = LWCSaturate(Local334);
	float Local336 = (Local335 * Local170);
	float Local337 = (Local336 * 6.28318548);
	float3 Local338 = LWCNormalize(Local330);
	float3 Local339 = cross(Local338,Local267);
	float3 Local340 = normalize(Local339);
	float3 Local341 = RotateAboutAxis(float4(Local340,Local337),Local265,  Local283 );
	float3 Local342 = (Local341 + ((float3)0.00000000));
	float3 Local343 = (Local342 + ((float3)0.00000000));
	float Local344 = (View.PrevFrameGameTime * Material.PreshaderBuffer[5].z);
	float Local345 = (Local344 * 2.09439516);
	float Local346 = sin(Local345);
	float Local347 = (  Local346  * Material.PreshaderBuffer[5].w);
	float3 Local348 = (((float3)  Local347 ) * Local343);
	FLWCVector3 Local349 = LWCSubtract(  Local283 , Local184.rgba.rgb);
	FLWCScalar Local350 = LWCLength(  Local349 );
	FLWCScalar Local351 = LWCMultiply(  Local350 , Local189);
	FLWCScalar Local352 = LWCSubtract(1.00000000,   Local351 );
	FLWCScalar Local353 = LWCMultiply(  Local352 , 1.00502515);
	float Local354 = LWCSaturate(  Local353 );
	float Local355 = (  Local354  * Local194.r);
	float3 Local356 = lerp(Local343,Local348,  Local355 );
	FLWCVector3 Local357 = LWCSubtract(Local184.rgba.rgb, Local265);
	float3 Local358 = LWCNormalize(Local357);
	float3 Local359 = cross(Local358,Local267);
	float3 Local360 = normalize(Local359);
	float3 Local361 = RotateAboutAxis(float4(Local360,Material.PreshaderBuffer[6].y),Local265,  Local283 );
	float Local362 = (View.PrevFrameGameTime * Material.PreshaderBuffer[6].z);
	float Local363 = (Local362 * 2.09439516);
	float Local364 = sin(Local363);
	float Local365 = (  Local364  * Material.PreshaderBuffer[6].w);
	float3 Local366 = (Local361 * ((float3)  Local365 ));
	float3 Local367 = (Local366 + ((float3)0.00000000));
	float3 Local368 = (Local367 + ((float3)0.00000000));
	float3 Local369 = (((float3)  Local355 ) * Local368);
	float3 Local370 = (Local356 + Local369);
	float3 Local371 = (((float3)  Local329 ) * Local370);
	FLWCVector3 Local372 = LWCSubtract(Local212.rgba.rgb, Local265);
	FLWCScalar Local373 = LWCLength(Local372);
	FLWCScalar Local374 = LWCMultiply(Local373, Local217);
	FLWCScalar Local375 = LWCSubtract(1.00000000, Local374);
	FLWCScalar Local376 = LWCMultiply(Local375, 2.00000000);
	float Local377 = LWCSaturate(Local376);
	float Local378 = (Local377 * Local222);
	float Local379 = (Local378 * 6.28318548);
	float3 Local380 = LWCNormalize(Local372);
	float3 Local381 = cross(Local380,Local267);
	float3 Local382 = normalize(Local381);
	float3 Local383 = RotateAboutAxis(float4(Local382,Local379),Local265,  Local283 );
	float3 Local384 = (Local383 + ((float3)0.00000000));
	float3 Local385 = (Local384 + ((float3)0.00000000));
	float3 Local386 = (((float3)  Local347 ) * Local385);
	FLWCVector3 Local387 = LWCSubtract(  Local283 , Local232.rgba.rgb);
	FLWCScalar Local388 = LWCLength(  Local387 );
	FLWCScalar Local389 = LWCMultiply(  Local388 , Local237);
	FLWCScalar Local390 = LWCSubtract(1.00000000,   Local389 );
	FLWCScalar Local391 = LWCMultiply(  Local390 , 1.00502515);
	float Local392 = LWCSaturate(  Local391 );
	float Local393 = (  Local392  * Local194.g);
	float3 Local394 = lerp(Local385,Local386,  Local393 );
	FLWCVector3 Local395 = LWCSubtract(Local232.rgba.rgb, Local265);
	float3 Local396 = LWCNormalize(Local395);
	float3 Local397 = cross(Local396,Local267);
	float3 Local398 = normalize(Local397);
	float3 Local399 = RotateAboutAxis(float4(Local398,Material.PreshaderBuffer[6].y),Local265,  Local283 );
	float3 Local400 = (Local399 * ((float3)  Local365 ));
	float3 Local401 = (Local400 + ((float3)0.00000000));
	float3 Local402 = (Local401 + ((float3)0.00000000));
	float3 Local403 = (((float3)  Local393 ) * Local402);
	float3 Local404 = (Local394 + Local403);
	float3 Local405 = (((float3)  Local329 ) * Local404);
	float3 Local406 = (Local371 + Local405);
	float3 Local407 = (Local318 + Local406);
	float2 Local408 = Parameters.TexCoords[0].xy;
	return Local407;;
}
float3 GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
	[branch]
	if (ShouldEnableWorldPositionOffset(Parameters))
	{
		return ClampWorldPositionOffset(Parameters, GetMaterialPreviousWorldPositionOffsetRaw(Parameters));
	}
	return float3(0, 0, 0);
}
float4 GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}
float4 GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4 OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}
float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}
float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}
void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{
	float4 Local30 = MaterialCollection0.Vectors[0];
	float Local31 = max(Local30.g,0.00000000);
	float Local32 = min(Local31,4.00000000);
	float Local33 = (Local32 * 2.50000000);
	float Local34 = (Local33 * 0.03500000);
	float Local35 = (Local33 / 45.00000000);
	float2 Local36 = (((float2)fmod(View.GameTime,99999997952.00000000)) * float2(Local35,Local35));
	float Local37 = (Local30.r / 360.00000000);
	float Local38 = (Local37 * 6.28318548);
	float Local39 = cos(Local38);
	float Local40 = sin(Local38);
	float2 Local41 = float2(  Local39 ,  Local40 );
	float3 Local42 = float3(  Local41 ,0.00000000);
	float2 Local43 = Parameters.TexCoords[1].xy;
	float4 Local44 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,  Local43 ,-1.00000000));
	float Local45 = CustomExpression0(Parameters,Local44.a);
	float Local46 = fmod(Local45,Material.PreshaderBuffer[3].x);
	float Local47 = (Local45 * Material.PreshaderBuffer[3].y);
	float Local48 = floor(Local47);
	float2 Local49 = (float2(Local46,Local48) + ((float2)0.50000000));
	float2 Local50 = (Local49 * Material.PreshaderBuffer[3].zw);
	float4 Local51 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local50.r,Local50.g),-1.00000000));
	float Local52 = CustomExpression1(Parameters,Local51.a);
	float Local53 =  select_internal( (abs(Local52 - Local45) > 0.00001000) ,  select_internal( (Local52 >= Local45) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float2 Local54 = (  Local43  * Material.PreshaderBuffer[4].xy);
	float2 Local55 = floor(  Local54 );
	float Local56 = (Local55.g * Material.PreshaderBuffer[3].x);
	float Local57 = (Local55.r + Local56);
	float Local58 =  select_internal( (abs(Local45 - Local57) > 0.00001000) ,  select_internal( (Local45 >= Local57) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local59 = (Local53.r + Local58.r);
	float Local60 = fmod(Local52,Material.PreshaderBuffer[3].x);
	float Local61 = (Local52 * Material.PreshaderBuffer[3].y);
	float Local62 = floor(Local61);
	float2 Local63 = (float2(Local60,Local62) + ((float2)0.50000000));
	float2 Local64 = (Local63 * Material.PreshaderBuffer[3].zw);
	float4 Local65 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_3,Material_Texture2D_3Sampler,float2(Local64.r,Local64.g),-1.00000000));
	float Local66 = CustomExpression2(Parameters,Local65.a);
	float Local67 =  select_internal( (abs(Local66 - Local52) > 0.00001000) ,  select_internal( (Local66 >= Local52) , 1.00000000 , 1.00000000 ) , 0.00000000 );
	float Local68 = (Local59 + Local67.r);
	float Local69 = ceil(Local68);
	float Local70 = (Local69 / 3.00000000);
	float Local71 = (Local70 * 3.00000000);
	float Local72 = saturate(Local71);
	float2 Local73 = lerp(  Local43 ,float2(Local50.r,Local50.g),  Local72 );
	float Local74 = (Local71 - 1.00000000);
	float Local75 = saturate(Local74);
	float2 Local76 = lerp(Local73,float2(Local64.r,Local64.g),  Local75 );
	float Local77 = fmod(Local66,Material.PreshaderBuffer[3].x);
	float Local78 = (Local66 * Material.PreshaderBuffer[3].y);
	float Local79 = floor(Local78);
	float2 Local80 = (float2(Local77,Local79) + ((float2)0.50000000));
	float2 Local81 = (Local80 * Material.PreshaderBuffer[3].zw);
	float Local82 = (Local74 - 1.00000000);
	float Local83 = saturate(Local82);
	float2 Local84 = lerp(Local76,float2(Local81.r,Local81.g),  Local83 );
	float4 Local85 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_4,Material_Texture2D_4Sampler,Local84,-1.00000000));
	FLWCVector3 Local86 = LWCMultiply(Local85.rgb, GetInstanceToWorld(Parameters));
	float4 Local87 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_5,Material_Texture2D_5Sampler,Local84,-1.00000000));
	float3 Local88 = (((float3)-0.50000000) + Local87.rgb);
	float3 Local89 = (Local88 * ((float3)2.00000000));
	float3 Local90 = LWCMultiplyVector(Local89, GetInstanceToWorld(Parameters));
	float3 Local91 = normalize(Local90);
	float Local92 = (Local87.a * 2048.00000000);
	float Local93 = max(Local92,8.00000000);
	float3 Local94 = (Local91 * ((float3)Local93));
	FLWCVector3 Local95 = LWCAdd(Local86, Local94);
	FLWCScalar Local96 = LWCDot(LWCPromote(  Local42 ), Local95);
	FLWCScalar Local97 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local95);
	FLWCVector2 Local98 = LWCDivide(MakeLWCVector(LWCPromote(Local96),LWCPromote(Local97)), ((float2)20.00000000));
	FLWCVector2 Local99 = LWCAdd(Local36, Local98);
	float2 Local100 = LWCFrac(Local99);
	float4 Local101 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local100,-1.00000000));
	float Local102 = (Local34 * Local101.a);
	float Local103 = (0.00000000 + Local102);
	float Local104 = dot(  Local42 ,Local91);
	float Local105 = (Local104 + float2(-1.25000000,-0.44400001).r);
	float Local106 = (Local105 * float2(-1.25000000,-0.44400001).g);
	float Local107 = (Local103 * Local106);
	FLWCVector3 Local108 = GetWorldPosition(Parameters);
	FLWCVector3 Local109 = MakeLWCVector( LWCGetComponent(   Local108  , 0),  LWCGetComponent(   Local108  , 1),  LWCGetComponent(   Local108  , 2));
	FLWCVector3 Local110 = LWCSubtract(  Local109 , Local86);
	float3 Local111 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local112 = (((float3)0.00000000) - Local111);
	float Local113 = length(Local112);
	float3 Local114 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local115 = (((float3)0.00000000) - Local114);
	float Local116 = length(Local115);
	float2 Local117 = float2(  Local113 ,  Local116 );
	float3 Local118 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetInstanceToWorld(Parameters));
	float3 Local119 = (((float3)0.00000000) - Local118);
	float Local120 = length(Local119);
	float3 Local121 = float3(  Local117 ,  Local120 );
	float3 Local122 = (LWCToFloat(Local110) /   Local121 );
	float3 Local123 = normalize(Local91);
	float Local124 = dot(Local122,Local123);
	float Local125 = (Material.PreshaderBuffer[4].z * Local93);
	float Local126 = (Local124 / Local125);
	float Local127 = saturate(Local126);
	float Local128 = (Local107 * Local127);
	float Local129 = (Local128 * 6.28318548);
	float Local130 = (Local33 / 30.00000000);
	FLWCVector2 Local131 = LWCDivide(Local99, ((float2)4.00000000));
	float2 Local132 = LWCFrac(Local131);
	float4 Local133 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local132,-1.00000000));
	float3 Local134 = (Local133.rgb - ((float3)0.50000000));
	float3 Local135 = (((float3)Local130) * Local134);
	float Local136 = PositiveClampedPow(Local104,5.00000000);
	float3 Local137 = (((float3)Local136) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local138 = (Local137 +   Local42 );
	float3 Local139 = cross(Local91,Local138);
	float3 Local140 = (Local135 + Local139);
	float3 Local141 = (Local140 - ((float3)0.00000000));
	float Local142 = length(Local141);
	float3 Local143 = (Local140 / ((float3)Local142));
	float3 Local144 = RotateAboutAxis(float4(Local143,Local129),Local86,  Local109 );
	float3 Local145 = (Local144 + ((float3)0.00000000));
	float3 Local146 = (Local145 + ((float3)0.00000000));
	FLWCVector3 Local147 = TransformLocalPositionToWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local148 = LWCSubtract(Local147,   Local109 );
	float3 Local149 = LWCToFloat(  Local148 );
	float Local150 = length(  Local149 );
	float Local151 = (  Local120  * Material.PreshaderBuffer[4].w);
	float Local152 = max(0.00001000,  Local151 );
	float Local153 = (1.00000000 /   Local152 );
	float Local154 = (  Local150  *   Local153 );
	float Local155 = (1.00000000 -   Local154 );
	float Local156 = saturate(  Local155 );
	float Local157 = (1.00000000 -   Local156 );
	float4 Local158 = MaterialCollection1.Vectors[5];
	FLWCVector3 Local159 = LWCSubtract(Local158.rgba.rgb, Local86);
	FLWCScalar Local160 = LWCLength(Local159);
	float4 Local161 = MaterialCollection1.Vectors[1];
	float Local162 = (Material.PreshaderBuffer[5].x * Local161.b);
	float Local163 = max(0.00001000,Local162);
	float Local164 = (1.00000000 / Local163);
	FLWCScalar Local165 = LWCMultiply(Local160, Local164);
	FLWCScalar Local166 = LWCSubtract(1.00000000, Local165);
	FLWCScalar Local167 = LWCMultiply(Local166, 2.00000000);
	float Local168 = LWCSaturate(Local167);
	float4 Local169 = MaterialCollection1.Vectors[3];
	float Local170 = (Local169.r * Material.PreshaderBuffer[5].y);
	float Local171 = (Local168 * Local170);
	float Local172 = (Local171 * 6.28318548);
	float3 Local173 = LWCNormalize(Local159);
	float3 Local174 = cross(Local173,Local91);
	float3 Local175 = normalize(Local174);
	float3 Local176 = RotateAboutAxis(float4(Local175,Local172),Local86,  Local109 );
	float3 Local177 = (Local176 + ((float3)0.00000000));
	float3 Local178 = (Local177 + ((float3)0.00000000));
	float Local179 = (View.GameTime * Material.PreshaderBuffer[5].z);
	float Local180 = (Local179 * 2.09439516);
	float Local181 = sin(Local180);
	float Local182 = (  Local181  * Material.PreshaderBuffer[5].w);
	float3 Local183 = (((float3)  Local182 ) * Local178);
	float4 Local184 = MaterialCollection1.Vectors[6];
	FLWCVector3 Local185 = LWCSubtract(  Local109 , Local184.rgba.rgb);
	FLWCScalar Local186 = LWCLength(  Local185 );
	float Local187 = (Local161.b * Material.PreshaderBuffer[6].x);
	float Local188 = max(0.00001000,Local187);
	float Local189 = (1.00000000 / Local188);
	FLWCScalar Local190 = LWCMultiply(  Local186 , Local189);
	FLWCScalar Local191 = LWCSubtract(1.00000000,   Local190 );
	FLWCScalar Local192 = LWCMultiply(  Local191 , 1.00502515);
	float Local193 = LWCSaturate(  Local192 );
	float4 Local194 = MaterialCollection1.Vectors[0];
	float Local195 = (  Local193  * Local194.r);
	float3 Local196 = lerp(Local178,Local183,  Local195 );
	FLWCVector3 Local197 = LWCSubtract(Local184.rgba.rgb, Local86);
	float3 Local198 = LWCNormalize(Local197);
	float3 Local199 = cross(Local198,Local91);
	float3 Local200 = normalize(Local199);
	float3 Local201 = RotateAboutAxis(float4(Local200,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float Local202 = (View.GameTime * Material.PreshaderBuffer[6].z);
	float Local203 = (Local202 * 2.09439516);
	float Local204 = sin(Local203);
	float Local205 = (  Local204  * Material.PreshaderBuffer[6].w);
	float3 Local206 = (Local201 * ((float3)  Local205 ));
	float3 Local207 = (Local206 + ((float3)0.00000000));
	float3 Local208 = (Local207 + ((float3)0.00000000));
	float3 Local209 = (((float3)  Local195 ) * Local208);
	float3 Local210 = (Local196 + Local209);
	float3 Local211 = (((float3)  Local157 ) * Local210);
	float4 Local212 = MaterialCollection1.Vectors[7];
	FLWCVector3 Local213 = LWCSubtract(Local212.rgba.rgb, Local86);
	FLWCScalar Local214 = LWCLength(Local213);
	float Local215 = (Material.PreshaderBuffer[5].x * Local161.a);
	float Local216 = max(0.00001000,Local215);
	float Local217 = (1.00000000 / Local216);
	FLWCScalar Local218 = LWCMultiply(Local214, Local217);
	FLWCScalar Local219 = LWCSubtract(1.00000000, Local218);
	FLWCScalar Local220 = LWCMultiply(Local219, 2.00000000);
	float Local221 = LWCSaturate(Local220);
	float Local222 = (Local169.g * Material.PreshaderBuffer[5].y);
	float Local223 = (Local221 * Local222);
	float Local224 = (Local223 * 6.28318548);
	float3 Local225 = LWCNormalize(Local213);
	float3 Local226 = cross(Local225,Local91);
	float3 Local227 = normalize(Local226);
	float3 Local228 = RotateAboutAxis(float4(Local227,Local224),Local86,  Local109 );
	float3 Local229 = (Local228 + ((float3)0.00000000));
	float3 Local230 = (Local229 + ((float3)0.00000000));
	float3 Local231 = (((float3)  Local182 ) * Local230);
	float4 Local232 = MaterialCollection1.Vectors[8];
	FLWCVector3 Local233 = LWCSubtract(  Local109 , Local232.rgba.rgb);
	FLWCScalar Local234 = LWCLength(  Local233 );
	float Local235 = (Local161.a * Material.PreshaderBuffer[6].x);
	float Local236 = max(0.00001000,Local235);
	float Local237 = (1.00000000 / Local236);
	FLWCScalar Local238 = LWCMultiply(  Local234 , Local237);
	FLWCScalar Local239 = LWCSubtract(1.00000000,   Local238 );
	FLWCScalar Local240 = LWCMultiply(  Local239 , 1.00502515);
	float Local241 = LWCSaturate(  Local240 );
	float Local242 = (  Local241  * Local194.g);
	float3 Local243 = lerp(Local230,Local231,  Local242 );
	FLWCVector3 Local244 = LWCSubtract(Local232.rgba.rgb, Local86);
	float3 Local245 = LWCNormalize(Local244);
	float3 Local246 = cross(Local245,Local91);
	float3 Local247 = normalize(Local246);
	float3 Local248 = RotateAboutAxis(float4(Local247,Material.PreshaderBuffer[6].y),Local86,  Local109 );
	float3 Local249 = (Local248 * ((float3)  Local205 ));
	float3 Local250 = (Local249 + ((float3)0.00000000));
	float3 Local251 = (Local250 + ((float3)0.00000000));
	float3 Local252 = (((float3)  Local242 ) * Local251);
	float3 Local253 = (Local243 + Local252);
	float3 Local254 = (((float3)  Local157 ) * Local253);
	float3 Local255 = (Local211 + Local254);
	float3 Local256 = (Local146 + Local255);
	float2 Local264 = (((float2)fmod(View.PrevFrameGameTime,99999997952.00000000)) * float2(Local35,Local35));
	FLWCVector3 Local265 = LWCMultiply(Local85.rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local266 = LWCMultiplyVector(Local89, GetPrevInstanceToWorld(Parameters));
	float3 Local267 = normalize(Local266);
	float3 Local268 = (Local267 * ((float3)Local93));
	FLWCVector3 Local269 = LWCAdd(Local265, Local268);
	FLWCScalar Local270 = LWCDot(LWCPromote(  Local42 ), Local269);
	FLWCScalar Local271 = LWCDot(LWCPromote(float3(0.00000000,1.00000000,0.00000000).rgb), Local269);
	FLWCVector2 Local272 = LWCDivide(MakeLWCVector(LWCPromote(Local270),LWCPromote(Local271)), ((float2)20.00000000));
	FLWCVector2 Local273 = LWCAdd(Local264, Local272);
	float2 Local274 = LWCFrac(Local273);
	float4 Local275 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local274,-1.00000000));
	float Local276 = (Local34 * Local275.a);
	float Local277 = (0.00000000 + Local276);
	float Local278 = dot(  Local42 ,Local267);
	float Local279 = (Local278 + float2(-1.25000000,-0.44400001).r);
	float Local280 = (Local279 * float2(-1.25000000,-0.44400001).g);
	float Local281 = (Local277 * Local280);
	FLWCVector3 Local282 = GetPrevWorldPosition(Parameters);
	FLWCVector3 Local283 = MakeLWCVector( LWCGetComponent(   Local282  , 0),  LWCGetComponent(   Local282  , 1),  LWCGetComponent(   Local282  , 2));
	FLWCVector3 Local284 = LWCSubtract(  Local283 , Local265);
	float3 Local285 = LWCMultiplyVector(float3(1.00000000,0.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local286 = (((float3)0.00000000) - Local285);
	float Local287 = length(Local286);
	float3 Local288 = LWCMultiplyVector(float3(0.00000000,1.00000000,0.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local289 = (((float3)0.00000000) - Local288);
	float Local290 = length(Local289);
	float2 Local291 = float2(  Local287 ,  Local290 );
	float3 Local292 = LWCMultiplyVector(float3(0.00000000,0.00000000,1.00000000).rgb, GetPrevInstanceToWorld(Parameters));
	float3 Local293 = (((float3)0.00000000) - Local292);
	float Local294 = length(Local293);
	float3 Local295 = float3(  Local291 ,  Local294 );
	float3 Local296 = (LWCToFloat(Local284) /   Local295 );
	float3 Local297 = normalize(Local267);
	float Local298 = dot(Local296,Local297);
	float Local299 = (Local298 / Local125);
	float Local300 = saturate(Local299);
	float Local301 = (Local281 * Local300);
	float Local302 = (Local301 * 6.28318548);
	FLWCVector2 Local303 = LWCDivide(Local273, ((float2)4.00000000));
	float2 Local304 = LWCFrac(Local303);
	float4 Local305 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_6,Material_Texture2D_6Sampler,Local304,-1.00000000));
	float3 Local306 = (Local305.rgb - ((float3)0.50000000));
	float3 Local307 = (((float3)Local130) * Local306);
	float Local308 = PositiveClampedPow(Local278,5.00000000);
	float3 Local309 = (((float3)Local308) * float3(0.00000000,0.00000000,-0.20000000).rgb);
	float3 Local310 = (Local309 +   Local42 );
	float3 Local311 = cross(Local267,Local310);
	float3 Local312 = (Local307 + Local311);
	float3 Local313 = (Local312 - ((float3)0.00000000));
	float Local314 = length(Local313);
	float3 Local315 = (Local312 / ((float3)Local314));
	float3 Local316 = RotateAboutAxis(float4(Local315,Local302),Local265,  Local283 );
	float3 Local317 = (Local316 + ((float3)0.00000000));
	float3 Local318 = (Local317 + ((float3)0.00000000));
	FLWCVector3 Local319 = TransformLocalPositionToPrevWorld(Parameters, float3(0.00000000,0.00000000,0.00000000).rgb);
	FLWCVector3 Local320 = LWCSubtract(Local319,   Local283 );
	float3 Local321 = LWCToFloat(  Local320 );
	float Local322 = length(  Local321 );
	float Local323 = (  Local294  * Material.PreshaderBuffer[4].w);
	float Local324 = max(0.00001000,  Local323 );
	float Local325 = (1.00000000 /   Local324 );
	float Local326 = (  Local322  *   Local325 );
	float Local327 = (1.00000000 -   Local326 );
	float Local328 = saturate(  Local327 );
	float Local329 = (1.00000000 -   Local328 );
	FLWCVector3 Local330 = LWCSubtract(Local158.rgba.rgb, Local265);
	FLWCScalar Local331 = LWCLength(Local330);
	FLWCScalar Local332 = LWCMultiply(Local331, Local164);
	FLWCScalar Local333 = LWCSubtract(1.00000000, Local332);
	FLWCScalar Local334 = LWCMultiply(Local333, 2.00000000);
	float Local335 = LWCSaturate(Local334);
	float Local336 = (Local335 * Local170);
	float Local337 = (Local336 * 6.28318548);
	float3 Local338 = LWCNormalize(Local330);
	float3 Local339 = cross(Local338,Local267);
	float3 Local340 = normalize(Local339);
	float3 Local341 = RotateAboutAxis(float4(Local340,Local337),Local265,  Local283 );
	float3 Local342 = (Local341 + ((float3)0.00000000));
	float3 Local343 = (Local342 + ((float3)0.00000000));
	float Local344 = (View.PrevFrameGameTime * Material.PreshaderBuffer[5].z);
	float Local345 = (Local344 * 2.09439516);
	float Local346 = sin(Local345);
	float Local347 = (  Local346  * Material.PreshaderBuffer[5].w);
	float3 Local348 = (((float3)  Local347 ) * Local343);
	FLWCVector3 Local349 = LWCSubtract(  Local283 , Local184.rgba.rgb);
	FLWCScalar Local350 = LWCLength(  Local349 );
	FLWCScalar Local351 = LWCMultiply(  Local350 , Local189);
	FLWCScalar Local352 = LWCSubtract(1.00000000,   Local351 );
	FLWCScalar Local353 = LWCMultiply(  Local352 , 1.00502515);
	float Local354 = LWCSaturate(  Local353 );
	float Local355 = (  Local354  * Local194.r);
	float3 Local356 = lerp(Local343,Local348,  Local355 );
	FLWCVector3 Local357 = LWCSubtract(Local184.rgba.rgb, Local265);
	float3 Local358 = LWCNormalize(Local357);
	float3 Local359 = cross(Local358,Local267);
	float3 Local360 = normalize(Local359);
	float3 Local361 = RotateAboutAxis(float4(Local360,Material.PreshaderBuffer[6].y),Local265,  Local283 );
	float Local362 = (View.PrevFrameGameTime * Material.PreshaderBuffer[6].z);
	float Local363 = (Local362 * 2.09439516);
	float Local364 = sin(Local363);
	float Local365 = (  Local364  * Material.PreshaderBuffer[6].w);
	float3 Local366 = (Local361 * ((float3)  Local365 ));
	float3 Local367 = (Local366 + ((float3)0.00000000));
	float3 Local368 = (Local367 + ((float3)0.00000000));
	float3 Local369 = (((float3)  Local355 ) * Local368);
	float3 Local370 = (Local356 + Local369);
	float3 Local371 = (((float3)  Local329 ) * Local370);
	FLWCVector3 Local372 = LWCSubtract(Local212.rgba.rgb, Local265);
	FLWCScalar Local373 = LWCLength(Local372);
	FLWCScalar Local374 = LWCMultiply(Local373, Local217);
	FLWCScalar Local375 = LWCSubtract(1.00000000, Local374);
	FLWCScalar Local376 = LWCMultiply(Local375, 2.00000000);
	float Local377 = LWCSaturate(Local376);
	float Local378 = (Local377 * Local222);
	float Local379 = (Local378 * 6.28318548);
	float3 Local380 = LWCNormalize(Local372);
	float3 Local381 = cross(Local380,Local267);
	float3 Local382 = normalize(Local381);
	float3 Local383 = RotateAboutAxis(float4(Local382,Local379),Local265,  Local283 );
	float3 Local384 = (Local383 + ((float3)0.00000000));
	float3 Local385 = (Local384 + ((float3)0.00000000));
	float3 Local386 = (((float3)  Local347 ) * Local385);
	FLWCVector3 Local387 = LWCSubtract(  Local283 , Local232.rgba.rgb);
	FLWCScalar Local388 = LWCLength(  Local387 );
	FLWCScalar Local389 = LWCMultiply(  Local388 , Local237);
	FLWCScalar Local390 = LWCSubtract(1.00000000,   Local389 );
	FLWCScalar Local391 = LWCMultiply(  Local390 , 1.00502515);
	float Local392 = LWCSaturate(  Local391 );
	float Local393 = (  Local392  * Local194.g);
	float3 Local394 = lerp(Local385,Local386,  Local393 );
	FLWCVector3 Local395 = LWCSubtract(Local232.rgba.rgb, Local265);
	float3 Local396 = LWCNormalize(Local395);
	float3 Local397 = cross(Local396,Local267);
	float3 Local398 = normalize(Local397);
	float3 Local399 = RotateAboutAxis(float4(Local398,Material.PreshaderBuffer[6].y),Local265,  Local283 );
	float3 Local400 = (Local399 * ((float3)  Local365 ));
	float3 Local401 = (Local400 + ((float3)0.00000000));
	float3 Local402 = (Local401 + ((float3)0.00000000));
	float3 Local403 = (((float3)  Local393 ) * Local402);
	float3 Local404 = (Local394 + Local403);
	float3 Local405 = (((float3)  Local329 ) * Local404);
	float3 Local406 = (Local371 + Local405);
	float3 Local407 = (Local318 + Local406);
	float2 Local408 = Parameters.TexCoords[0].xy;
	OutTexCoords[0] = Local408;
}
void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[1])
{
}
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	float2 Local0 = Parameters.TexCoords[0].xy;
	float Local1 =  1.0f;
	float4 Local2 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_0,Material_Texture2D_0Sampler,  Local0 ,View.MaterialTextureMipBias));
	float Local3 =  1.0f;
	float3 Local4 = (Local2.rgb * ((float3)Parameters.TwoSidedSign));
	float3 Local5 = lerp(Local4,float3(0.00000000,0.00000000,1.00000000).rgb,Material.PreshaderBuffer[0].x);
	PixelMaterialInputs.Normal = Local5;
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
	MaterialNormal = normalize(MaterialNormal);
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
	Parameters.WorldNormal *= Parameters.TwoSidedSign;
	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);
	Parameters.Particle.MotionBlurFade = 1.0f;
	float3 Local6 = lerp(float3(0.00000000,0.00000000,0.00000000),Material.PreshaderBuffer[1].xyz,Material.PreshaderBuffer[0].y);
	float3 Local7 = (float3(100.00000000,10.00000000,1.00000000).rgb * ((float3)GetPerInstanceRandom(Parameters)));
	FLWCVector3 Local8 = LWCMultiply(GetObjectWorldPosition(Parameters), ((float3)0.01000000));
	FLWCVector3 Local9 = LWCAdd(Local7, Local8);
	float3 Local10 = LWCFrac(Local9);
	float2 Local11 =   Local10 .rg;
	float2 Local12 =   Local10 .gb;
	float Local13 = dot(  Local11 ,  Local12 );
	float Local14 = (-0.50000000 +   Local13 );
	float Local15 = (  Local14  * 2.00000000);
	float Local16 = (Material.PreshaderBuffer[1].w *   Local15 );
	float3 Local17 = normalize(  Local10 );
	float3 Local18 = (((float3)  Local16 ) *   Local17 );
	float Local19 =  1.0f;
	float4 Local20 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_1,Material_Texture2D_1Sampler,  Local0 ,View.MaterialTextureMipBias));
	float Local21 =  1.0f;
	float3 Local22 = (Local20.rgb * ((float3)Material.PreshaderBuffer[2].x));
	float Local23 = dot(Local22,float3(0.30000001,0.58999997,0.11000000));
	float3 Local24 = lerp(Local22,((float3)Local23),Material.PreshaderBuffer[2].y);
	float3 Local25 = (  Local18  + Local24);
	float Local26 =  1.0f;
	float4 Local27 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_2,Material_Texture2D_2Sampler,  Local0 ,View.MaterialTextureMipBias));
	float Local28 =  1.0f;
	float Local29 = (Local27.g * Material.PreshaderBuffer[2].w);
	float Local257 = (Material.PreshaderBuffer[7].x *   Local15 );
	float3 Local258 = (((float3)  Local257 ) *   Local17 );
	float3 Local259 = (Local20.rgb * ((float3)Material.PreshaderBuffer[7].y));
	float Local260 = dot(Local259,float3(0.30000001,0.58999997,0.11000000));
	float3 Local261 = lerp(Local259,((float3)Local260),Material.PreshaderBuffer[7].z);
	float3 Local262 = (  Local258  + Local261);
	float Local263 = (Local27.r * Material.PreshaderBuffer[8].x);
	PixelMaterialInputs.EmissiveColor = Local6;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = Local27.b;
	PixelMaterialInputs.BaseColor = Local25;
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = Material.PreshaderBuffer[2].z;
	PixelMaterialInputs.Roughness = Local29;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Local5;
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = float4(Local262,Material.PreshaderBuffer[7].w);
	PixelMaterialInputs.AmbientOcclusion = Local263;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 6;
	PixelMaterialInputs.FrontMaterial = GetInitialisedSubstrateData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.50000000;
	Parameters.WorldTangent = 0;
}
void CalcPixelMaterialInputsAnalyticDerivatives(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	FloatDeriv2 Local0 = ConstructFloatDeriv2(Parameters.TexCoords[0].xy,Parameters.TexCoords_DDX[0].xy,Parameters.TexCoords_DDY[0].xy);
	float Local1 =  1.0f;
	float4 Local2 = UnpackNormalMap(Texture2DSampleGrad(Material_Texture2D_0,Material_Texture2D_0Sampler,  Local0 .Value,(Local0.Ddx)*exp2(View.MaterialTextureMipBias),(Local0.Ddy)*exp2(View.MaterialTextureMipBias)));
	float Local3 =  1.0f;
	float3 Local4 = (Local2.rgb * ((float3)Parameters.TwoSidedSign));
	float3 Local5 = lerp(Local4,float3(0.00000000,0.00000000,1.00000000).rgb,Material.PreshaderBuffer[0].x);
	PixelMaterialInputs.Normal = Local5;
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
	MaterialNormal = normalize(MaterialNormal);
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
	Parameters.WorldNormal *= Parameters.TwoSidedSign;
	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);
	Parameters.Particle.MotionBlurFade = 1.0f;
	float3 Local6 = lerp(float3(0.00000000,0.00000000,0.00000000),Material.PreshaderBuffer[1].xyz,Material.PreshaderBuffer[0].y);
	float3 Local7 = (float3(100.00000000,10.00000000,1.00000000).rgb * ((float3)GetPerInstanceRandom(Parameters)));
	FLWCVector3 Local8 = LWCMultiply(GetObjectWorldPosition(Parameters), ((float3)0.01000000));
	FLWCVector3 Local9 = LWCAdd(Local7, Local8);
	FloatDeriv3 Local10 = FracDerivLWC(ConstructConstantFWSVector3Deriv(Local9));
	FloatDeriv2 Local11 = ConstructFloatDeriv2(Local10.Value.rg,Local10.Ddx.rg,Local10.Ddy.rg);
	FloatDeriv2 Local12 = ConstructFloatDeriv2(Local10.Value.gb,Local10.Ddx.gb,Local10.Ddy.gb);
	FloatDeriv Local13 = DotDeriv(Local11,Local12);
	FloatDeriv Local14 = AddDeriv(ConstructConstantFloatDeriv(-0.50000000),Local13);
	FloatDeriv Local15 = MulDeriv(Local14,ConstructConstantFloatDeriv(2.00000000));
	FloatDeriv Local16 = MulDeriv(ConstructConstantFloatDeriv(Material.PreshaderBuffer[1].w),Local15);
	FloatDeriv3 Local17 = NormalizeDeriv(Local10);
	FloatDeriv3 Local18 = MulDeriv(Convert_FloatDeriv3_FloatDeriv(Local16),Local17);
	float Local19 =  1.0f;
	float4 Local20 = ProcessMaterialColorTextureLookup(Texture2DSampleGrad(Material_Texture2D_1,Material_Texture2D_1Sampler,  Local0 .Value,(Local0.Ddx)*exp2(View.MaterialTextureMipBias),(Local0.Ddy)*exp2(View.MaterialTextureMipBias)));
	float Local21 =  1.0f;
	float3 Local22 = (Local20.rgb * ((float3)Material.PreshaderBuffer[2].x));
	float Local23 = dot(Local22,float3(0.30000001,0.58999997,0.11000000));
	float3 Local24 = lerp(Local22,((float3)Local23),Material.PreshaderBuffer[2].y);
	float3 Local25 = (  Local18 .Value + Local24);
	float Local26 =  1.0f;
	float4 Local27 = ProcessMaterialColorTextureLookup(Texture2DSampleGrad(Material_Texture2D_2,Material_Texture2D_2Sampler,  Local0 .Value,(Local0.Ddx)*exp2(View.MaterialTextureMipBias),(Local0.Ddy)*exp2(View.MaterialTextureMipBias)));
	float Local28 =  1.0f;
	float Local29 = (Local27.g * Material.PreshaderBuffer[2].w);
	FloatDeriv Local257 = MulDeriv(ConstructConstantFloatDeriv(Material.PreshaderBuffer[7].x),Local15);
	FloatDeriv3 Local258 = MulDeriv(Convert_FloatDeriv3_FloatDeriv(Local257),Local17);
	float3 Local259 = (Local20.rgb * ((float3)Material.PreshaderBuffer[7].y));
	float Local260 = dot(Local259,float3(0.30000001,0.58999997,0.11000000));
	float3 Local261 = lerp(Local259,((float3)Local260),Material.PreshaderBuffer[7].z);
	float3 Local262 = (  Local258 .Value + Local261);
	float Local263 = (Local27.r * Material.PreshaderBuffer[8].x);
	PixelMaterialInputs.EmissiveColor = Local6;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = Local27.b;
	PixelMaterialInputs.BaseColor = Local25;
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = Material.PreshaderBuffer[2].z;
	PixelMaterialInputs.Roughness = Local29;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Local5;
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = float4(Local262,Material.PreshaderBuffer[7].w);
	PixelMaterialInputs.AmbientOcclusion = Local263;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 6;
	PixelMaterialInputs.FrontMaterial = GetInitialisedSubstrateData();
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.50000000;
	Parameters.WorldTangent = 0;
}
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));
		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		 ;
	}
}
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
		 ;
}
float GetFloatFacingSign(bool bIsFrontFace)
{
		return bIsFrontFace ? +1 : -1;
}
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition;
	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.LWCData = MakeMaterialLWCData(Parameters);
	Parameters.AbsoluteWorldPosition = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.AbsoluteWorldPosition.Tile, 2097152.00f, Parameters.LWCData.AbsoluteWorldPosition.Offset);
	Parameters.WorldPosition_NoOffsets = DFMultiplyLHSAndFastTwoSum(Parameters.LWCData.WorldPosition_NoOffsets.Tile, 2097152.00f, Parameters.LWCData.WorldPosition_NoOffsets.Offset);
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);
		Parameters.CameraVector =  select_internal( IsOrthoProjection(ResolvedView) , -ResolvedView.ViewForward , normalize(-Parameters.WorldPosition_CamRelative.xyz) );
	Parameters.LightVector = 0;
	const bool bNaniteIsFrontFace = Parameters.TwoSidedSign < 0.0f;
	Parameters.TwoSidedSign = 1.0f;
		Parameters.TwoSidedSign *= ResolvedView.CullingSign * GetPrimitive_DeterminantSign(Parameters.PrimitiveId);
		Parameters.TwoSidedSign *= GetFloatFacingSign(bNaniteIsFrontFace);
	if(!0 || View.GeneralPurposeTweak >= 1.0f)
		CalcPixelMaterialInputsAnalyticDerivatives(Parameters, PixelMaterialInputs);
	else
	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{
	return MaterialParameters.WorldNormal;
}
struct FSharedBasePassInterpolants
{
};
struct FShadingOcclusion
{
	float  DiffOcclusion;
	float  SpecOcclusion;
	float3 BentNormal;
};
FShadingOcclusion ApplyBentNormal(
	in float3 CameraVector, 
	in float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in float Roughness,
	in float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;
	return Out;
}
uint4 UnpackToUint4(uint Value, int4 NumComponentBits)
{
	return uint4(BitFieldExtractU32(Value, NumComponentBits.x, 0),
				 BitFieldExtractU32(Value, NumComponentBits.y, NumComponentBits.x),
				 BitFieldExtractU32(Value, NumComponentBits.z, NumComponentBits.x + NumComponentBits.y),
				 BitFieldExtractU32(Value, NumComponentBits.w, NumComponentBits.x + NumComponentBits.y + NumComponentBits.z));
}
struct FBitStreamReaderState
{
	uint	AlignedByteAddress;
	int		BitOffsetFromAddress;
	uint4	BufferBits;
	int		BufferOffset;
	int		CompileTimeMinBufferBits;
	int		CompileTimeMinDwordBits;
	int		CompileTimeMaxRemainingBits;
};
FBitStreamReaderState BitStreamReader_Create_Aligned(uint AlignedByteAddress, uint BitOffset, uint CompileTimeMaxRemainingBits)
{
	FBitStreamReaderState State;
	State.AlignedByteAddress = AlignedByteAddress;
	State.BitOffsetFromAddress = BitOffset;
	State.BufferBits = 0;
	State.BufferOffset = 0;
	State.CompileTimeMinBufferBits = 0;
	State.CompileTimeMinDwordBits = 0;
	State.CompileTimeMaxRemainingBits = CompileTimeMaxRemainingBits;
	return State;
}
uint    BitStreamReader_Read_RO 
	(ByteAddressBuffer InputBuffer, inout FBitStreamReaderState State, int NumBits, int CompileTimeMaxBits)
{
	if (CompileTimeMaxBits > State.CompileTimeMinBufferBits)
	{
		State.BitOffsetFromAddress += State.BufferOffset;	
		uint Address = State.AlignedByteAddress + ((State.BitOffsetFromAddress >> 5) << 2);
		uint4 Data = InputBuffer.Load4(Address);
		State.BufferBits.x												= BitAlignU32(Data.y,	Data.x,	State.BitOffsetFromAddress); 
		if (State.CompileTimeMaxRemainingBits > 32) State.BufferBits.y	= BitAlignU32(Data.z,	Data.y,	State.BitOffsetFromAddress); 
		if (State.CompileTimeMaxRemainingBits > 64) State.BufferBits.z	= BitAlignU32(Data.w,	Data.z,	State.BitOffsetFromAddress); 
		if (State.CompileTimeMaxRemainingBits > 96) State.BufferBits.w	= BitAlignU32(0,		Data.w,	State.BitOffsetFromAddress); 
		State.BufferOffset = 0;
		State.CompileTimeMinDwordBits	= min(32, State.CompileTimeMaxRemainingBits);
		State.CompileTimeMinBufferBits	= min(97, State.CompileTimeMaxRemainingBits);	
	}
	else if (CompileTimeMaxBits > State.CompileTimeMinDwordBits)
	{
		State.BitOffsetFromAddress += State.BufferOffset;
		const bool bOffset32 = State.CompileTimeMinDwordBits == 0 && State.BufferOffset == 32;
		State.BufferBits.x											= bOffset32 ? State.BufferBits.y :	BitAlignU32(State.BufferBits.y, State.BufferBits.x, State.BufferOffset);
		if (State.CompileTimeMinBufferBits > 32) State.BufferBits.y	= bOffset32 ? State.BufferBits.z :	BitAlignU32(State.BufferBits.z, State.BufferBits.y, State.BufferOffset);
		if (State.CompileTimeMinBufferBits > 64) State.BufferBits.z	= bOffset32 ? State.BufferBits.w :	BitAlignU32(State.BufferBits.w, State.BufferBits.z, State.BufferOffset);
		if (State.CompileTimeMinBufferBits > 96) State.BufferBits.w	= bOffset32 ? 0u :					BitAlignU32(0,					State.BufferBits.w, State.BufferOffset);
		State.BufferOffset = 0;
		State.CompileTimeMinDwordBits = min(32, State.CompileTimeMaxRemainingBits);
	}
	const uint Result = BitFieldExtractU32(State.BufferBits.x, NumBits, State.BufferOffset); 
	State.BufferOffset += NumBits;
	State.CompileTimeMinBufferBits    -= CompileTimeMaxBits;
	State.CompileTimeMinDwordBits     -= CompileTimeMaxBits;
	State.CompileTimeMaxRemainingBits -= CompileTimeMaxBits;
	return Result;
}
uint2    BitStreamReader_Read2_RO 
	(ByteAddressBuffer InputBuffer, inout FBitStreamReaderState State, int2 NumBits, int2 CompileTimeMaxBits)
{
	uint ResultX =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.x, CompileTimeMaxBits.x);
	uint ResultY =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.y, CompileTimeMaxBits.y);
	return uint2(ResultX, ResultY);
}
uint4    BitStreamReader_Read4_RO 
	(ByteAddressBuffer InputBuffer, inout FBitStreamReaderState State, int4 NumBits, int4 CompileTimeMaxBits)
{
	uint ResultX =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.x, CompileTimeMaxBits.x);
	uint ResultY =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.y, CompileTimeMaxBits.y);
	uint ResultZ =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.z, CompileTimeMaxBits.z);
	uint ResultW =    BitStreamReader_Read_RO (InputBuffer, State, NumBits.w, CompileTimeMaxBits.w);
	return uint4(ResultX, ResultY, ResultZ, ResultW);
}
uint ReadBits(uint4 Data, inout uint Position, uint NumBits)
{
	uint DwordIndex = Position >> 5;
	uint BitIndex = Position & 31;
	uint Value = Data[DwordIndex] >> BitIndex;
	if (BitIndex + NumBits > 32)
	{
		Value |= Data[DwordIndex + 1] << (32 - BitIndex);
	}
	Position += NumBits;
	uint Mask = ((1u << NumBits) - 1u);
	return Value & Mask;
}
struct FNaniteShadingBinMeta
{
	uint ElementCount;
	uint WrittenCount;
	uint RangeStart;
	uint MaterialFlags;
};
struct FVisibleCluster
{
	uint	Flags;
	uint	ViewId;
	uint	InstanceId;
	uint	PageIndex;
	uint	ClusterIndex;
	uint2	vPage;
	uint2	vPageEnd;		
};
struct FPageHeader
{
	uint	NumClusters;
};
struct FCluster
{
	uint	PageBaseAddress;
	uint	NumVerts;
	uint	PositionOffset;
	uint	NumTris;
	uint	IndexOffset;
	int3	PosStart;
	uint	BitsPerIndex;
	int		PosPrecision;
	uint3	PosBits;
	uint	NormalPrecision;
	uint	TangentPrecision;
	float4	LODBounds;
	float3	BoxBoundsCenter;
	float	LODError;
	float	EdgeLength;
	float3	BoxBoundsExtent;
	uint	Flags;
	uint	AttributeOffset;
	uint	BitsPerAttribute;
	uint	DecodeInfoOffset;
	bool	bHasTangents;
	uint	NumUVs;
	uint	ColorMode;
	uint	UVBitOffsets;
	uint	ColorMin;
	uint	ColorBits;
	uint	GroupIndex;		
	uint	MaterialTableOffset;
	uint	MaterialTableLength;
	uint	VertReuseBatchCountTableOffset;	
	uint	VertReuseBatchCountTableSize;	
	uint	Material0Length;
	uint	Material0Index;
	uint 	Material1Length;
	uint	Material1Index;
	uint	Material2Index;
	uint4	VertReuseBatchInfo;
};
struct FInstanceDynamicData
{
	float4x4	LocalToTranslatedWorld;
	float4x4	PrevLocalToTranslatedWorld;
	bool		bHasMoved;
};
struct FNaniteView
{
	float4x4	SVPositionToTranslatedWorld;
	float4x4	ViewToTranslatedWorld;
	float4x4	TranslatedWorldToView;
	float4x4	TranslatedWorldToClip;
	float4x4	ViewToClip;
	FDFMatrix	ClipToWorld;
	float4x4	PrevTranslatedWorldToView;
	float4x4	PrevTranslatedWorldToClip;
	float4x4	PrevViewToClip;
	FDFMatrix	PrevClipToWorld;
	float4		TranslatedGlobalClipPlane;
	int4		ViewRect;
	float4		ViewSizeAndInvSize;
	float4		ClipSpaceScaleOffset;
	FDFVector3	PreViewTranslation;
	FDFVector3	PrevPreViewTranslation;
	FDFVector3	WorldCameraOrigin;
	float3		CullingViewOriginTranslatedWorld;
	float3		ViewForward;
	float3		ViewOriginHigh;
	float		NearPlane;
	float		LODScale;
	float		LODScaleHW;
	float		MinBoundsRadiusSq;
	uint		StreamingPriorityCategory;
	uint		Flags;
	int			TargetLayerIndex;
	int			TargetMipLevel;
	int			TargetNumMipLevels;
	int			TargetPrevLayerIndex;
	float		RangeBasedCullingDistance;
	int4		HZBTestViewRect;
	float		CullingViewScreenMultiple;
	uint		InstanceOcclusionQueryMask;
	uint		LightingChannelMask;
};
struct FNaniteFullscreenVSToPS
{
	nointerpolation uint ViewIndex : PACKED_VIEW_INDEX;
	nointerpolation uint TileIndex : MACRO_TILE_INDEX;
};
void UnpackPoolClusterRef(uint PackedClusterRef, inout uint PageIndex, inout uint ClusterIndex)
{
	const uint MaxStreamingPages = Nanite.PageConstants.y;
	const uint MaxStreamingClusters = MaxStreamingPages << (17 - 9);
	if (PackedClusterRef < MaxStreamingClusters)
	{
		PageIndex		= PackedClusterRef >> (17 - 9);
		ClusterIndex	= PackedClusterRef & ((1u << (17 - 9)) - 1u);
	}
	else
	{
		PackedClusterRef -= MaxStreamingClusters;
		PageIndex		= MaxStreamingPages + (PackedClusterRef >> (15 - 9));
		ClusterIndex	= PackedClusterRef & ((1u << (15 - 9)) - 1u);
	}
}
FVisibleCluster UnpackVisibleCluster(uint4 RawData, bool bHasPageData = false)
{
	uint BitPos = 0;
	FVisibleCluster VisibleCluster;
	VisibleCluster.Flags		= ReadBits( RawData, BitPos, 4 );
	VisibleCluster.ViewId		= ReadBits( RawData, BitPos, 12 );
	VisibleCluster.InstanceId	= ReadBits( RawData, BitPos, 24 );
	const uint PackedClusterRef = ReadBits( RawData, BitPos, (32 - 9) );
	UnpackPoolClusterRef( PackedClusterRef, VisibleCluster.PageIndex, VisibleCluster.ClusterIndex );
	if( bHasPageData )
	{
		VisibleCluster.vPage.x		= ReadBits( RawData, BitPos, 13 );
		VisibleCluster.vPage.y		= ReadBits( RawData, BitPos, 13 );
		VisibleCluster.vPageEnd.x	= ReadBits( RawData, BitPos, 3 );
		VisibleCluster.vPageEnd.y	= ReadBits( RawData, BitPos, 3 );
		VisibleCluster.vPageEnd		+= VisibleCluster.vPage;
	}
	else
	{
		VisibleCluster.vPage = 0;
	}
	return VisibleCluster;
}
FVisibleCluster GetVisibleCluster( ByteAddressBuffer VisibleClusters, uint ClusterIdx, bool bHasPageData = false )
{
	uint4 RawData;
	if( bHasPageData )
		RawData = uint4( VisibleClusters.Load3( ClusterIdx * 12 ), 0 );
	else
		RawData = uint4( VisibleClusters.Load2( ClusterIdx * 8 ), 0, 0 );
	return UnpackVisibleCluster(RawData, bHasPageData);
}
FVisibleCluster GetVisibleCluster( uint ClusterIdx, bool bHasPageData )
{
	return GetVisibleCluster( Nanite_VisibleClustersSWHW, ClusterIdx, bHasPageData );
}
FVisibleCluster GetVisibleCluster( uint ClusterIndex )
{
	FVisibleCluster VisibleCluster;
	{
		VisibleCluster = GetVisibleCluster( ClusterIndex, false );
	}
	return VisibleCluster;
}
FInstanceSceneData GetInstanceSceneData( inout FVisibleCluster VisibleCluster, bool bCheckValid = true )
{
	FInstanceSceneData InstanceData = GetInstanceSceneData( VisibleCluster.InstanceId, Scene.GPUScene_InstanceDataSOAStride, bCheckValid );
	return InstanceData;
}
FInstanceDynamicData CalculateInstanceDynamicData( FNaniteView NaniteView, FInstanceSceneData InstanceData )
{
	float4x4 LocalToTranslatedWorld = DFFastToTranslatedWorld(InstanceData.LocalToWorld, NaniteView.PreViewTranslation);
	float4x4 PrevLocalToTranslatedWorld = DFFastToTranslatedWorld(InstanceData.PrevLocalToWorld, NaniteView.PrevPreViewTranslation);
	FInstanceDynamicData DynamicData;
	DynamicData.LocalToTranslatedWorld = LocalToTranslatedWorld;
	DynamicData.PrevLocalToTranslatedWorld = PrevLocalToTranslatedWorld;
	DynamicData.bHasMoved = GetGPUSceneFrameNumber() == InstanceData.LastUpdateSceneFrameNumber;
	return DynamicData;
}
FInstanceSceneData GetInstanceSceneData( uint InstanceId, bool bCheckValid = true )
{
	return GetInstanceSceneData( InstanceId, Scene.GPUScene_InstanceDataSOAStride, bCheckValid );
}
FCluster UnpackCluster(uint4 ClusterData[7])
{
	FCluster Cluster;
	Cluster.PageBaseAddress		= 0;
	Cluster.NumVerts			= BitFieldExtractU32(ClusterData[0].x, 9, 0);
	Cluster.PositionOffset		= BitFieldExtractU32(ClusterData[0].x, 23, 9);
	Cluster.NumTris				= BitFieldExtractU32(ClusterData[0].y, 8, 0);
	Cluster.IndexOffset			= BitFieldExtractU32(ClusterData[0].y, 24, 8);
	Cluster.ColorMin			= ClusterData[0].z;
	Cluster.ColorBits			= BitFieldExtractU32(ClusterData[0].w, 16, 0);
	Cluster.GroupIndex			= BitFieldExtractU32(ClusterData[0].w, 16, 16);			
	Cluster.PosStart			= ClusterData[1].xyz;
	Cluster.BitsPerIndex		= BitFieldExtractU32(ClusterData[1].w, 3, 0) + 1;
	Cluster.PosPrecision		= (int)BitFieldExtractU32(ClusterData[1].w, 6, 3) + -20;
	Cluster.PosBits.x			= BitFieldExtractU32(ClusterData[1].w, 5, 9);
	Cluster.PosBits.y			= BitFieldExtractU32(ClusterData[1].w, 5, 14);
	Cluster.PosBits.z			= BitFieldExtractU32(ClusterData[1].w, 5, 19);
	Cluster.NormalPrecision		= BitFieldExtractU32(ClusterData[1].w, 4, 24);
	Cluster.TangentPrecision	= BitFieldExtractU32(ClusterData[1].w, 4, 28);
	Cluster.LODBounds			= asfloat(ClusterData[2]);
	Cluster.BoxBoundsCenter		= asfloat(ClusterData[3].xyz);
	Cluster.LODError			= f16tof32(ClusterData[3].w);
	Cluster.EdgeLength			= f16tof32(ClusterData[3].w >> 16);
	Cluster.BoxBoundsExtent		= asfloat(ClusterData[4].xyz);
	Cluster.Flags				= ClusterData[4].w;
	Cluster.AttributeOffset		= BitFieldExtractU32(ClusterData[5].x, 22,  0);
	Cluster.BitsPerAttribute	= BitFieldExtractU32(ClusterData[5].x, 10, 22);
	Cluster.DecodeInfoOffset	= BitFieldExtractU32(ClusterData[5].y, 22,  0);
	Cluster.bHasTangents		= BitFieldExtractU32(ClusterData[5].y,  1, 22);
	Cluster.NumUVs				= BitFieldExtractU32(ClusterData[5].y,  3, 23);
	Cluster.ColorMode			= BitFieldExtractU32(ClusterData[5].y,  1, 26);
	Cluster.UVBitOffsets		= ClusterData[5].z;
	const uint MaterialEncoding = ClusterData[5].w;
	[branch]
	if (MaterialEncoding < 0xFE000000u)
	{
		Cluster.MaterialTableOffset	= 0;
		Cluster.MaterialTableLength	= 0;		
		Cluster.Material0Index		= BitFieldExtractU32(MaterialEncoding, 6, 0);
		Cluster.Material1Index		= BitFieldExtractU32(MaterialEncoding, 6, 6);
		Cluster.Material2Index		= BitFieldExtractU32(MaterialEncoding, 6, 12);
		Cluster.Material0Length		= BitFieldExtractU32(MaterialEncoding, 7, 18) + 1;
		Cluster.Material1Length		= BitFieldExtractU32(MaterialEncoding, 7, 25);
		Cluster.VertReuseBatchCountTableOffset = 0;
		Cluster.VertReuseBatchCountTableSize = 0;
		Cluster.VertReuseBatchInfo	= ClusterData[6];
	}
	else
	{
		Cluster.MaterialTableOffset = BitFieldExtractU32(MaterialEncoding, 19, 0);
		Cluster.MaterialTableLength	= BitFieldExtractU32(MaterialEncoding, 6, 19) + 1;
		Cluster.Material0Index		= 0;
		Cluster.Material1Index		= 0;
		Cluster.Material2Index		= 0;
		Cluster.Material0Length		= 0;
		Cluster.Material1Length		= 0;
		Cluster.VertReuseBatchCountTableOffset = ClusterData[6].x;
		Cluster.VertReuseBatchCountTableSize = ClusterData[6].y;
		Cluster.VertReuseBatchInfo = 0;
	}
	return Cluster;
}
uint GPUPageIndexToGPUOffset(uint PageIndex)
{
	const uint MaxStreamingPages = Nanite.PageConstants.y;
	return (min(PageIndex, MaxStreamingPages) << 17) + ((uint)max((int)PageIndex - (int)MaxStreamingPages, 0) << 15);
}
FPageHeader UnpackPageHeader(uint4 Data)
{
	FPageHeader Header;
	Header.NumClusters = Data.x;
	return Header;
}
FPageHeader GetPageHeader(ByteAddressBuffer InputBuffer, uint PageAddress)
{
	return UnpackPageHeader(InputBuffer.Load4(PageAddress));
}
FPageHeader GetPageHeader(RWByteAddressBuffer InputBuffer, uint PageAddress)
{
	return UnpackPageHeader(InputBuffer.Load4(PageAddress));
}
FCluster GetCluster(ByteAddressBuffer InputBuffer, uint SrcBaseOffset, uint ClusterIndex, uint NumPageClusters)
{
	const uint ClusterSOAStride = ( NumPageClusters << 4 );
	const uint ClusterBaseAddress = SrcBaseOffset + ( ClusterIndex << 4 );
	uint4 ClusterData[7];
	[unroll]
	for(int i = 0; i < 7; i++)
	{
		ClusterData[i] = InputBuffer.Load4( ClusterBaseAddress + i * ClusterSOAStride + 16 ); 
	}
	return UnpackCluster(ClusterData);
}
FCluster GetCluster(RWByteAddressBuffer InputBuffer, uint SrcBaseOffset, uint ClusterIndex, uint NumPageClusters)
{
	const uint ClusterSOAStride = (NumPageClusters << 4);
	const uint ClusterBaseAddress = SrcBaseOffset + (ClusterIndex << 4);
	uint4 ClusterData[7];
	[unroll]
	for (int i = 0; i < 7; i++)
	{
		ClusterData[i] = InputBuffer.Load4( ClusterBaseAddress + i * ClusterSOAStride + 16 );  
	}
	return UnpackCluster(ClusterData);
}
FCluster GetCluster(uint PageIndex, uint ClusterIndex)
{
	uint PageBaseAddress = GPUPageIndexToGPUOffset(PageIndex);
	FPageHeader Header = GetPageHeader(Nanite_ClusterPageData, PageBaseAddress);
	FCluster Cluster = GetCluster(Nanite_ClusterPageData, PageBaseAddress, ClusterIndex, Header.NumClusters);
	Cluster.PageBaseAddress = PageBaseAddress;
	return Cluster;
}
uint3 DecodeTriangleIndices(FCluster Cluster, uint TriIndex)
{
	const uint BitsPerTriangle = Cluster.BitsPerIndex + 2 * 5;
	FBitStreamReaderState BitStreamReader = BitStreamReader_Create_Aligned(Cluster.PageBaseAddress + Cluster.IndexOffset, TriIndex * BitsPerTriangle, 8 + 2*5);
	uint BaseIndex = BitStreamReader_Read_RO(Nanite_ClusterPageData, BitStreamReader, Cluster.BitsPerIndex, 8);
	uint Delta0 = BitStreamReader_Read_RO(Nanite_ClusterPageData, BitStreamReader, 5, 5);
	uint Delta1 = BitStreamReader_Read_RO(Nanite_ClusterPageData, BitStreamReader, 5, 5);
	return BaseIndex + uint3(0, Delta0, Delta1);
}
void UnpackVisPixel(
	uint64_t Pixel,
	out uint DepthInt,
	out uint VisibleClusterIndex, 
	out uint TriIndex
	)
{
	const uint2 Unpacked = UnpackUlongType(Pixel);
	VisibleClusterIndex = Unpacked.x >> 7;
	TriIndex = Unpacked.x & 0x7F;
	DepthInt = Unpacked.y;
	VisibleClusterIndex--;
}
void UnpackVisPixel(
	uint64_t Pixel,
	out uint DepthInt,
	out uint VisibleClusterIndex, 
	out uint TriIndex,
	out bool bIsImposter
	)
{
	const uint2 Unpacked = UnpackUlongType(Pixel);
	VisibleClusterIndex = Unpacked.x >> 7;
	TriIndex = Unpacked.x & 0x7F;
	DepthInt = Unpacked.y;
	bIsImposter = false;
	VisibleClusterIndex--;
}
float3 UnpackPosition(uint2 Packed, FCluster Cluster)
{
	int3 Pos;
	Pos.x = BitFieldExtractU32(Packed.x, Cluster.PosBits.x, 0);
	Packed.x = BitAlignU32(Packed.y, Packed.x, Cluster.PosBits.x);
	Packed.y >>= Cluster.PosBits.x;
	Pos.y = BitFieldExtractU32(Packed.x, Cluster.PosBits.y, 0);
	Packed.x = BitAlignU32(Packed.y, Packed.x, Cluster.PosBits.y);
	Pos.z = BitFieldExtractU32(Packed.x, Cluster.PosBits.z, 0);
	const float Scale = asfloat(asint(1.0f) - (Cluster.PosPrecision << 23));
	return (Pos + Cluster.PosStart) * Scale;
}
uint2 GetPackedPosition(uint VertIndex, FCluster Cluster)
{
	const uint BitsPerVertex = Cluster.PosBits.x + Cluster.PosBits.y + Cluster.PosBits.z;
	const uint BitOffset = VertIndex * BitsPerVertex;	
	uint3 Data = Nanite_ClusterPageData.Load3(Cluster.PageBaseAddress + Cluster.PositionOffset + ((BitOffset >> 5) << 2));
	return uint2(BitAlignU32(Data.y, Data.x, BitOffset), BitAlignU32(Data.z, Data.y, BitOffset));
}
float3 DecodePosition(uint VertIndex, FCluster Cluster)
{
	const uint2 PackedPos = GetPackedPosition(VertIndex, Cluster);
	return UnpackPosition(PackedPos, Cluster);
}
FNaniteView GetNaniteView( uint ViewIndex )
{
	ViewState LocalView = GetPrimaryView();
	FNaniteView NaniteView;
	NaniteView.SVPositionToTranslatedWorld  = LocalView.SVPositionToTranslatedWorld;
	NaniteView.ViewToTranslatedWorld		= LocalView.ViewToTranslatedWorld;
	NaniteView.ViewOriginHigh				= LocalView.ViewOriginHigh;
	NaniteView.TranslatedWorldToView		= LocalView.TranslatedWorldToView;
	NaniteView.TranslatedWorldToClip		= LocalView.TranslatedWorldToClip;
	NaniteView.ViewToClip					= LocalView.ViewToClip;
	NaniteView.ClipToWorld					= LocalView.ClipToWorld;
	NaniteView.PrevTranslatedWorldToView	= LocalView.PrevTranslatedWorldToView;
	NaniteView.PrevTranslatedWorldToClip	= LocalView.PrevTranslatedWorldToClip;
	NaniteView.PrevViewToClip				= LocalView.PrevViewToClip;
	NaniteView.PrevClipToWorld				= LocalView.PrevClipToWorld;
	NaniteView.TranslatedGlobalClipPlane	= LocalView.GlobalClippingPlane;
	NaniteView.ViewSizeAndInvSize			= LocalView.ViewSizeAndInvSize;
	NaniteView.ViewRect						= int4(int2(LocalView.ViewRectMin.xy + 0.5f), int2(LocalView.ViewRectMin.xy + LocalView.ViewSizeAndInvSize.xy + 0.5f));
	NaniteView.PreViewTranslation			= LocalView.PreViewTranslation;
	NaniteView.PrevPreViewTranslation		= LocalView.PrevPreViewTranslation;
	NaniteView.WorldCameraOrigin			= LocalView.WorldCameraOrigin;
	NaniteView.ViewForward					= LocalView.ViewForward;
	NaniteView.NearPlane					= LocalView.NearPlane;
	NaniteView.LODScale						= 1.0f;
	NaniteView.LODScaleHW					= 1.0f;
	NaniteView.MinBoundsRadiusSq			= 0;
	NaniteView.StreamingPriorityCategory	= 3;
	NaniteView.Flags						= 0x1 | 0x2;
	NaniteView.TargetLayerIndex = -1;		
	NaniteView.TargetMipLevel = 0;
	NaniteView.TargetNumMipLevels = 0;
	NaniteView.TargetPrevLayerIndex	= -1;	
	NaniteView.RangeBasedCullingDistance = 0.0f;
	NaniteView.HZBTestViewRect				= NaniteView.ViewRect;
	NaniteView.InstanceOcclusionQueryMask	= 0;
	NaniteView.LightingChannelMask	= 0x1;
	return NaniteView;
}
template< typename T >
struct TDual
{
	T Value;
	T Value_dx;
	T Value_dy;
	TDual<T> operator+(T B)
	{
		TDual<T> R;
		R.Value = Value + B;
		R.Value_dx = Value_dx;
		R.Value_dy = Value_dy;
		return R;
	}
	TDual<T> operator-(T B)
	{
		TDual<T> R;
		R.Value = Value - B;
		R.Value_dx = Value_dx;
		R.Value_dy = Value_dy;
		return R;
	}
	TDual<T> operator*(T B)
	{
		TDual<T> R;
		R.Value = Value * B;
		R.Value_dx = Value_dx * B;
		R.Value_dy = Value_dy * B;
		return R;
	}
	TDual<T> operator+(TDual<T> B)
	{
		TDual<T> R;
		R.Value = Value + B.Value;
		R.Value_dx = Value_dx + B.Value_dx;
		R.Value_dy = Value_dy + B.Value_dy;
		return R;
	}
	TDual<T> operator-(TDual<T> B)
	{
		TDual<T> R;
		R.Value = Value - B.Value;
		R.Value_dx = Value_dx - B.Value_dx;
		R.Value_dy = Value_dy - B.Value_dy;
		return R;
	}
	TDual<T> operator*(TDual<T> B)
	{
		TDual<T> R;
		R.Value = Value * B.Value;
		R.Value_dx = Value_dx * B.Value + Value * B.Value_dx;
		R.Value_dy = Value_dy * B.Value + Value * B.Value_dy;
		return R;
	}
	TDual<T> operator/(TDual<T> B)
	{
		TDual<T> R;
		R.Value = Value / B.Value;
		T Denom = rcp(B.Value * B.Value);
		T dFdA = B.Value * Denom;
		T dFdB = -Value * Denom;
		R.Value_dx = dFdA * Value_dx + dFdB * B.Value_dx;
		R.Value_dy = dFdA * Value_dy + dFdB * B.Value_dy;
		return R;
	}
};
typedef TDual< float3 > FBarycentrics;
template< typename T >
TDual<T> Lerp( T Value0, T Value1, T Value2, FBarycentrics Barycentrics )
{
	TDual<T> Result;
	Result.Value	= Value0 * Barycentrics.Value.x    + Value1 * Barycentrics.Value.y    + Value2 * Barycentrics.Value.z;
	Result.Value_dx	= Value0 * Barycentrics.Value_dx.x + Value1 * Barycentrics.Value_dx.y + Value2 * Barycentrics.Value_dx.z;
	Result.Value_dy	= Value0 * Barycentrics.Value_dy.x + Value1 * Barycentrics.Value_dy.y + Value2 * Barycentrics.Value_dy.z;
	return Result;
}
FBarycentrics CalculateTriangleBarycentrics(float2 PixelClip, float4 PointClip0, float4 PointClip1, float4 PointClip2, float2 ViewInvSize)
{
	FBarycentrics Barycentrics;
	const float3 RcpW = rcp(float3(PointClip0.w, PointClip1.w, PointClip2.w));
	const float3 Pos0 = PointClip0.xyz * RcpW.x;
	const float3 Pos1 = PointClip1.xyz * RcpW.y;
	const float3 Pos2 = PointClip2.xyz * RcpW.z;
	const float3 Pos120X = float3(Pos1.x, Pos2.x, Pos0.x);
	const float3 Pos120Y = float3(Pos1.y, Pos2.y, Pos0.y);
	const float3 Pos201X = float3(Pos2.x, Pos0.x, Pos1.x);
	const float3 Pos201Y = float3(Pos2.y, Pos0.y, Pos1.y);
	const float3 C_dx = Pos201Y - Pos120Y;
	const float3 C_dy = Pos120X - Pos201X;
	const float3 C = C_dx * (PixelClip.x - Pos120X) + C_dy * (PixelClip.y - Pos120Y);	
	const float3 G = C * RcpW;
	const float H = dot(C, RcpW);
	const float RcpH = rcp(H);
	Barycentrics.Value = G * RcpH;
	const float3 G_dx = C_dx * RcpW;
	const float3 G_dy = C_dy * RcpW;
	const float H_dx = dot(C_dx, RcpW);
	const float H_dy = dot(C_dy, RcpW);
	Barycentrics.Value_dx = (G_dx * H - G * H_dx) * (RcpH * RcpH) * ( 2.0f * ViewInvSize.x);
	Barycentrics.Value_dy = (G_dy * H - G * H_dy) * (RcpH * RcpH) * (-2.0f * ViewInvSize.y);
	return Barycentrics;
}
float3 ClosestPointBarycentrics( float3 p, float3 v0, float3 v1, float3 v2 )
{
	float3 Edge01 = v1 - v0;
	float3 Edge02 = v2 - v0;
	float3 Origin0 = p - v0;
	float3 TriNormal = cross( Edge02, Edge01 );
	float3 Dirx02 = cross( TriNormal, Edge02 );
	float InvDet = 1.0 / dot( Edge01, Dirx02 );
	float3 UVW;
	UVW.y = InvDet * dot( Origin0, Dirx02 );
	UVW.z = InvDet * dot( TriNormal, cross( Origin0, Edge01 ) );
	UVW.x = 1.0 - UVW.y - UVW.z;
	return UVW;
}
FBarycentrics CalculateTriangleBarycentrics(
	float3 PositionPixel,
	float3 PositionPixelX,
	float3 PositionPixelY,
	float3 Position0,
	float3 Position1,
	float3 Position2,
	float3 Normal0,
	float3 Normal1,
	float3 Normal2 )
{
	uint NumIterations = 2;
	for( uint j = 0; j < NumIterations; j++ )
	{
		float3 UVW = ClosestPointBarycentrics( PositionPixel, Position0, Position1, Position2 );
		UVW = max( 0, UVW );
		UVW /= dot( UVW, 1 );
		float3 ClosestPoint;
		ClosestPoint  = Position0 * UVW.x;
		ClosestPoint += Position1 * UVW.y;
		ClosestPoint += Position2 * UVW.z;
		float3 ClosestNormal;
		ClosestNormal  = Normal0 * UVW.x;
		ClosestNormal += Normal1 * UVW.y;
		ClosestNormal += Normal2 * UVW.z;
		float Displace = dot( PositionPixel - ClosestPoint, ClosestNormal ) / dot( ClosestNormal, ClosestNormal );
		Position0 += Normal0 * Displace;
		Position1 += Normal1 * Displace;
		Position2 += Normal2 * Displace;
	}
	FBarycentrics Barycentrics;
	Barycentrics.Value		= ClosestPointBarycentrics( PositionPixel,  Position0, Position1, Position2 );
	Barycentrics.Value_dx	= ClosestPointBarycentrics( PositionPixelX, Position0, Position1, Position2 ) - Barycentrics.Value;
	Barycentrics.Value_dy	= ClosestPointBarycentrics( PositionPixelY, Position0, Position1, Position2 ) - Barycentrics.Value;
	return Barycentrics;
}
struct FNaniteAttributeData
{
	TDual< float4 >	VertexColor;
	TDual< float2 >	TexCoords[4];
	float3x3 TangentToWorld;
	float UnMirrored;
};
struct FNaniteRawAttributeData
{
	float4 TangentX_AndSign;
	float3 TangentZ;
	float4 Color;
	float2 TexCoords[4];
};
struct FUVRange
{
	uint2	Min;
	uint2	NumBits;
	uint	NumMantissaBits;
};
FUVRange UnpackUVRange(uint2 Data)
{
	FUVRange Range;
	Range.NumBits.x			= BitFieldExtractU32(Data.x, 5, 0);
	Range.Min.x				= Data.x >> 5;
	Range.NumBits.y			= BitFieldExtractU32(Data.y, 5, 0);
	Range.Min.y				= Data.y >> 5;
	Range.NumMantissaBits	= 14;	
	return Range;
}
float DecodeUVFloat(uint EncodedValue, uint NumMantissaBits)
{
	const uint ExponentAndMantissaMask	= BitFieldMaskU32(5 + NumMantissaBits, 0);
	const bool bNeg						= (EncodedValue <= ExponentAndMantissaMask);
	const uint ExponentAndMantissa		= (bNeg ? ~EncodedValue : EncodedValue) & ExponentAndMantissaMask;
	float Result	= asfloat(0x3F000000u + (ExponentAndMantissa << (23 - NumMantissaBits)));
	Result			= min(Result * 2.0f - 1.0f, Result);		
	return bNeg ? -Result : Result;
}
float2 UnpackTexCoord(uint2 Packed, FUVRange UVRange)
{
	const uint2 GlobalUV = UVRange.Min + Packed;
	return float2(	DecodeUVFloat(GlobalUV.x, UVRange.NumMantissaBits),
					DecodeUVFloat(GlobalUV.y, UVRange.NumMantissaBits));
}
float3 UnpackNormal(uint Packed, uint Bits)
{
	uint Mask = BitFieldMaskU32(Bits, 0);
	float2 F = uint2(BitFieldExtractU32(Packed, Bits, 0), BitFieldExtractU32(Packed, Bits, Bits)) * (2.0f / Mask) - 1.0f;
	float3 N = float3(F.xy, 1.0 - abs(F.x) - abs(F.y));
	float T = saturate(-N.z);
	N.xy +=  select_internal( N.xy >= 0.0 , -T , T );
	return normalize(N);
}
uint CalculateMaxAttributeBits(uint NumTexCoordInterpolators)
{
	uint Size = 0u;
	Size += 2u * 15;
	Size += 1u + 12;
	Size += 4u * 8;
	Size += NumTexCoordInterpolators * (2u * (1 + 5 + 14));
	return Size;
}
float3 UnpackTangentX(float3 TangentZ, uint TangentAngleBits, uint NumTangentBits)
{
	const bool bSwapXZ = (abs(TangentZ.z) > abs(TangentZ.x));
	if (bSwapXZ) TangentZ.xz = TangentZ.zx;
	const float3 TangentRefX = float3(-TangentZ.y, TangentZ.x, 0.0f);
	const float3 TangentRefY = cross(TangentZ, TangentRefX);
	const float Scale = rsqrt(dot(TangentRefX.xy, TangentRefX.xy));
	const float TangentAngle = float(TangentAngleBits) * ((2.0f * PI) / (1u << NumTangentBits));
	float3 TangentX = TangentRefX * (cos(TangentAngle) * Scale) + TangentRefY * (sin(TangentAngle) * Scale);
	if (bSwapXZ) TangentX.xz = TangentX.zx;
	return TangentX;
}
void GetRawAttributeDataN(inout FNaniteRawAttributeData RawAttributeData[3],
	FCluster Cluster,
	uint3 TriIndices,
	uint CompileTimeN,
	uint CompileTimeMaxTexCoords
)
{
	CompileTimeMaxTexCoords = max(1, min(4, CompileTimeMaxTexCoords));
	const uint DecodeInfoOffset = Cluster.PageBaseAddress + Cluster.DecodeInfoOffset;
	const uint AttributeDataOffset = Cluster.PageBaseAddress + Cluster.AttributeOffset;
	float2 TexCoords[4];
	uint i;
	[unroll]
	for (i = 0; i < CompileTimeN; i++)
	{
		RawAttributeData[i] = (FNaniteRawAttributeData)0;
		TexCoords[i] = 0.0f;
	}
	const uint CompileTimeMaxAttributeBits = CalculateMaxAttributeBits(CompileTimeMaxTexCoords);
	uint4 ColorMin = uint4(UnpackByte0(Cluster.ColorMin), UnpackByte1(Cluster.ColorMin), UnpackByte2(Cluster.ColorMin), UnpackByte3(Cluster.ColorMin));
	const uint4 NumComponentBits = UnpackToUint4(Cluster.ColorBits, 4);
	FBitStreamReaderState AttributeStream[3];
	[unroll]
	for (i = 0; i < CompileTimeN; i++)
	{
		AttributeStream[i] = BitStreamReader_Create_Aligned(AttributeDataOffset, TriIndices[i] * Cluster.BitsPerAttribute, CompileTimeMaxAttributeBits);
		const uint NormalBits = BitStreamReader_Read_RO(Nanite_ClusterPageData, AttributeStream[i], 2 * Cluster.NormalPrecision, 2 * 15);
		const float3 TangentZ = UnpackNormal(NormalBits, Cluster.NormalPrecision);
		RawAttributeData[i].TangentZ = TangentZ;
		const uint NumTangentBits = Cluster.bHasTangents ? (Cluster.TangentPrecision + 1) : 0u;
		const uint TangentAngleAndSignBits = BitStreamReader_Read_RO(Nanite_ClusterPageData, AttributeStream[i], NumTangentBits, 12 + 1);
		[branch]
		if (Cluster.bHasTangents)
		{
			const bool bTangentYSign = (TangentAngleAndSignBits & (1u << Cluster.TangentPrecision)) != 0;
			const uint TangentAngleBits = BitFieldExtractU32(TangentAngleAndSignBits, Cluster.TangentPrecision, 0);
			RawAttributeData[i].TangentX_AndSign = float4(UnpackTangentX(TangentZ, TangentAngleBits, Cluster.TangentPrecision), bTangentYSign ? -1.0f : 1.0f);
		}
		else
		{
			RawAttributeData[i].TangentX_AndSign = 0.0f;
		}
		const uint4 ColorDelta = BitStreamReader_Read4_RO(Nanite_ClusterPageData, AttributeStream[i], NumComponentBits, 8);
		RawAttributeData[i].Color = float4(ColorMin + ColorDelta) * (1.0f / 255.0f);
	}
	[unroll]
	for (uint TexCoordIndex = 0; TexCoordIndex < CompileTimeMaxTexCoords; ++TexCoordIndex)
	{
		uint2 UVRangeData = 0u;
		if (TexCoordIndex < Cluster.NumUVs)
		{
			UVRangeData = Nanite_ClusterPageData.Load2(DecodeInfoOffset + TexCoordIndex * 8);
		}
		const FUVRange UVRange = UnpackUVRange(UVRangeData);
		uint2 UVBits[3];
		[unroll]
		for (uint i = 0; i < CompileTimeN; i++)
		{
			UVBits[i] = BitStreamReader_Read2_RO(Nanite_ClusterPageData, AttributeStream[i], UVRange.NumBits, (1 + 5 + 14));
		}
		[branch]
		if (TexCoordIndex < Cluster.NumUVs)
		{
			[unroll]
			for (uint i = 0; i < CompileTimeN; i++)
			{
				TexCoords[i] = UnpackTexCoord(UVBits[i], UVRange);
			}
		}
		[unroll]
		for (uint j = 0; j < CompileTimeN; j++)
		{
			RawAttributeData[j].TexCoords[TexCoordIndex] = TexCoords[j];
		}
	}
}
void GetRawAttributeData3(inout FNaniteRawAttributeData RawAttributeData[3],
	FCluster Cluster,
	uint3 VertexIndices,
	uint CompileTimeMaxTexCoords
	)
{
	GetRawAttributeDataN(RawAttributeData, Cluster, VertexIndices, 3, CompileTimeMaxTexCoords);
}
float3x3 NaniteTangentToLocal(float4 TangentX_AndSign, float3 UnnormalizedTangentZ)
{
	const float3 TangentY = cross(UnnormalizedTangentZ.xyz, TangentX_AndSign.xyz) * TangentX_AndSign.w;
	return float3x3(TangentX_AndSign.xyz, TangentY, UnnormalizedTangentZ);
}
FNaniteAttributeData GetAttributeData(
	FCluster Cluster,
	float3 PointLocal0,
	float3 PointLocal1,
	float3 PointLocal2,
	FNaniteRawAttributeData RawAttributeData0,
	FNaniteRawAttributeData RawAttributeData1,
	FNaniteRawAttributeData RawAttributeData2,
	FBarycentrics Barycentrics,
	FInstanceSceneData InstanceData,
	uint CompileTimeMaxTexCoords,
	float3x3 TangentRot
)
{
	FNaniteAttributeData AttributeData = (FNaniteAttributeData)0;
	CompileTimeMaxTexCoords = max(1, min(4, CompileTimeMaxTexCoords));
	const float3 UnnormalizedTangentZ = Lerp( RawAttributeData0.TangentZ, RawAttributeData1.TangentZ, RawAttributeData2.TangentZ, Barycentrics ).Value;
	const float3 TangentZ = normalize(UnnormalizedTangentZ);
	AttributeData.UnMirrored = 1.0f;
	AttributeData.VertexColor.Value = RawAttributeData0.Color;
	if (Cluster.ColorMode == 1)
	{
		AttributeData.VertexColor = Lerp( RawAttributeData0.Color, RawAttributeData1.Color, RawAttributeData2.Color, Barycentrics );
	}
	TDual< float2 > TexCoord = (TDual< float2 >)0;
	[unroll]
	for (uint TexCoordIndex = 0; TexCoordIndex < CompileTimeMaxTexCoords; ++TexCoordIndex)
	{
		if (TexCoordIndex < Cluster.NumUVs)
		{
			TexCoord = Lerp( RawAttributeData0.TexCoords[TexCoordIndex], RawAttributeData1.TexCoords[TexCoordIndex], RawAttributeData2.TexCoords[TexCoordIndex], Barycentrics );
			if (TexCoordIndex == 0)
			{
				float3x3 TangentToLocal;
				[branch]
				if (Cluster.bHasTangents)
				{
					float4 TangentX_AndSign = Lerp( RawAttributeData0.TangentX_AndSign, RawAttributeData1.TangentX_AndSign, RawAttributeData2.TangentX_AndSign, Barycentrics ).Value;
					TangentToLocal = NaniteTangentToLocal(TangentX_AndSign, UnnormalizedTangentZ);
					AttributeData.UnMirrored = TangentX_AndSign.w;
				}
				else
				{
					float3 PointLocal10 = PointLocal1 - PointLocal0;
					float3 PointLocal20 = PointLocal2 - PointLocal0;
					float2 TexCoord10 = RawAttributeData1.TexCoords[0] - RawAttributeData0.TexCoords[0];
					float2 TexCoord20 = RawAttributeData2.TexCoords[0] - RawAttributeData0.TexCoords[0];
					bool TangentXValid = abs(TexCoord10.x) + abs(TexCoord20.x) > 1e-6;
					float3 TangentX;
					float3 TangentY;
					[branch]
					if (TangentXValid)
					{
						float3 Perp2 = cross(TangentZ, PointLocal20);
						float3 Perp1 = cross(PointLocal10, TangentZ);
						float3 TangentU = Perp2 * TexCoord10.x + Perp1 * TexCoord20.x;
						float3 TangentV = Perp2 * TexCoord10.y + Perp1 * TexCoord20.y;
						TangentX = normalize(TangentU);
						TangentY = cross(TangentZ, TangentX);
						AttributeData.UnMirrored = dot(TangentV, TangentY) < 0.0f ? -1.0f : 1.0f;
						TangentY *= AttributeData.UnMirrored;
					}
					else
					{
						const float Sign = TangentZ.z >= 0 ? 1 : -1;
						const float a = -rcp( Sign + TangentZ.z );
						const float b = TangentZ.x * TangentZ.y * a;
						TangentX = float3(1 + Sign * a * Pow2(TangentZ.x), Sign * b, -Sign * TangentZ.x);
						TangentY = float3(b,  Sign + a * Pow2(TangentZ.y), -TangentZ.y);
						AttributeData.UnMirrored = 1;
					}
					TangentToLocal = float3x3(TangentX, TangentY, TangentZ);
				}
				TangentToLocal = mul(TangentToLocal, TangentRot);
				float3x3 LocalToWorldNoScale = DFToFloat3x3(InstanceData.LocalToWorld);
				float3 InvScale = InstanceData.InvNonUniformScale;
				LocalToWorldNoScale[0] *= InvScale.x;
				LocalToWorldNoScale[1] *= InvScale.y;
				LocalToWorldNoScale[2] *= InvScale.z;
				AttributeData.TangentToWorld = mul(TangentToLocal, LocalToWorldNoScale);
			}
		}
		else
		{
			if (TexCoordIndex == 0)
			{
				AttributeData.TangentToWorld = float3x3(float3(0, 0, 0), float3(0, 0, 0), DFMultiplyVector(TangentZ * InstanceData.InvNonUniformScale.z, InstanceData.LocalToWorld));
			}
		}
		AttributeData.TexCoords[TexCoordIndex] = TexCoord;
	}
	return AttributeData;
}
FNaniteAttributeData GetAttributeData(
	FCluster Cluster,
	float3 PointLocal0,
	float3 PointLocal1,
	float3 PointLocal2,
	FNaniteRawAttributeData RawAttributeData0,
	FNaniteRawAttributeData RawAttributeData1,
	FNaniteRawAttributeData RawAttributeData2,
	FBarycentrics Barycentrics,
	FInstanceSceneData InstanceData,
	uint CompileTimeMaxTexCoords
)
{
	const float3x3 TangentRot =
	{
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	};
	return GetAttributeData(
		Cluster,
		PointLocal0,
		PointLocal1,
		PointLocal2,
		RawAttributeData0,
		RawAttributeData1,
		RawAttributeData2,
		Barycentrics,
		InstanceData,
		CompileTimeMaxTexCoords,
		TangentRot
	);
}
struct FNaniteLocalVertex
{
	uint VertIndex;
	float3 Position;
	FNaniteRawAttributeData RawAttributeData;
};
void FetchLocalNaniteTriangle(FCluster Cluster, uint3 VertIndexes, uint CompileTimeMaxTexCoords, inout FNaniteLocalVertex OutVerts[3])
{
	const float3 Positions[3] = 
	{
		DecodePosition(VertIndexes.x, Cluster),
		DecodePosition(VertIndexes.y, Cluster),
		DecodePosition(VertIndexes.z, Cluster)
	};
	FNaniteRawAttributeData RawAttributeData[3];
	GetRawAttributeData3(RawAttributeData, Cluster, VertIndexes, CompileTimeMaxTexCoords);
	 [unroll( 3 )]
	for (uint i = 0; i < 3; ++i)
	{
		OutVerts[i].VertIndex			= VertIndexes[i];
		OutVerts[i].Position			= Positions[i];
		OutVerts[i].RawAttributeData	= RawAttributeData[i];
	}
}
struct FNanitePostDeformVertex
{
	uint VertIndex;
	float3 Position;
	float3 PointLocal;
	float3 Normal;
	float SplineDist;
	FNaniteRawAttributeData RawAttributeData;
};
FNanitePostDeformVertex DeformLocalNaniteVertex(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FNaniteLocalVertex Input)
{
	FNanitePostDeformVertex Output;
	Output.VertIndex			= Input.VertIndex;
	Output.PointLocal			= Input.Position;
	Output.Position				= Input.Position;
	Output.Normal				= float3(Input.RawAttributeData.TangentZ);
	Output.SplineDist			= 0.0f;
	Output.RawAttributeData		= Input.RawAttributeData;
	return Output;
}
void FetchAndDeformLocalNaniteTriangle(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FCluster Cluster, uint3 VertIndexes, uint CompileTimeMaxTexCoords, inout FNanitePostDeformVertex OutVerts[3])
{
	FNaniteLocalVertex InVerts[3];
	FetchLocalNaniteTriangle(Cluster, VertIndexes, CompileTimeMaxTexCoords, InVerts);
	 [unroll( 3 )]
	for(uint i = 0; i < 3; ++i)
	{
		OutVerts[i] = DeformLocalNaniteVertex(PrimitiveData, InstanceData, InVerts[i]);
	}
}
struct FVertexFactoryInterpolantsVSToPS
{
	nointerpolation uint ViewIndex				: PACKED_VIEW_INDEX;
};
void GetNaniteMaterialSceneData(FVisibleCluster VisibleCluster, inout FPrimitiveSceneData PrimitiveData, inout FInstanceSceneData InstanceData)
{
	InstanceData	= GetInstanceSceneData(VisibleCluster, false);
	PrimitiveData	= GetPrimitiveData(InstanceData.PrimitiveId);
}
float3x3 CalcVertexTangentToLocal(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FNanitePostDeformVertex Vert)
{
	float3x3 TangentToLocal;
	[branch]
	if(Vert.RawAttributeData.TangentX_AndSign.w != 0.0f)
	{
		TangentToLocal = NaniteTangentToLocal(Vert.RawAttributeData.TangentX_AndSign, Vert.RawAttributeData.TangentZ);
	}
	else
	{
		TangentToLocal = GetTangentBasis(Vert.RawAttributeData.TangentZ);
	}
	return TangentToLocal;
}
void SetVertexParameterInstanceData(inout FMaterialVertexParameters VertexParameters, FInstanceSceneData InstanceData, FPrimitiveSceneData PrimitiveData, bool bEvaluateWorldPositionOffset)
{
	VertexParameters.PrimitiveId			= InstanceData.PrimitiveId;
	VertexParameters.InstanceLocalToWorld	= InstanceData.LocalToWorld;
	VertexParameters.InstanceWorldToLocal	= InstanceData.WorldToLocal;
	VertexParameters.PrevFrameLocalToWorld	= InstanceData.PrevLocalToWorld;
	VertexParameters.PerInstanceRandom      = InstanceData.RandomID;
	VertexParameters.SceneData.PrimitiveId 	= InstanceData.PrimitiveId;
	VertexParameters.SceneData.InstanceId 	= InstanceData.RelativeId;
	VertexParameters.SceneData.InstanceData	= InstanceData;
	VertexParameters.SceneData.Primitive	= PrimitiveData;
	VertexParameters.bEvaluateWorldPositionOffset = bEvaluateWorldPositionOffset;
}
void SetVertexParameterAttributeData(inout FMaterialVertexParameters VertexParameters, FNanitePostDeformVertex Vert, float4x4 LocalToTranslatedWorld, float3x3 LocalToWorldNoScale)
{
	float3x3 TangentToLocal = CalcVertexTangentToLocal(VertexParameters.SceneData.Primitive, VertexParameters.SceneData.InstanceData, Vert);
	VertexParameters.WorldPosition		= mul(float4(Vert.Position, 1), LocalToTranslatedWorld).xyz;
	VertexParameters.TangentToWorld		= mul(TangentToLocal, LocalToWorldNoScale);
	VertexParameters.VertexColor		= Vert.RawAttributeData.Color;
	VertexParameters.PreSkinnedPosition = Vert.Position;
	VertexParameters.PreSkinnedNormal	= TangentToLocal[2];
	[unroll]
	for (uint TexCoordIndex = 0; TexCoordIndex < 2; ++TexCoordIndex)
	{
		VertexParameters.TexCoords[TexCoordIndex] = Vert.RawAttributeData.TexCoords[min(TexCoordIndex, 4 - 1)];
	}
	VertexParameters.LWCData = MakeMaterialLWCData(VertexParameters);
}
struct FNaniteVertTransforms
{
	float4x4 LocalToTranslatedWorld;
	float4x4 PrevLocalToTranslatedWorld;
	float4x4 TranslatedWorldToClip;
	float3x3 LocalToWorldNoScale;
	float3x3 PrevLocalToWorldNoScale;
	float3x3 WorldToLocalVector;
	float3x3 PrevWorldToLocalVector;
};
struct FNaniteTransformedVert
{
	uint VertIndex;
	float3 PointLocal;
	float3 PointPostDeform;
	float3 PrevPointPostDeform;
	float3 PointWorld;
	float3 PointWorld_NoOffset;
	float4 PointClip;
	float3 NormalPostDeform;
	float4 NormalClip;
	FNaniteRawAttributeData RawAttributeData;
	float SplineDist;
	float2 CustomizedUVs[1];
};
struct FNaniteTransformedTri
{
	FNaniteTransformedVert Verts[3];
};
FNaniteVertTransforms CalculateNaniteVertexTransforms(FInstanceSceneData InstanceData, FInstanceDynamicData InstanceDynamicData, FNaniteView NaniteView)
{
	const float4x4 LocalToTranslatedWorld = InstanceDynamicData.LocalToTranslatedWorld;
	const float4x4 PrevLocalToTranslatedWorld = InstanceDynamicData.PrevLocalToTranslatedWorld;
	const float3 InvNonUniformScale = InstanceData.InvNonUniformScale;
	float3x3 LocalToWorldNoScale = (float3x3)LocalToTranslatedWorld;
	LocalToWorldNoScale[0] *= InvNonUniformScale.x;
	LocalToWorldNoScale[1] *= InvNonUniformScale.y;
	LocalToWorldNoScale[2] *= InvNonUniformScale.z;
	float3x3 PrevLocalToWorldNoScale = (float3x3)PrevLocalToTranslatedWorld;
	PrevLocalToWorldNoScale[0] *= InvNonUniformScale.x;
	PrevLocalToWorldNoScale[1] *= InvNonUniformScale.y;
	PrevLocalToWorldNoScale[2] *= InvNonUniformScale.z;
	float3x3 WorldToLocalVector = DFToFloat3x3(InstanceData.WorldToLocal);
	const float3 SqInvNonUniformScale = Pow2(InvNonUniformScale);
	float3x3 PrevWorldToLocalVector = DFToFloat3x3(InstanceData.PrevLocalToWorld);
	PrevWorldToLocalVector[0] *= SqInvNonUniformScale.x;
	PrevWorldToLocalVector[1] *= SqInvNonUniformScale.y;
	PrevWorldToLocalVector[2] *= SqInvNonUniformScale.z;
	PrevWorldToLocalVector = transpose(PrevWorldToLocalVector);
	FNaniteVertTransforms Transforms;
	Transforms.LocalToTranslatedWorld		= LocalToTranslatedWorld;
	Transforms.PrevLocalToTranslatedWorld	= PrevLocalToTranslatedWorld;
	Transforms.TranslatedWorldToClip		= NaniteView.TranslatedWorldToClip;
	Transforms.LocalToWorldNoScale			= LocalToWorldNoScale;
	Transforms.PrevLocalToWorldNoScale		= PrevLocalToWorldNoScale;
	Transforms.WorldToLocalVector			= WorldToLocalVector;
	Transforms.PrevWorldToLocalVector		= PrevWorldToLocalVector;
	return Transforms;
}
FNaniteTransformedTri TransformNaniteTriangle(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FNaniteVertTransforms Transforms, FNanitePostDeformVertex InVerts[3], bool bEvaluateWPO)
{
	FNaniteTransformedTri Tri = (FNaniteTransformedTri)0;
		bEvaluateWPO &= (PrimitiveData.Flags & 0x8000) != 0u;
	[branch]
	if (bEvaluateWPO)
	{
		 [unroll( 3 )]
		for (int i = 0; i < 3; ++i)
		{
			FMaterialVertexParameters VertexParameters = MakeInitializedMaterialVertexParameters();
			SetVertexParameterInstanceData(VertexParameters, InstanceData, PrimitiveData, true );
			SetVertexParameterAttributeData(VertexParameters, InVerts[i], Transforms.LocalToTranslatedWorld, Transforms.LocalToWorldNoScale);
			FMaterialVertexParameters PrevVertexParameters = MakeInitializedMaterialVertexParameters();
			SetVertexParameterInstanceData(PrevVertexParameters, InstanceData, PrimitiveData, true );
			SetVertexParameterAttributeData(PrevVertexParameters, InVerts[i], Transforms.PrevLocalToTranslatedWorld, Transforms.PrevLocalToWorldNoScale);
			const float3 WorldPositionOffset = GetMaterialWorldPositionOffset(VertexParameters);
			const float3 PrevWorldPositionOffset = GetMaterialPreviousWorldPositionOffset(PrevVertexParameters);
			const float3 LocalOffset = mul(WorldPositionOffset, Transforms.WorldToLocalVector);
			const float3 PrevLocalOffset = mul(PrevWorldPositionOffset, Transforms.PrevWorldToLocalVector);
			const float3 NormalWorld = mul(float4(InVerts[i].Normal, 0), Transforms.LocalToTranslatedWorld).xyz;
			Tri.Verts[i].VertIndex				= InVerts[i].VertIndex;
			Tri.Verts[i].RawAttributeData		= InVerts[i].RawAttributeData;
			Tri.Verts[i].SplineDist				= InVerts[i].SplineDist;
			Tri.Verts[i].NormalPostDeform		= InVerts[i].Normal;
			Tri.Verts[i].NormalClip				= mul(float4(NormalWorld, 0), Transforms.TranslatedWorldToClip);
			Tri.Verts[i].PointLocal				= InVerts[i].PointLocal;
			Tri.Verts[i].PointPostDeform		= InVerts[i].Position + LocalOffset;
			Tri.Verts[i].PrevPointPostDeform	= InVerts[i].Position + PrevLocalOffset;
			Tri.Verts[i].PointWorld				= VertexParameters.WorldPosition + WorldPositionOffset;
			Tri.Verts[i].PointWorld_NoOffset	= VertexParameters.WorldPosition;
			Tri.Verts[i].PointClip				= mul(float4(Tri.Verts[i].PointWorld, 1), Transforms.TranslatedWorldToClip);
			GetMaterialCustomizedUVs(VertexParameters, Tri.Verts[i].CustomizedUVs);
			GetCustomInterpolators(VertexParameters, Tri.Verts[i].CustomizedUVs);
		}
	}
	else
	{
		 [unroll( 3 )]
		for (int i = 0; i < 3; ++i)
		{
			const float3 NormalWorld			= mul(float4(InVerts[i].Normal, 0), Transforms.LocalToTranslatedWorld).xyz;
			Tri.Verts[i].VertIndex				= InVerts[i].VertIndex;
			Tri.Verts[i].RawAttributeData		= InVerts[i].RawAttributeData;
			Tri.Verts[i].SplineDist				= InVerts[i].SplineDist;
			Tri.Verts[i].NormalPostDeform		= InVerts[i].Normal;
			Tri.Verts[i].NormalClip				= mul(float4(NormalWorld, 0), Transforms.TranslatedWorldToClip);
			Tri.Verts[i].PointLocal				= InVerts[i].PointLocal;
			Tri.Verts[i].PointPostDeform		= InVerts[i].Position;
			Tri.Verts[i].PrevPointPostDeform	= InVerts[i].Position;
			Tri.Verts[i].PointWorld				= mul(float4(Tri.Verts[i].PointPostDeform, 1), Transforms.LocalToTranslatedWorld).xyz;
			Tri.Verts[i].PointWorld_NoOffset	= Tri.Verts[i].PointWorld;
			Tri.Verts[i].PointClip				= mul(float4(Tri.Verts[i].PointWorld, 1), Transforms.TranslatedWorldToClip);
			FMaterialVertexParameters VertexParameters = MakeInitializedMaterialVertexParameters();
			SetVertexParameterInstanceData(VertexParameters, InstanceData, PrimitiveData, false );
			SetVertexParameterAttributeData(VertexParameters, InVerts[i], Transforms.LocalToTranslatedWorld, Transforms.LocalToWorldNoScale);
			GetMaterialCustomizedUVs(VertexParameters, Tri.Verts[i].CustomizedUVs);
			GetCustomInterpolators(VertexParameters, Tri.Verts[i].CustomizedUVs);
		}
	}
	return Tri;
}
FNaniteTransformedTri FetchTransformedNaniteTriangle(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FNaniteVertTransforms Transforms, FCluster Cluster, uint3 VertIndexes, bool bEvaluateWPO)
{
	FNanitePostDeformVertex Verts[3];
	FetchAndDeformLocalNaniteTriangle(PrimitiveData, InstanceData, Cluster, VertIndexes, 2, Verts);
	return TransformNaniteTriangle(PrimitiveData, InstanceData, Transforms, Verts, bEvaluateWPO);
}
FMaterialPixelParameters FetchNaniteMaterialPixelParameters(FPrimitiveSceneData PrimitiveData, FInstanceSceneData InstanceData, FInstanceDynamicData InstanceDynamicData, FNaniteView NaniteView, FNaniteTransformedTri Tri, FCluster Cluster, FBarycentrics Barycentrics, inout FVertexFactoryInterpolantsVSToPS Interpolants, inout float4 SvPosition)
{
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
	const float SignTest = dot(cross(Tri.Verts[1].PointClip.xyw - Tri.Verts[0].PointClip.xyw, Tri.Verts[2].PointClip.xyw - Tri.Verts[0].PointClip.xyw), Tri.Verts[0].PointClip.xyw);
	Result.TwoSidedSign = CondMask(SignTest > 0.0f, -1.0f, 1.0f);
	float3x3 TangentRot =
	{
		1, 0, 0,
		0, 1, 0,
		0, 0, 1
	};
	const uint NumAttributeDataCoords = 1;
	const FNaniteAttributeData AttributeData = GetAttributeData(
		Cluster,
		Tri.Verts[0].PointLocal,
		Tri.Verts[1].PointLocal,
		Tri.Verts[2].PointLocal,
		Tri.Verts[0].RawAttributeData,
		Tri.Verts[1].RawAttributeData,
		Tri.Verts[2].RawAttributeData,
		Barycentrics,
		InstanceData,
		NumAttributeDataCoords,
		TangentRot
	);
	Result.VertexColor = float4(1, 1, 1, 1);
	Result.VertexColor_DDX = 0.0f;
	Result.VertexColor_DDY = 0.0f;
	Result.TangentToWorld = AttributeData.TangentToWorld;
	Result.UnMirrored = AttributeData.UnMirrored;
	[unroll]
	for (uint TexCoordIndex = 0; TexCoordIndex < 1; TexCoordIndex++)
	{
		TDual< float2 > TexCoord = Lerp( Tri.Verts[0].CustomizedUVs[TexCoordIndex], Tri.Verts[1].CustomizedUVs[TexCoordIndex], Tri.Verts[2].CustomizedUVs[TexCoordIndex], Barycentrics );
		Result.TexCoords[TexCoordIndex]		= TexCoord.Value;
		Result.TexCoords_DDX[TexCoordIndex]	= TexCoord.Value_dx;
		Result.TexCoords_DDY[TexCoordIndex]	= TexCoord.Value_dy;
	}
	const TDual< float3 > PointWorld = Lerp( Tri.Verts[0].PointWorld, Tri.Verts[1].PointWorld, Tri.Verts[2].PointWorld, Barycentrics );
	Result.WorldPosition_CamRelative	= PointWorld.Value;
	Result.WorldPosition_DDX			= PointWorld.Value_dx;
	Result.WorldPosition_DDY			= PointWorld.Value_dy;
	Result.WorldPosition_NoOffsets_CamRelative = Lerp( Tri.Verts[0].PointWorld_NoOffset, Tri.Verts[1].PointWorld_NoOffset, Tri.Verts[2].PointWorld_NoOffset, Barycentrics ).Value;
	const float3 PrevPointPostDeform = Lerp( Tri.Verts[0].PrevPointPostDeform, Tri.Verts[1].PrevPointPostDeform, Tri.Verts[2].PrevPointPostDeform, Barycentrics ).Value;
	float3 PrevPointWorld = mul(float4(PrevPointPostDeform.xyz, 1), InstanceDynamicData.PrevLocalToTranslatedWorld).xyz;
	Result.PrevScreenPosition = mul(float4(PrevPointWorld, 1), NaniteView.PrevTranslatedWorldToClip);
	{
		const TDual< float4 > PointClip = Lerp( Tri.Verts[0].PointClip, Tri.Verts[1].PointClip, Tri.Verts[2].PointClip, Barycentrics );
		SvPosition.w = PointClip.Value.w;
		float2 Z_DDX_DDY = float2( PointClip.Value_dx.z, PointClip.Value_dy.z );
		float2 W_DDX_DDY = float2( PointClip.Value_dx.w, PointClip.Value_dy.w );
		float2 PPZ_DDX_DDY = (Z_DDX_DDY * PointClip.Value.w - PointClip.Value.z * W_DDX_DDY) / (PointClip.Value.w * PointClip.Value.w);
		SvPositionToResolvedScreenPositionDeriv(SvPosition, PPZ_DDX_DDY, W_DDX_DDY, Result.ScreenPosition, Result.ScreenPosition_DDX, Result.ScreenPosition_DDY);
	}
	Result.Particle.Color = float4(1, 1, 1, 1);
	Result.PerInstanceRandom = InstanceData.RandomID;
	Result.PrimitiveId  = InstanceData.PrimitiveId;
	Result.InstanceId   = InstanceData.RelativeId;
	return Result;
}
FMaterialPixelParameters FetchNaniteMaterialPixelParameters(FNaniteView NaniteView, uint64_t PackedPixel, bool bHasPageData, FBarycentrics Barycentrics, bool bCalcBarycentrics, uint3 TriIndices, bool bCalcTriIndices, inout FVertexFactoryInterpolantsVSToPS Interpolants, inout float4 SvPosition)
{
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();
	uint DepthInt = 0;
	uint VisibleClusterIndex = 0;
	uint TriIndex = 0;
	bool bIsImposter = false;
	UnpackVisPixel(PackedPixel, DepthInt, VisibleClusterIndex, TriIndex, bIsImposter);
	SvPosition.z = asfloat(DepthInt);
	if (VisibleClusterIndex != 0xFFFFFFFF)
	{
		FVisibleCluster VisibleCluster           = GetVisibleCluster( VisibleClusterIndex );
		FPrimitiveSceneData PrimitiveData;
		FInstanceSceneData InstanceData;
		GetNaniteMaterialSceneData(VisibleCluster, PrimitiveData, InstanceData);
		FInstanceDynamicData InstanceDynamicData = CalculateInstanceDynamicData(NaniteView, InstanceData);
		FCluster Cluster                         = GetCluster(VisibleCluster.PageIndex, VisibleCluster.ClusterIndex);
		if (bCalcTriIndices)
		{
			TriIndices = DecodeTriangleIndices(Cluster, TriIndex);
		}
		bool bEvaluateWPO = !bIsImposter;
		bEvaluateWPO &= (VisibleCluster.Flags & 0x8) != 0;
		const FNaniteVertTransforms Transforms = CalculateNaniteVertexTransforms(InstanceData, InstanceDynamicData, NaniteView);
		const FNaniteTransformedTri Tri = FetchTransformedNaniteTriangle(PrimitiveData, InstanceData, Transforms, Cluster, TriIndices, bEvaluateWPO);
		if (bCalcBarycentrics)
		{
			const float2 PixelClip = (SvPosition.xy - NaniteView.ViewRect.xy) * NaniteView.ViewSizeAndInvSize.zw * float2(2, -2) + float2(-1, 1);
			Barycentrics = CalculateTriangleBarycentrics(PixelClip, Tri.Verts[0].PointClip, Tri.Verts[1].PointClip, Tri.Verts[2].PointClip, NaniteView.ViewSizeAndInvSize.zw);
		}
		Result = FetchNaniteMaterialPixelParameters(PrimitiveData, InstanceData, InstanceDynamicData, NaniteView, Tri, Cluster, Barycentrics, Interpolants, SvPosition);
	}
	return Result;
}
FMaterialPixelParameters GetMaterialPixelParameters(FNaniteView NaniteView, inout FVertexFactoryInterpolantsVSToPS Interpolants, inout float4 SvPosition)
{
	const uint2 PixelPos = SvPosition.xy - float2(0.5f, 0.5f);
	const uint64_t PackedPixel = Nanite_VisBuffer64[PixelPos];
	const FBarycentrics Barycentrics = (FBarycentrics)0; 
	return FetchNaniteMaterialPixelParameters(NaniteView, PackedPixel, 0, Barycentrics, true, uint3(0,0,0), true, Interpolants, SvPosition);
}
FMaterialPixelParameters GetMaterialPixelParameters(inout FVertexFactoryInterpolantsVSToPS Interpolants, inout float4 SvPosition)
{
	const FNaniteView NaniteView = GetNaniteView(0);
	return GetMaterialPixelParameters(NaniteView, Interpolants, SvPosition);
}
float3 ComputeVolumetricLightmapBrickTextureUVs(float3 WorldPosition) 
{
	float3 IndirectionVolumeUVs = clamp(WorldPosition * View.VolumetricLightmapWorldToUVScale + View.VolumetricLightmapWorldToUVAdd, 0.0f, .99f);
	float3 IndirectionTextureTexelCoordinate = IndirectionVolumeUVs * View.VolumetricLightmapIndirectionTextureSize;
	float4 BrickOffsetAndSize = View_VolumetricLightmapIndirectionTexture.Load(int4(IndirectionTextureTexelCoordinate, 0));
	float PaddedBrickSize = View.VolumetricLightmapBrickSize + 1;
	return (BrickOffsetAndSize.xyz * PaddedBrickSize + frac(IndirectionTextureTexelCoordinate / BrickOffsetAndSize.w) * View.VolumetricLightmapBrickSize + .5f) * View.VolumetricLightmapBrickTexelSize;
}
float GetVolumetricLightmapDirectionalLightShadowing(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_DirectionalLightShadowingBrickTexture, View_SharedBilinearClampedSampler, BrickTextureUVs, 0).x;
}
float4 GetPrecomputedShadowMasks(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{
		float DirectionalLightShadowing = 1.0f;
		[branch]
		if ((GetPrimitiveData(MaterialParameters).Flags & 0x4) != 0)
		{
				VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs(LWCToFloat(GetWorldPosition(MaterialParameters)));
			DirectionalLightShadowing = GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs);
		}
		return float4(DirectionalLightShadowing, 1, 1, 1);
}
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}
float3 Calculate3DVelocity(float4 PackedVelocityA, float4 PackedVelocityC)
{
	float2 ScreenPos = PackedVelocityA.xy / PackedVelocityA.w - ResolvedView.TemporalAAJitter.xy;
	float2 PrevScreenPos = PackedVelocityC.xy / PackedVelocityC.w - ResolvedView.TemporalAAJitter.zw;
	float DeviceZ = PackedVelocityA.z / PackedVelocityA.w;
	float PrevDeviceZ = PackedVelocityC.z / PackedVelocityC.w;
	float3 Velocity = float3(ScreenPos - PrevScreenPos, DeviceZ - PrevDeviceZ);
	return Velocity;
}
float Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const float3 BaseColor,
	const float  Metallic,
	const float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;
	if (false)
	{
	}
	else if (ShadingModel == 6)
	{
		GBuffer.CustomData.rgb = EncodeSubsurfaceColor(SubsurfaceColor);
		GBuffer.CustomData.a = Opacity;
	}
}
void GetSkyLighting(FMaterialPixelParameters MaterialParameters, float LightmapVTPageTableResult, bool bEvaluateBackface, float3 WorldNormal, FloatDeriv2 LightmapUV, uint LightmapDataIndex, float3 SkyOcclusionUV3D, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting)
{
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	if (OpaqueBasePass.Shared_UseBasePassSkylight > 0)
	{
	}
}
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters, 
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	float LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance)
{
	OutIndirectIrradiance = 0;
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	FloatDeriv2 SkyOcclusionUV = (FloatDeriv2)0;
	uint SkyOcclusionDataIndex = 0u;
	OutDiffuseLighting *= View.PrecomputedIndirectLightingColorScale;
	OutSubsurfaceLighting *= View.PrecomputedIndirectLightingColorScale;
	float3 SkyDiffuseLighting;
	float3 SkySubsurfaceLighting;
	GetSkyLighting(MaterialParameters, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, SkyOcclusionUV, SkyOcclusionDataIndex, VolumetricLightmapBrickTextureUVs, SkyDiffuseLighting, SkySubsurfaceLighting);
	OutSubsurfaceLighting += SkySubsurfaceLighting;
	OutDiffuseLighting += SkyDiffuseLighting;
}
uint GetDiffuseIndirectSampleOcclusion(FGBufferData GBuffer, float3 V, float3 WorldNormal, float3 WorldBentNormal, float2 SvPosition, float MaterialAO)
{
	uint DiffuseIndirectSampleOcclusion = 0;
	return DiffuseIndirectSampleOcclusion;
}
uint GetSelectiveOutputMask()
{
	uint Mask = 0;
	return Mask;
}
void FPixelShaderInOut_MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	in FPixelShaderIn In,
	inout FPixelShaderOut Out)
{
	const uint EyeIndex = 0;
	ResolvedView = ResolveView();
	float4 OutVelocity = 0;
	float4 OutGBufferD = 0;
	float4 OutGBufferE = 0;
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, In.SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;
	float LightmapVTPageTableResult = (float)0.0f;
	{
		float3 TranslatedWorldPosition = MaterialParameters.WorldPosition_CamRelative;
		float3 TranslatedWorldPosition_NoOffsets = MaterialParameters.WorldPosition_NoOffsets_CamRelative;
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, In.SvPosition, MaterialParameters.ScreenPosition, In.bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition_NoOffsets);
	}
	const bool bEditorWeightedZBuffering = false;
	if (!bEditorWeightedZBuffering)
	{
		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);
	}
	const float Dither = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View.StateFrameIndexMod8);
	float3 BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);
	float Roughness = GetMaterialRoughness(PixelMaterialInputs);
	float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);
	float Opacity = GetMaterialOpacity(PixelMaterialInputs);
	float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);
	float3 SubsurfaceColor = 0;
	float SubsurfaceProfile = 0;
	if (ShadingModel == 2 || ShadingModel == 3 || ShadingModel == 5 || ShadingModel == 6 || ShadingModel == 8 || ShadingModel == 9)
	{
		float4 SubsurfaceData = GetMaterialSubsurfaceData(PixelMaterialInputs);
		if (false) 
		{
		}
		else if (ShadingModel == 2 || ShadingModel == 3 || ShadingModel == 6)
		{
			SubsurfaceColor = SubsurfaceData.rgb * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
		}
		SubsurfaceProfile = SubsurfaceData.a;
	}
	float DBufferOpacity = 1.0f;
	[flatten]
	if ((GetPrimitiveData(MaterialParameters).Flags & 0x8) != 0 && View.ShowDecalsMask > 0)
	{
		uint ValidDBufferTargetMask = GetDBufferTargetMask(uint2(In.SvPosition.xy)) & 7;
		[branch]
		if (ValidDBufferTargetMask)
		{
			float2 BufferUV = SvPositionToBufferUV(In.SvPosition);
			FDBufferData DBufferData = GetDBufferData(BufferUV, ValidDBufferTargetMask);
			ApplyDBufferData(DBufferData, MaterialParameters.WorldNormal, SubsurfaceColor, Roughness, BaseColor, Metallic, Specular);
			DBufferOpacity = (DBufferData.ColorOpacity + DBufferData.NormalOpacity + DBufferData.RoughnessOpacity) * (1.0f / 3.0f);
		}
	}
	const float BaseMaterialCoverageOverWater = Opacity;
	const float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;
	float3 VolumetricLightmapBrickTextureUVs;
	FGBufferData GBuffer = (FGBufferData)0;
	GBuffer.GBufferAO = MaterialAO;
	GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;
	GBuffer.PrecomputedShadowFactors = GetPrecomputedShadowMasks(LightmapVTPageTableResult, Interpolants, MaterialParameters, VolumetricLightmapBrickTextureUVs);
	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		Dither,
		ShadingModel
		);
	GBuffer.SelectiveOutputMask = GetSelectiveOutputMask() >> 4;
	GBuffer.Velocity = 0;
	[branch]
	if ((GetPrimitiveData(MaterialParameters).Flags & 0x20) != 0)
	{
		float3 Velocity = Calculate3DVelocity(MaterialParameters.ScreenPosition, MaterialParameters.PrevScreenPosition);
		float4 EncodedVelocity = EncodeVelocityToTexture(Velocity, (GetPrimitiveData(MaterialParameters).Flags & 0x2000000) != 0);
		GBuffer.Velocity = EncodedVelocity;
	}
	const bool bChecker = CheckerFromPixelPos(MaterialParameters.SvPosition.xy);
	GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);
	GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;
	{
		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View.DiffuseOverrideParameter.w + View.DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View.SpecularOverrideParameter.w + View.SpecularOverrideParameter.xyz;
	}
	if (View.RenderingReflectionCaptureMask) 
	{
		EnvBRDFApproxFullyRough(GBuffer.DiffuseColor, GBuffer.SpecularColor);
	}
	float3 InputBentNormal = MaterialParameters.WorldNormal;
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		InputBentNormal = OctahedronToUnitVector(oct1);
	}
	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, MaterialAO);
	GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), ShadingOcclusion.SpecOcclusion ).g;
	GBuffer.DiffuseIndirectSampleOcclusion = GetDiffuseIndirectSampleOcclusion(GBuffer, MaterialParameters.CameraVector, MaterialParameters.WorldNormal, GetWorldBentNormalZero(MaterialParameters), In.SvPosition.xy, MaterialAO);
	float3 DiffuseColor = 0;
	float3 Color = 0;
	float IndirectIrradiance = 0;
	float3 ColorSeparateSpecular = 0;
	float3 ColorSeparateEmissive = 0;
	float3 DiffuseIndirectLighting = 0;
	float3 SubsurfaceIndirectLighting = 0;
	float3 SeparatedWaterMainDirLightLuminance = float3(0, 0, 0); 
		float3 DiffuseDir = ShadingOcclusion.BentNormal;
		float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;
		const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);
		GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, VolumetricLightmapBrickTextureUVs, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance);
		float IndirectOcclusion = 1.0f;
		float2 NearestResolvedDepthScreenUV = 0;
		float DirectionalLightShadow = 1.0f;
		float DirectionalLightCloudShadow = 1.0f;
		DiffuseColor += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion );
		float4 HeightFogging = float4(0,0,0,1);
	float4 Fogging = HeightFogging;
	float3 Emissive = 0;
		float3 GBufferDiffuseColor = GBuffer.DiffuseColor;
		float3 GBufferSpecularColor = GBuffer.SpecularColor;
		EnvBRDFApproxFullyRough(GBufferDiffuseColor, GBufferSpecularColor);
		Color = lerp(Color, GBufferDiffuseColor, View.UnlitViewmodeMask);
	Emissive = GetMaterialEmissive(PixelMaterialInputs);
	float3 OutOfBoundsMaskLuminance = 0;
		[branch]
		if (View.OutOfBoundsMask > 0)
		{
			FPrimitiveSceneData PrimitiveData = GetPrimitiveData(MaterialParameters);
			float3 ObjectBounds =
				float3(
					PrimitiveData.ObjectBoundsX,
					PrimitiveData.ObjectBoundsY,
					PrimitiveData.ObjectBoundsZ
				);
			if (any(abs(DFFastLocalSubtractDemote(MaterialParameters.AbsoluteWorldPosition, PrimitiveData.ObjectWorldPosition)) > ObjectBounds + 1))
			{
				float3 WorldPosModulo = DFFmodByPow2Demote(MaterialParameters.AbsoluteWorldPosition, 65536.0);
				float Gradient = frac(dot(WorldPosModulo, float3(.577f, .577f, .577f) / 500.0f));
				OutOfBoundsMaskLuminance = lerp(float3(1,1,0), float3(0,1,1), Gradient.xxx > .5f);
				Emissive = OutOfBoundsMaskLuminance;
				Opacity = 1;
			}
			else if (PrimitiveData.MaxWPOExtent > 0.0f)
			{
				const float3 OffsetAmt = abs(MaterialParameters.WorldPosition_CamRelative - MaterialParameters.WorldPosition_NoOffsets_CamRelative);
				const float MaxOffsetDim = max3(OffsetAmt.x, OffsetAmt.y, OffsetAmt.z);
				const float Proximity = 1.0f - saturate(abs(MaxOffsetDim - PrimitiveData.MaxWPOExtent) / 0.05f);
				Emissive = Proximity * float3(1, 0 ,1);
				Opacity = sign(Proximity);
			}
		}
	Color += DiffuseColor;
	Color += Emissive;
	bool bSubstrateSubsurfaceEnable = false;
		{
			FLightAccumulator LightAccumulator = (FLightAccumulator)0;
			Color = Color * Fogging.a + Fogging.rgb;
			LightAccumulator_Add(LightAccumulator, Color, 0, 1.0f, false);
			Out.MRT[0] =  ( LightAccumulator_GetResult(LightAccumulator) );
		}
		float QuantizationBias = PseudoRandom( MaterialParameters.SvPosition.xy ) - 0.5f;
		GBuffer.IndirectIrradiance = IndirectIrradiance;
		{
				GBuffer.GenericAO = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);	
			EncodeGBufferToMRT(Out, GBuffer, QuantizationBias);
			if (GBuffer.ShadingModelID == 0 && !0) 
			{
				Out.MRT[1] = 0;
				SetGBufferForUnlit(Out.MRT[2]);
				Out.MRT[3] = 0;
				Out.MRT[1 ? 5 : 4] = 0;
				Out.MRT[1 ? 6 : 5] = 0;
			}
		}
	if(bEditorWeightedZBuffering)
	{
		Out.MRT[0].a = 1;
			Out.MRT[0].a = GetMaterialMaskInputRaw(PixelMaterialInputs);
			 ;
	}
	const float ViewPreExposure = View.PreExposure;
		Out.MRT[0].rgba *= ViewPreExposure;
	Out.MRT[0].xyz = min(Out.MRT[0].xyz, Max10BitsFloat.xxx * 0.5f);
}
float LinearToSrgbBranchingChannel(float lin) 
{
	if(lin < 0.00313067) return lin * 12.92;
	return pow(lin, (1.0/2.4)) * 1.055 - 0.055;
}
float3 LinearToSrgbBranching(float3 lin) 
{
	return float3(
		LinearToSrgbBranchingChannel(lin.r),
		LinearToSrgbBranchingChannel(lin.g),
		LinearToSrgbBranchingChannel(lin.b));
}
float3 LinearToSrgb(float3 lin) 
{
	return LinearToSrgbBranching(lin);
}
struct FUERootConstants
{
	uint  RecordIndex;
	uint3 PassData;
};
ConstantBuffer<FUERootConstants> UERootConstants :  register(   b0 ,    space3 );
RWTexture2D<float4> OutTarget0;
RWTexture2D<float4> OutTarget1;
RWTexture2D<float4> OutTarget2;
RWTexture2D<float4> OutTarget3;
RWTexture2D<float4> OutTarget4;
RWTexture2D<float4> OutTarget5;
RWTexture2D<float4> OutTarget6;
FPixelShaderOut ShadePixel(const float2 SVPositionXY, uint QuadIndex)
{
	FNaniteFullscreenVSToPS NaniteInterpolants = (FNaniteFullscreenVSToPS)0;
	NaniteInterpolants.TileIndex = QuadIndex;
	const float4 SvPosition = float4(SVPositionXY, 0.0f, 1.0f);
	FVertexFactoryInterpolantsVSToPS Interpolants = (FVertexFactoryInterpolantsVSToPS)0;
	Interpolants.ViewIndex = NaniteInterpolants.ViewIndex; 
	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;
	PixelShaderIn.SvPosition = SvPosition;
	PixelShaderIn.bIsFrontFace = false;
	FSharedBasePassInterpolants BasePassInterpolants = (FSharedBasePassInterpolants)0;
	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut);
	PixelShaderOut.MRT[3] = float4(LinearToSrgb(PixelShaderOut.MRT[3].rgb), PixelShaderOut.MRT[3].a); 
	return PixelShaderOut;
}
void ExportPixel(const uint2 PixelPos, FPixelShaderOut ShadedPixel)
{
	OutTarget0[PixelPos] = ShadedPixel.MRT[0];
	OutTarget1[PixelPos] = ShadedPixel.MRT[1];
	OutTarget2[PixelPos] = ShadedPixel.MRT[2];
	OutTarget3[PixelPos] = ShadedPixel.MRT[3];
	OutTarget4[PixelPos] = ShadedPixel.MRT[4];
	OutTarget5[PixelPos] = ShadedPixel.MRT[5];
	OutTarget6[PixelPos] = ShadedPixel.MRT[6];
}
void ProcessPixel(uint ShadingBin, const uint2 PixelPos, const float2 SVPositionXY, uint QuadIndex, uint DispatchIndex, uint PixelWriteMask, uint HelperLaneCount)
{
	FPixelShaderOut ShadedPixel = ShadePixel(SVPositionXY, QuadIndex);
	[branch]
	if (PixelWriteMask & 1u)
	{
		ExportPixel(PixelPos, ShadedPixel);
	}
	[branch]
	if (PixelWriteMask & 2u) 
	{
		ExportPixel(PixelPos + uint2(1, 0), ShadedPixel);
	}
	[branch]
	if (PixelWriteMask & 4u) 
	{
		ExportPixel(PixelPos + uint2(0, 1), ShadedPixel);
	}
	[branch]
	if (PixelWriteMask & 8u) 
	{
		ExportPixel(PixelPos + uint2(1, 1), ShadedPixel);
	}
}
[numthreads(64, 1, 1)]
void MainCS(uint ThreadIndex : SV_GroupIndex, uint GroupID : SV_GroupID)
{
	const uint ShadingBin		= UERootConstants.RecordIndex;
	const bool bQuadBinning		= UERootConstants.PassData.x != 0u;
	const uint DataByteOffset	= UERootConstants.PassData.y;
	const uint PixelIndex = (GroupID * 64) + ThreadIndex;
	const uint3 ShadingBinMeta = Nanite_ShadingBinData.Load3(ShadingBin * uint(sizeof(FNaniteShadingBinMeta)));
	const uint ElementCount = ShadingBinMeta.x;
	const uint ElementIndex = bQuadBinning ? (PixelIndex >> 2) : PixelIndex;
	[branch]
	if (ElementIndex >= ElementCount)
	{
		return;
	}
	uint2 PixelPos;
	uint2 VRSShift;
	uint PixelWriteMask;
	uint HelperLaneCount;
	[branch]
	if (bQuadBinning)
	{
		const uint2 PackedElement = Nanite_ShadingBinData.Load2(DataByteOffset + (ShadingBinMeta.z * 4 + ElementIndex * 8));
		const uint CornerIndex = (ThreadIndex & 3u);
		const uint2 TopLeft = uint2(BitFieldExtractU32(PackedElement.x, 14, 0), BitFieldExtractU32(PackedElement.x, 14, 14));
		VRSShift			= uint2(BitFieldExtractU32(PackedElement.x, 1, 28), BitFieldExtractU32(PackedElement.x, 1, 29));
		PixelWriteMask		= BitFieldExtractU32(PackedElement.y, 4, CornerIndex * 4u);
		PixelPos			= TopLeft + (uint2(CornerIndex & 1u, CornerIndex >> 1u) << VRSShift);
		HelperLaneCount		= (0 && bQuadBinning) ? (4u - countbits(PixelWriteMask)) : 0u;
	}
	else
	{
		const uint PackedElement= Nanite_ShadingBinData.Load(DataByteOffset + (ShadingBinMeta.z * 4 + ElementIndex * 4));
		PixelPos				= uint2(BitFieldExtractU32(PackedElement, 13, 0), BitFieldExtractU32(PackedElement, 13, 13));
		VRSShift				= uint2(BitFieldExtractU32(PackedElement, 1, 26), BitFieldExtractU32(PackedElement, 1, 27));
		PixelWriteMask			= PackedElement >> 28;
	}
	const float2 SVPositionXY = PixelPos + ((1u << VRSShift) * 0.5f);
	ProcessPixel(ShadingBin, PixelPos, SVPositionXY, ElementIndex, PixelIndex, PixelWriteMask, HelperLaneCount);
}

/* BASE64_ENV

BASE64_ENV */
/* DIRECT COMPILE
-directcompile -format=PCD3D_SM6 -entry="MainCS" -shaderPlatformName=PCD3D_SM6 -supportedHardwareMask=0 -cs C:/Users/lte60/Documents/Unreal Projects/actionrpg/Saved/ShaderDebugInfo/PCD3D_SM6/MA_Banana_cbd3710dc8b3eff/Default/FNaniteVertexFactory/TBasePassCSFNoLightMapPolicy/0/BasePassPixelShader.usf -nocrashreports
DIRECT COMPILE */
